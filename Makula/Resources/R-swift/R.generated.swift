//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
	fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
	fileprivate static let hostingBundle = Bundle(for: R.Class.self)

	static func validate() throws {
		try font.validate()
		try intern.validate()
	}

	/// This `R.color` struct is generated, and contains static references to 0 colors.
	struct color {
		fileprivate init() {}
	}

	/// This `R.file` struct is generated, and contains static references to 3 files.
	struct file {
		/// Resource file `AppIcon.png`.
		static let appIconPng = Rswift.FileResource(bundle: R.hostingBundle, name: "AppIcon", pathExtension: "png")
		/// Resource file `TheSansB7Bold.ttf`.
		static let theSansB7BoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "TheSansB7Bold", pathExtension: "ttf")
		/// Resource file `TheSansBoldExpert.ttf`.
		static let theSansBoldExpertTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "TheSansBoldExpert", pathExtension: "ttf")

		/// `bundle.url(forResource: "AppIcon", withExtension: "png")`
		static func appIconPng(_: Void = ()) -> Foundation.URL? {
			let fileResource = R.file.appIconPng
			return fileResource.bundle.url(forResource: fileResource)
		}

		/// `bundle.url(forResource: "TheSansB7Bold", withExtension: "ttf")`
		static func theSansB7BoldTtf(_: Void = ()) -> Foundation.URL? {
			let fileResource = R.file.theSansB7BoldTtf
			return fileResource.bundle.url(forResource: fileResource)
		}

		/// `bundle.url(forResource: "TheSansBoldExpert", withExtension: "ttf")`
		static func theSansBoldExpertTtf(_: Void = ()) -> Foundation.URL? {
			let fileResource = R.file.theSansBoldExpertTtf
			return fileResource.bundle.url(forResource: fileResource)
		}

		fileprivate init() {}
	}

	/// This `R.font` struct is generated, and contains static references to 2 fonts.
	struct font: Rswift.Validatable {
		/// Font `TheSansB7-Bold`.
		static let theSansB7Bold = Rswift.FontResource(fontName: "TheSansB7-Bold")
		/// Font `TheSansBold-Expert`.
		static let theSansBoldExpert = Rswift.FontResource(fontName: "TheSansBold-Expert")

		/// `UIFont(name: "TheSansB7-Bold", size: ...)`
		static func theSansB7Bold(size: CGFloat) -> UIKit.UIFont? {
			return UIKit.UIFont(resource: theSansB7Bold, size: size)
		}

		/// `UIFont(name: "TheSansBold-Expert", size: ...)`
		static func theSansBoldExpert(size: CGFloat) -> UIKit.UIFont? {
			return UIKit.UIFont(resource: theSansBoldExpert, size: size)
		}

		static func validate() throws {
			if R.font.theSansBoldExpert(size: 42) == nil { throw Rswift.ValidationError(description: "[R.swift] Font 'TheSansBold-Expert' could not be loaded, is 'TheSansBoldExpert.ttf' added to the UIAppFonts array in this targets Info.plist?") }
			if R.font.theSansB7Bold(size: 42) == nil { throw Rswift.ValidationError(description: "[R.swift] Font 'TheSansB7-Bold' could not be loaded, is 'TheSansB7Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
		}

		fileprivate init() {}
	}

	/// This `R.image` struct is generated, and contains static references to 13 images.
	struct image {
		/// Image `AppIcon`.
		static let appIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "AppIcon")
		/// Image `add`.
		static let add = Rswift.ImageResource(bundle: R.hostingBundle, name: "add")
		/// Image `amd_netz_logo`.
		static let amd_netz_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "amd_netz_logo")
		/// Image `amslergrid`.
		static let amslergrid = Rswift.ImageResource(bundle: R.hostingBundle, name: "amslergrid")
		/// Image `back_arrow`.
		static let back_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "back_arrow")
		/// Image `checkbox_selected`.
		static let checkbox_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkbox_selected")
		/// Image `checkbox_unselected`.
		static let checkbox_unselected = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkbox_unselected")
		/// Image `checkmark_check`.
		static let checkmark_check = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkmark_check")
		/// Image `checkmark_circle`.
		static let checkmark_circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkmark_circle")
		/// Image `infobutton_normal`.
		static let infobutton_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "infobutton_normal")
		/// Image `infobutton_selected`.
		static let infobutton_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "infobutton_selected")
		/// Image `speaker`.
		static let speaker = Rswift.ImageResource(bundle: R.hostingBundle, name: "speaker")
		/// Image `threedots`.
		static let threedots = Rswift.ImageResource(bundle: R.hostingBundle, name: "threedots")

		/// `UIImage(named: "AppIcon", bundle: ..., traitCollection: ...)`
		static func appIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
			return UIKit.UIImage(resource: R.image.appIcon, compatibleWith: traitCollection)
		}

		/// `UIImage(named: "add", bundle: ..., traitCollection: ...)`
		static func add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
			return UIKit.UIImage(resource: R.image.add, compatibleWith: traitCollection)
		}

		/// `UIImage(named: "amd_netz_logo", bundle: ..., traitCollection: ...)`
		static func amd_netz_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
			return UIKit.UIImage(resource: R.image.amd_netz_logo, compatibleWith: traitCollection)
		}

		/// `UIImage(named: "amslergrid", bundle: ..., traitCollection: ...)`
		static func amslergrid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
			return UIKit.UIImage(resource: R.image.amslergrid, compatibleWith: traitCollection)
		}

		/// `UIImage(named: "back_arrow", bundle: ..., traitCollection: ...)`
		static func back_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
			return UIKit.UIImage(resource: R.image.back_arrow, compatibleWith: traitCollection)
		}

		/// `UIImage(named: "checkbox_selected", bundle: ..., traitCollection: ...)`
		static func checkbox_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
			return UIKit.UIImage(resource: R.image.checkbox_selected, compatibleWith: traitCollection)
		}

		/// `UIImage(named: "checkbox_unselected", bundle: ..., traitCollection: ...)`
		static func checkbox_unselected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
			return UIKit.UIImage(resource: R.image.checkbox_unselected, compatibleWith: traitCollection)
		}

		/// `UIImage(named: "checkmark_check", bundle: ..., traitCollection: ...)`
		static func checkmark_check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
			return UIKit.UIImage(resource: R.image.checkmark_check, compatibleWith: traitCollection)
		}

		/// `UIImage(named: "checkmark_circle", bundle: ..., traitCollection: ...)`
		static func checkmark_circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
			return UIKit.UIImage(resource: R.image.checkmark_circle, compatibleWith: traitCollection)
		}

		/// `UIImage(named: "infobutton_normal", bundle: ..., traitCollection: ...)`
		static func infobutton_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
			return UIKit.UIImage(resource: R.image.infobutton_normal, compatibleWith: traitCollection)
		}

		/// `UIImage(named: "infobutton_selected", bundle: ..., traitCollection: ...)`
		static func infobutton_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
			return UIKit.UIImage(resource: R.image.infobutton_selected, compatibleWith: traitCollection)
		}

		/// `UIImage(named: "speaker", bundle: ..., traitCollection: ...)`
		static func speaker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
			return UIKit.UIImage(resource: R.image.speaker, compatibleWith: traitCollection)
		}

		/// `UIImage(named: "threedots", bundle: ..., traitCollection: ...)`
		static func threedots(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
			return UIKit.UIImage(resource: R.image.threedots, compatibleWith: traitCollection)
		}

		fileprivate init() {}
	}

	/// This `R.nib` struct is generated, and contains static references to 3 nibs.
	struct nib {
		/// Nib `CalendarWeekCellView`.
		static let calendarWeekCellView = _R.nib._CalendarWeekCellView()
		/// Nib `SplitCellView`.
		static let splitCellView = _R.nib._SplitCellView()
		/// Nib `VisusNhdInputPickerCellView`.
		static let visusNhdInputPickerCellView = _R.nib._VisusNhdInputPickerCellView()

		/// `UINib(name: "CalendarWeekCellView", in: bundle)`
		static func calendarWeekCellView(_: Void = ()) -> UIKit.UINib {
			return UIKit.UINib(resource: R.nib.calendarWeekCellView)
		}

		/// `UINib(name: "SplitCellView", in: bundle)`
		static func splitCellView(_: Void = ()) -> UIKit.UINib {
			return UIKit.UINib(resource: R.nib.splitCellView)
		}

		/// `UINib(name: "VisusNhdInputPickerCellView", in: bundle)`
		static func visusNhdInputPickerCellView(_: Void = ()) -> UIKit.UINib {
			return UIKit.UINib(resource: R.nib.visusNhdInputPickerCellView)
		}

		fileprivate init() {}
	}

	/// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
	struct reuseIdentifier {
		fileprivate init() {}
	}

	/// This `R.segue` struct is generated, and contains static references to 0 view controllers.
	struct segue {
		fileprivate init() {}
	}

	/// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
	struct storyboard {
		/// Storyboard `LaunchScreen`.
		static let launchScreen = _R.storyboard.launchScreen()

		/// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
		static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
			return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
		}

		fileprivate init() {}
	}

	/// This `R.string` struct is generated, and contains static references to 20 localization tables.
	struct string {
		/// This `R.string.amslertest` struct is generated, and contains static references to 4 localization keys.
		struct amslertest {
			/// Value: Amslertest
			static let title = Rswift.StringResource(key: "Title", tableName: "Amslertest", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Verzerrungen
			static let textCellTitle = Rswift.StringResource(key: "TextCellTitle", tableName: "Amslertest", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: links
			static let splitCellTitleLeft = Rswift.StringResource(key: "SplitCellTitleLeft", tableName: "Amslertest", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: rechts
			static let splitCellTitleRight = Rswift.StringResource(key: "SplitCellTitleRight", tableName: "Amslertest", bundle: R.hostingBundle, locales: [], comment: nil)

			/// Value: Amslertest
			static func title(_: Void = ()) -> String {
				return NSLocalizedString("Title", tableName: "Amslertest", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Verzerrungen
			static func textCellTitle(_: Void = ()) -> String {
				return NSLocalizedString("TextCellTitle", tableName: "Amslertest", bundle: R.hostingBundle, comment: "")
			}

			/// Value: links
			static func splitCellTitleLeft(_: Void = ()) -> String {
				return NSLocalizedString("SplitCellTitleLeft", tableName: "Amslertest", bundle: R.hostingBundle, comment: "")
			}

			/// Value: rechts
			static func splitCellTitleRight(_: Void = ()) -> String {
				return NSLocalizedString("SplitCellTitleRight", tableName: "Amslertest", bundle: R.hostingBundle, comment: "")
			}

			fileprivate init() {}
		}

		/// This `R.string.appointmentDatePicker` struct is generated, and contains static references to 2 localization keys.
		struct appointmentDatePicker {
			/// Value: Speichern
			static let saveButtonTitle = Rswift.StringResource(key: "SaveButtonTitle", tableName: "AppointmentDatePicker", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Termin-Eingabe
			static let title = Rswift.StringResource(key: "Title", tableName: "AppointmentDatePicker", bundle: R.hostingBundle, locales: [], comment: nil)

			/// Value: Speichern
			static func saveButtonTitle(_: Void = ()) -> String {
				return NSLocalizedString("SaveButtonTitle", tableName: "AppointmentDatePicker", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Termin-Eingabe
			static func title(_: Void = ()) -> String {
				return NSLocalizedString("Title", tableName: "AppointmentDatePicker", bundle: R.hostingBundle, comment: "")
			}

			fileprivate init() {}
		}

		/// This `R.string.appointmentDetail` struct is generated, and contains static references to 25 localization keys.
		struct appointmentDetail {
			/// Value: %@
			static let title = Rswift.StringResource(key: "Title", tableName: "AppointmentDetail", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: %@ Uhr
			static let appointmentTime = Rswift.StringResource(key: "AppointmentTime", tableName: "AppointmentDetail", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Abbrechen
			static let deleteAlertCancel = Rswift.StringResource(key: "DeleteAlertCancel", tableName: "AppointmentDetail", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Amslertest
			static let amslertestModelCellTitle = Rswift.StringResource(key: "AmslertestModelCellTitle", tableName: "AppointmentDetail", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Amslertest
			static let amslertestModelCellTitleSpeech = Rswift.StringResource(key: "AmslertestModelCellTitleSpeech", tableName: "AppointmentDetail", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Arzttermin
			static let medicalAppointmentCellTitle = Rswift.StringResource(key: "MedicalAppointmentCellTitle", tableName: "AppointmentDetail", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Arzttermin
			static let medicalAppointmentCellTitleSpeech = Rswift.StringResource(key: "MedicalAppointmentCellTitleSpeech", tableName: "AppointmentDetail", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Eintrag löschen?
			static let deleteAlertTitle = Rswift.StringResource(key: "DeleteAlertTitle", tableName: "AppointmentDetail", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: HH:mm
			static let appointmentTimeFormat = Rswift.StringResource(key: "AppointmentTimeFormat", tableName: "AppointmentDetail", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Ja, löschen
			static let deleteAlertConfirm = Rswift.StringResource(key: "DeleteAlertConfirm", tableName: "AppointmentDetail", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Lesetest
			static let readingTestModelCellTitle = Rswift.StringResource(key: "ReadingTestModelCellTitle", tableName: "AppointmentDetail", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Lesetest
			static let readingTestModelCellTitleSpeech = Rswift.StringResource(key: "ReadingTestModelCellTitleSpeech", tableName: "AppointmentDetail", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Löschen
			static let deleteCellTitle = Rswift.StringResource(key: "DeleteCellTitle", tableName: "AppointmentDetail", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Löschen
			static let deleteCellTitleSpeech = Rswift.StringResource(key: "DeleteCellTitleSpeech", tableName: "AppointmentDetail", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Notizen
			static let noteCellTitle = Rswift.StringResource(key: "NoteCellTitle", tableName: "AppointmentDetail", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Notizen
			static let noteCellTitleSpeech = Rswift.StringResource(key: "NoteCellTitleSpeech", tableName: "AppointmentDetail", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: O C T
			static let nhdModelCellTitleSpeech = Rswift.StringResource(key: "NhdModelCellTitleSpeech", tableName: "AppointmentDetail", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: OCT
			static let nhdModelCellTitle = Rswift.StringResource(key: "NhdModelCellTitle", tableName: "AppointmentDetail", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Visus
			static let visusModelCellTitle = Rswift.StringResource(key: "VisusModelCellTitle", tableName: "AppointmentDetail", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Visus
			static let visusModelCellTitleSpeech = Rswift.StringResource(key: "VisusModelCellTitleSpeech", tableName: "AppointmentDetail", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Wollen Sie wirklich alle Daten für diesen Tag löschen?
			static let deleteAlertMessage = Rswift.StringResource(key: "DeleteAlertMessage", tableName: "AppointmentDetail", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: links
			static let splitCellTitleLeft = Rswift.StringResource(key: "SplitCellTitleLeft", tableName: "AppointmentDetail", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: links
			static let splitCellTitleLeftSpeech = Rswift.StringResource(key: "SplitCellTitleLeftSpeech", tableName: "AppointmentDetail", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: rechts
			static let splitCellTitleRight = Rswift.StringResource(key: "SplitCellTitleRight", tableName: "AppointmentDetail", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: rechts
			static let splitCellTitleRightSpeech = Rswift.StringResource(key: "SplitCellTitleRightSpeech", tableName: "AppointmentDetail", bundle: R.hostingBundle, locales: [], comment: nil)

			/// Value: %@
			static func title(_ value1: String) -> String {
				return String(format: NSLocalizedString("Title", tableName: "AppointmentDetail", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
			}

			/// Value: %@ Uhr
			static func appointmentTime(_ value1: String) -> String {
				return String(format: NSLocalizedString("AppointmentTime", tableName: "AppointmentDetail", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
			}

			/// Value: Abbrechen
			static func deleteAlertCancel(_: Void = ()) -> String {
				return NSLocalizedString("DeleteAlertCancel", tableName: "AppointmentDetail", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Amslertest
			static func amslertestModelCellTitle(_: Void = ()) -> String {
				return NSLocalizedString("AmslertestModelCellTitle", tableName: "AppointmentDetail", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Amslertest
			static func amslertestModelCellTitleSpeech(_: Void = ()) -> String {
				return NSLocalizedString("AmslertestModelCellTitleSpeech", tableName: "AppointmentDetail", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Arzttermin
			static func medicalAppointmentCellTitle(_: Void = ()) -> String {
				return NSLocalizedString("MedicalAppointmentCellTitle", tableName: "AppointmentDetail", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Arzttermin
			static func medicalAppointmentCellTitleSpeech(_: Void = ()) -> String {
				return NSLocalizedString("MedicalAppointmentCellTitleSpeech", tableName: "AppointmentDetail", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Eintrag löschen?
			static func deleteAlertTitle(_: Void = ()) -> String {
				return NSLocalizedString("DeleteAlertTitle", tableName: "AppointmentDetail", bundle: R.hostingBundle, comment: "")
			}

			/// Value: HH:mm
			static func appointmentTimeFormat(_: Void = ()) -> String {
				return NSLocalizedString("AppointmentTimeFormat", tableName: "AppointmentDetail", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Ja, löschen
			static func deleteAlertConfirm(_: Void = ()) -> String {
				return NSLocalizedString("DeleteAlertConfirm", tableName: "AppointmentDetail", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Lesetest
			static func readingTestModelCellTitle(_: Void = ()) -> String {
				return NSLocalizedString("ReadingTestModelCellTitle", tableName: "AppointmentDetail", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Lesetest
			static func readingTestModelCellTitleSpeech(_: Void = ()) -> String {
				return NSLocalizedString("ReadingTestModelCellTitleSpeech", tableName: "AppointmentDetail", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Löschen
			static func deleteCellTitle(_: Void = ()) -> String {
				return NSLocalizedString("DeleteCellTitle", tableName: "AppointmentDetail", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Löschen
			static func deleteCellTitleSpeech(_: Void = ()) -> String {
				return NSLocalizedString("DeleteCellTitleSpeech", tableName: "AppointmentDetail", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Notizen
			static func noteCellTitle(_: Void = ()) -> String {
				return NSLocalizedString("NoteCellTitle", tableName: "AppointmentDetail", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Notizen
			static func noteCellTitleSpeech(_: Void = ()) -> String {
				return NSLocalizedString("NoteCellTitleSpeech", tableName: "AppointmentDetail", bundle: R.hostingBundle, comment: "")
			}

			/// Value: O C T
			static func nhdModelCellTitleSpeech(_: Void = ()) -> String {
				return NSLocalizedString("NhdModelCellTitleSpeech", tableName: "AppointmentDetail", bundle: R.hostingBundle, comment: "")
			}

			/// Value: OCT
			static func nhdModelCellTitle(_: Void = ()) -> String {
				return NSLocalizedString("NhdModelCellTitle", tableName: "AppointmentDetail", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Visus
			static func visusModelCellTitle(_: Void = ()) -> String {
				return NSLocalizedString("VisusModelCellTitle", tableName: "AppointmentDetail", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Visus
			static func visusModelCellTitleSpeech(_: Void = ()) -> String {
				return NSLocalizedString("VisusModelCellTitleSpeech", tableName: "AppointmentDetail", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Wollen Sie wirklich alle Daten für diesen Tag löschen?
			static func deleteAlertMessage(_: Void = ()) -> String {
				return NSLocalizedString("DeleteAlertMessage", tableName: "AppointmentDetail", bundle: R.hostingBundle, comment: "")
			}

			/// Value: links
			static func splitCellTitleLeft(_: Void = ()) -> String {
				return NSLocalizedString("SplitCellTitleLeft", tableName: "AppointmentDetail", bundle: R.hostingBundle, comment: "")
			}

			/// Value: links
			static func splitCellTitleLeftSpeech(_: Void = ()) -> String {
				return NSLocalizedString("SplitCellTitleLeftSpeech", tableName: "AppointmentDetail", bundle: R.hostingBundle, comment: "")
			}

			/// Value: rechts
			static func splitCellTitleRight(_: Void = ()) -> String {
				return NSLocalizedString("SplitCellTitleRight", tableName: "AppointmentDetail", bundle: R.hostingBundle, comment: "")
			}

			/// Value: rechts
			static func splitCellTitleRightSpeech(_: Void = ()) -> String {
				return NSLocalizedString("SplitCellTitleRightSpeech", tableName: "AppointmentDetail", bundle: R.hostingBundle, comment: "")
			}

			fileprivate init() {}
		}

		/// This `R.string.calendar` struct is generated, and contains static references to 22 localization keys.
		struct calendar {
			/// Value: %02d
			static let dayNumberFormat = Rswift.StringResource(key: "DayNumberFormat", tableName: "Calendar", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: %@ %@
			static let monthTitleFormat = Rswift.StringResource(key: "MonthTitleFormat", tableName: "Calendar", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: April
			static let monthApril = Rswift.StringResource(key: "MonthApril", tableName: "Calendar", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: August
			static let monthAugust = Rswift.StringResource(key: "MonthAugust", tableName: "Calendar", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: DI
			static let weekNameTuesday = Rswift.StringResource(key: "WeekNameTuesday", tableName: "Calendar", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: DO
			static let weekNameThursday = Rswift.StringResource(key: "WeekNameThursday", tableName: "Calendar", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Dezember
			static let monthDecember = Rswift.StringResource(key: "MonthDecember", tableName: "Calendar", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: FR
			static let weekNameFriday = Rswift.StringResource(key: "WeekNameFriday", tableName: "Calendar", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Februar
			static let monthFebruary = Rswift.StringResource(key: "MonthFebruary", tableName: "Calendar", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Januar
			static let monthJanuary = Rswift.StringResource(key: "MonthJanuary", tableName: "Calendar", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Juli
			static let monthJuly = Rswift.StringResource(key: "MonthJuly", tableName: "Calendar", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Juni
			static let monthJune = Rswift.StringResource(key: "MonthJune", tableName: "Calendar", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Kalender
			static let title = Rswift.StringResource(key: "Title", tableName: "Calendar", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: MI
			static let weekNameWednesday = Rswift.StringResource(key: "WeekNameWednesday", tableName: "Calendar", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: MO
			static let weekNameMonday = Rswift.StringResource(key: "WeekNameMonday", tableName: "Calendar", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Mai
			static let monthMay = Rswift.StringResource(key: "MonthMay", tableName: "Calendar", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: März
			static let monthMarch = Rswift.StringResource(key: "MonthMarch", tableName: "Calendar", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: November
			static let monthNovember = Rswift.StringResource(key: "MonthNovember", tableName: "Calendar", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Oktober
			static let monthOctober = Rswift.StringResource(key: "MonthOctober", tableName: "Calendar", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: SA
			static let weekNameSaturday = Rswift.StringResource(key: "WeekNameSaturday", tableName: "Calendar", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: SO
			static let weekNameSunday = Rswift.StringResource(key: "WeekNameSunday", tableName: "Calendar", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: September
			static let monthSeptember = Rswift.StringResource(key: "MonthSeptember", tableName: "Calendar", bundle: R.hostingBundle, locales: [], comment: nil)

			/// Value: %02d
			static func dayNumberFormat(_ value1: Int) -> String {
				return String(format: NSLocalizedString("DayNumberFormat", tableName: "Calendar", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
			}

			/// Value: %@ %@
			static func monthTitleFormat(_ value1: String, _ value2: String) -> String {
				return String(format: NSLocalizedString("MonthTitleFormat", tableName: "Calendar", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
			}

			/// Value: April
			static func monthApril(_: Void = ()) -> String {
				return NSLocalizedString("MonthApril", tableName: "Calendar", bundle: R.hostingBundle, comment: "")
			}

			/// Value: August
			static func monthAugust(_: Void = ()) -> String {
				return NSLocalizedString("MonthAugust", tableName: "Calendar", bundle: R.hostingBundle, comment: "")
			}

			/// Value: DI
			static func weekNameTuesday(_: Void = ()) -> String {
				return NSLocalizedString("WeekNameTuesday", tableName: "Calendar", bundle: R.hostingBundle, comment: "")
			}

			/// Value: DO
			static func weekNameThursday(_: Void = ()) -> String {
				return NSLocalizedString("WeekNameThursday", tableName: "Calendar", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Dezember
			static func monthDecember(_: Void = ()) -> String {
				return NSLocalizedString("MonthDecember", tableName: "Calendar", bundle: R.hostingBundle, comment: "")
			}

			/// Value: FR
			static func weekNameFriday(_: Void = ()) -> String {
				return NSLocalizedString("WeekNameFriday", tableName: "Calendar", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Februar
			static func monthFebruary(_: Void = ()) -> String {
				return NSLocalizedString("MonthFebruary", tableName: "Calendar", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Januar
			static func monthJanuary(_: Void = ()) -> String {
				return NSLocalizedString("MonthJanuary", tableName: "Calendar", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Juli
			static func monthJuly(_: Void = ()) -> String {
				return NSLocalizedString("MonthJuly", tableName: "Calendar", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Juni
			static func monthJune(_: Void = ()) -> String {
				return NSLocalizedString("MonthJune", tableName: "Calendar", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Kalender
			static func title(_: Void = ()) -> String {
				return NSLocalizedString("Title", tableName: "Calendar", bundle: R.hostingBundle, comment: "")
			}

			/// Value: MI
			static func weekNameWednesday(_: Void = ()) -> String {
				return NSLocalizedString("WeekNameWednesday", tableName: "Calendar", bundle: R.hostingBundle, comment: "")
			}

			/// Value: MO
			static func weekNameMonday(_: Void = ()) -> String {
				return NSLocalizedString("WeekNameMonday", tableName: "Calendar", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Mai
			static func monthMay(_: Void = ()) -> String {
				return NSLocalizedString("MonthMay", tableName: "Calendar", bundle: R.hostingBundle, comment: "")
			}

			/// Value: März
			static func monthMarch(_: Void = ()) -> String {
				return NSLocalizedString("MonthMarch", tableName: "Calendar", bundle: R.hostingBundle, comment: "")
			}

			/// Value: November
			static func monthNovember(_: Void = ()) -> String {
				return NSLocalizedString("MonthNovember", tableName: "Calendar", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Oktober
			static func monthOctober(_: Void = ()) -> String {
				return NSLocalizedString("MonthOctober", tableName: "Calendar", bundle: R.hostingBundle, comment: "")
			}

			/// Value: SA
			static func weekNameSaturday(_: Void = ()) -> String {
				return NSLocalizedString("WeekNameSaturday", tableName: "Calendar", bundle: R.hostingBundle, comment: "")
			}

			/// Value: SO
			static func weekNameSunday(_: Void = ()) -> String {
				return NSLocalizedString("WeekNameSunday", tableName: "Calendar", bundle: R.hostingBundle, comment: "")
			}

			/// Value: September
			static func monthSeptember(_: Void = ()) -> String {
				return NSLocalizedString("MonthSeptember", tableName: "Calendar", bundle: R.hostingBundle, comment: "")
			}

			fileprivate init() {}
		}

		/// This `R.string.contactDetails` struct is generated, and contains static references to 28 localization keys.
		struct contactDetails {
			/// Value: Abbrechen
			static let phoneCallCancelButton = Rswift.StringResource(key: "PhoneCallCancelButton", tableName: "ContactDetails", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Anrufen
			static let phoneCallAlertTitle = Rswift.StringResource(key: "PhoneCallAlertTitle", tableName: "ContactDetails", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Die SMS Nummer konnte nicht an die SMS App übermittelt werden.
			static let smsFailureMessage = Rswift.StringResource(key: "SmsFailureMessage", tableName: "ContactDetails", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Die Telefonnummer konnte nicht gewählt werden.
			static let phoneFailureMessage = Rswift.StringResource(key: "PhoneFailureMessage", tableName: "ContactDetails", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Die angegebene Web-Adresse lässt sich leider nicht in eine gültige URL umwandeln.
			static let webFailureMessage = Rswift.StringResource(key: "WebFailureMessage", tableName: "ContactDetails", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: E-Mail
			static let emailCellTitle = Rswift.StringResource(key: "EmailCellTitle", tableName: "ContactDetails", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: EMail
			static let emailCellTitleSpeech = Rswift.StringResource(key: "EmailCellTitleSpeech", tableName: "ContactDetails", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Ja, anrufen
			static let phoneCallConfirmButton = Rswift.StringResource(key: "PhoneCallConfirmButton", tableName: "ContactDetails", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Kein Email-Konto
			static let emailFailureTitle = Rswift.StringResource(key: "EmailFailureTitle", tableName: "ContactDetails", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Keine Telefonnummer
			static let phoneFailureTitle = Rswift.StringResource(key: "PhoneFailureTitle", tableName: "ContactDetails", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Kontakte
			static let title = Rswift.StringResource(key: "Title", tableName: "ContactDetails", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Löschen
			static let deleteButtonTitle = Rswift.StringResource(key: "DeleteButtonTitle", tableName: "ContactDetails", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Mit diesem Gerät können derzeit leider keine Emails geschrieben werden. Stellen Sie bitte sicher, dass ein Email-Konto eingerichtet ist.
			static let emailFailureMessage = Rswift.StringResource(key: "EmailFailureMessage", tableName: "ContactDetails", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Mobil Nummer
			static let mobileCellTitleSpeech = Rswift.StringResource(key: "MobileCellTitleSpeech", tableName: "ContactDetails", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Mobil-Nr.
			static let mobileCellTitle = Rswift.StringResource(key: "MobileCellTitle", tableName: "ContactDetails", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Name
			static let nameCellTitle = Rswift.StringResource(key: "NameCellTitle", tableName: "ContactDetails", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Name
			static let nameCellTitleSpeech = Rswift.StringResource(key: "NameCellTitleSpeech", tableName: "ContactDetails", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: SMS nicht möglich
			static let smsFailureTitle = Rswift.StringResource(key: "SmsFailureTitle", tableName: "ContactDetails", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Stadt
			static let cityCellTitle = Rswift.StringResource(key: "CityCellTitle", tableName: "ContactDetails", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Stadt
			static let cityCellTitleSpeech = Rswift.StringResource(key: "CityCellTitleSpeech", tableName: "ContactDetails", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Straße
			static let streetCellTitle = Rswift.StringResource(key: "StreetCellTitle", tableName: "ContactDetails", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Straße
			static let streetCellTitleSpeech = Rswift.StringResource(key: "StreetCellTitleSpeech", tableName: "ContactDetails", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Tel.-Nr.
			static let phoneCellTitle = Rswift.StringResource(key: "PhoneCellTitle", tableName: "ContactDetails", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Telefon Nummer
			static let phoneCellTitleSpeech = Rswift.StringResource(key: "PhoneCellTitleSpeech", tableName: "ContactDetails", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Web-Adresse fehlerhaft
			static let webFailureTitle = Rswift.StringResource(key: "WebFailureTitle", tableName: "ContactDetails", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Webseite
			static let webCellTitle = Rswift.StringResource(key: "WebCellTitle", tableName: "ContactDetails", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Webseite
			static let webCellTitleSpeech = Rswift.StringResource(key: "WebCellTitleSpeech", tableName: "ContactDetails", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Wollen Sie wirklich die Nummer '%@' anrufen?
			static let phoneCallAlertMessage = Rswift.StringResource(key: "PhoneCallAlertMessage", tableName: "ContactDetails", bundle: R.hostingBundle, locales: [], comment: nil)

			/// Value: Abbrechen
			static func phoneCallCancelButton(_: Void = ()) -> String {
				return NSLocalizedString("PhoneCallCancelButton", tableName: "ContactDetails", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Anrufen
			static func phoneCallAlertTitle(_: Void = ()) -> String {
				return NSLocalizedString("PhoneCallAlertTitle", tableName: "ContactDetails", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Die SMS Nummer konnte nicht an die SMS App übermittelt werden.
			static func smsFailureMessage(_: Void = ()) -> String {
				return NSLocalizedString("SmsFailureMessage", tableName: "ContactDetails", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Die Telefonnummer konnte nicht gewählt werden.
			static func phoneFailureMessage(_: Void = ()) -> String {
				return NSLocalizedString("PhoneFailureMessage", tableName: "ContactDetails", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Die angegebene Web-Adresse lässt sich leider nicht in eine gültige URL umwandeln.
			static func webFailureMessage(_: Void = ()) -> String {
				return NSLocalizedString("WebFailureMessage", tableName: "ContactDetails", bundle: R.hostingBundle, comment: "")
			}

			/// Value: E-Mail
			static func emailCellTitle(_: Void = ()) -> String {
				return NSLocalizedString("EmailCellTitle", tableName: "ContactDetails", bundle: R.hostingBundle, comment: "")
			}

			/// Value: EMail
			static func emailCellTitleSpeech(_: Void = ()) -> String {
				return NSLocalizedString("EmailCellTitleSpeech", tableName: "ContactDetails", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Ja, anrufen
			static func phoneCallConfirmButton(_: Void = ()) -> String {
				return NSLocalizedString("PhoneCallConfirmButton", tableName: "ContactDetails", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Kein Email-Konto
			static func emailFailureTitle(_: Void = ()) -> String {
				return NSLocalizedString("EmailFailureTitle", tableName: "ContactDetails", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Keine Telefonnummer
			static func phoneFailureTitle(_: Void = ()) -> String {
				return NSLocalizedString("PhoneFailureTitle", tableName: "ContactDetails", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Kontakte
			static func title(_: Void = ()) -> String {
				return NSLocalizedString("Title", tableName: "ContactDetails", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Löschen
			static func deleteButtonTitle(_: Void = ()) -> String {
				return NSLocalizedString("DeleteButtonTitle", tableName: "ContactDetails", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Mit diesem Gerät können derzeit leider keine Emails geschrieben werden. Stellen Sie bitte sicher, dass ein Email-Konto eingerichtet ist.
			static func emailFailureMessage(_: Void = ()) -> String {
				return NSLocalizedString("EmailFailureMessage", tableName: "ContactDetails", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Mobil Nummer
			static func mobileCellTitleSpeech(_: Void = ()) -> String {
				return NSLocalizedString("MobileCellTitleSpeech", tableName: "ContactDetails", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Mobil-Nr.
			static func mobileCellTitle(_: Void = ()) -> String {
				return NSLocalizedString("MobileCellTitle", tableName: "ContactDetails", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Name
			static func nameCellTitle(_: Void = ()) -> String {
				return NSLocalizedString("NameCellTitle", tableName: "ContactDetails", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Name
			static func nameCellTitleSpeech(_: Void = ()) -> String {
				return NSLocalizedString("NameCellTitleSpeech", tableName: "ContactDetails", bundle: R.hostingBundle, comment: "")
			}

			/// Value: SMS nicht möglich
			static func smsFailureTitle(_: Void = ()) -> String {
				return NSLocalizedString("SmsFailureTitle", tableName: "ContactDetails", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Stadt
			static func cityCellTitle(_: Void = ()) -> String {
				return NSLocalizedString("CityCellTitle", tableName: "ContactDetails", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Stadt
			static func cityCellTitleSpeech(_: Void = ()) -> String {
				return NSLocalizedString("CityCellTitleSpeech", tableName: "ContactDetails", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Straße
			static func streetCellTitle(_: Void = ()) -> String {
				return NSLocalizedString("StreetCellTitle", tableName: "ContactDetails", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Straße
			static func streetCellTitleSpeech(_: Void = ()) -> String {
				return NSLocalizedString("StreetCellTitleSpeech", tableName: "ContactDetails", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Tel.-Nr.
			static func phoneCellTitle(_: Void = ()) -> String {
				return NSLocalizedString("PhoneCellTitle", tableName: "ContactDetails", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Telefon Nummer
			static func phoneCellTitleSpeech(_: Void = ()) -> String {
				return NSLocalizedString("PhoneCellTitleSpeech", tableName: "ContactDetails", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Web-Adresse fehlerhaft
			static func webFailureTitle(_: Void = ()) -> String {
				return NSLocalizedString("WebFailureTitle", tableName: "ContactDetails", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Webseite
			static func webCellTitle(_: Void = ()) -> String {
				return NSLocalizedString("WebCellTitle", tableName: "ContactDetails", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Webseite
			static func webCellTitleSpeech(_: Void = ()) -> String {
				return NSLocalizedString("WebCellTitleSpeech", tableName: "ContactDetails", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Wollen Sie wirklich die Nummer '%@' anrufen?
			static func phoneCallAlertMessage(_ value1: String) -> String {
				return String(format: NSLocalizedString("PhoneCallAlertMessage", tableName: "ContactDetails", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
			}

			fileprivate init() {}
		}

		/// This `R.string.contact` struct is generated, and contains static references to 3 localization keys.
		struct contact {
			/// Value: Kontakte
			static let title = Rswift.StringResource(key: "Title", tableName: "Contact", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Löschen
			static let deleteButtonTitle = Rswift.StringResource(key: "DeleteButtonTitle", tableName: "Contact", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Name
			static let unnamed = Rswift.StringResource(key: "Unnamed", tableName: "Contact", bundle: R.hostingBundle, locales: [], comment: nil)

			/// Value: Kontakte
			static func title(_: Void = ()) -> String {
				return NSLocalizedString("Title", tableName: "Contact", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Löschen
			static func deleteButtonTitle(_: Void = ()) -> String {
				return NSLocalizedString("DeleteButtonTitle", tableName: "Contact", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Name
			static func unnamed(_: Void = ()) -> String {
				return NSLocalizedString("Unnamed", tableName: "Contact", bundle: R.hostingBundle, comment: "")
			}

			fileprivate init() {}
		}

		/// This `R.string.diagnosis` struct is generated, and contains static references to 9 localization keys.
		struct diagnosis {
			/// Value: (AMD)
			static let subTitleAmd = Rswift.StringResource(key: "SubTitleAmd", tableName: "Diagnosis", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: (DMÖ)
			static let subTitleDmo = Rswift.StringResource(key: "SubTitleDmo", tableName: "Diagnosis", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: (RVV)
			static let subTitleRvv = Rswift.StringResource(key: "SubTitleRvv", tableName: "Diagnosis", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: (mCNV)
			static let subTitleMcnv = Rswift.StringResource(key: "SubTitleMcnv", tableName: "Diagnosis", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Altersabhängige Makuladegeneration
			static let cellTitleAmd = Rswift.StringResource(key: "CellTitleAmd", tableName: "Diagnosis", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Diabetisches Makulaödem
			static let cellTitleDmo = Rswift.StringResource(key: "CellTitleDmo", tableName: "Diagnosis", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Diagnose
			static let title = Rswift.StringResource(key: "Title", tableName: "Diagnosis", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Myope choroidale Neovaskularisation
			static let cellTitleMcnv = Rswift.StringResource(key: "CellTitleMcnv", tableName: "Diagnosis", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Retinaler Venenverschluss
			static let cellTitleRvv = Rswift.StringResource(key: "CellTitleRvv", tableName: "Diagnosis", bundle: R.hostingBundle, locales: [], comment: nil)

			/// Value: (AMD)
			static func subTitleAmd(_: Void = ()) -> String {
				return NSLocalizedString("SubTitleAmd", tableName: "Diagnosis", bundle: R.hostingBundle, comment: "")
			}

			/// Value: (DMÖ)
			static func subTitleDmo(_: Void = ()) -> String {
				return NSLocalizedString("SubTitleDmo", tableName: "Diagnosis", bundle: R.hostingBundle, comment: "")
			}

			/// Value: (RVV)
			static func subTitleRvv(_: Void = ()) -> String {
				return NSLocalizedString("SubTitleRvv", tableName: "Diagnosis", bundle: R.hostingBundle, comment: "")
			}

			/// Value: (mCNV)
			static func subTitleMcnv(_: Void = ()) -> String {
				return NSLocalizedString("SubTitleMcnv", tableName: "Diagnosis", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Altersabhängige Makuladegeneration
			static func cellTitleAmd(_: Void = ()) -> String {
				return NSLocalizedString("CellTitleAmd", tableName: "Diagnosis", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Diabetisches Makulaödem
			static func cellTitleDmo(_: Void = ()) -> String {
				return NSLocalizedString("CellTitleDmo", tableName: "Diagnosis", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Diagnose
			static func title(_: Void = ()) -> String {
				return NSLocalizedString("Title", tableName: "Diagnosis", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Myope choroidale Neovaskularisation
			static func cellTitleMcnv(_: Void = ()) -> String {
				return NSLocalizedString("CellTitleMcnv", tableName: "Diagnosis", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Retinaler Venenverschluss
			static func cellTitleRvv(_: Void = ()) -> String {
				return NSLocalizedString("CellTitleRvv", tableName: "Diagnosis", bundle: R.hostingBundle, comment: "")
			}

			fileprivate init() {}
		}

		/// This `R.string.disclaimer` struct is generated, and contains static references to 4 localization keys.
		struct disclaimer {
			/// Value: Bestätigen
			static let confirmButtonTitle = Rswift.StringResource(key: "ConfirmButtonTitle", tableName: "Disclaimer", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: DISCLAIMER
			static let title = Rswift.StringResource(key: "Title", tableName: "Disclaimer", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Ich stimme zu:
			static let checkboxTitle = Rswift.StringResource(key: "CheckboxTitle", tableName: "Disclaimer", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Sehr geehrter/e Nutzer/-in, wir freuen uns, dass Sie die Makula-App einsetzen wollen. Sie bietet Hilfestellung für Patienten mit Makula-Erkrankungen. Ziel ist es, den Patienten in der Organisation seiner Erkrankung und im Zugang zu Informationen zu unterstützen. Die Makula-App ist hersteller- und produkteunabhängig. Die Entwicklung und Weiterentwicklung erfolgt in enger Abstimmung mit Ärzten und Betroffenen. Die Nutzung der Makula-App ersetzt nicht den Arzt-Patienten-Kontakt. Bei der Nutzung werden keine Diagnosen erstellt oder individuelle therapeutische Maßnahmen empfohlen. Bevor Sie die App zum ersten Mal nutzen möchten wir Sie bitten, dem Haftungsausschuss zuzustimmen.
			static let description = Rswift.StringResource(key: "Description", tableName: "Disclaimer", bundle: R.hostingBundle, locales: [], comment: nil)

			/// Value: Bestätigen
			static func confirmButtonTitle(_: Void = ()) -> String {
				return NSLocalizedString("ConfirmButtonTitle", tableName: "Disclaimer", bundle: R.hostingBundle, comment: "")
			}

			/// Value: DISCLAIMER
			static func title(_: Void = ()) -> String {
				return NSLocalizedString("Title", tableName: "Disclaimer", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Ich stimme zu:
			static func checkboxTitle(_: Void = ()) -> String {
				return NSLocalizedString("CheckboxTitle", tableName: "Disclaimer", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Sehr geehrter/e Nutzer/-in, wir freuen uns, dass Sie die Makula-App einsetzen wollen. Sie bietet Hilfestellung für Patienten mit Makula-Erkrankungen. Ziel ist es, den Patienten in der Organisation seiner Erkrankung und im Zugang zu Informationen zu unterstützen. Die Makula-App ist hersteller- und produkteunabhängig. Die Entwicklung und Weiterentwicklung erfolgt in enger Abstimmung mit Ärzten und Betroffenen. Die Nutzung der Makula-App ersetzt nicht den Arzt-Patienten-Kontakt. Bei der Nutzung werden keine Diagnosen erstellt oder individuelle therapeutische Maßnahmen empfohlen. Bevor Sie die App zum ersten Mal nutzen möchten wir Sie bitten, dem Haftungsausschuss zuzustimmen.
			static func description(_: Void = ()) -> String {
				return NSLocalizedString("Description", tableName: "Disclaimer", bundle: R.hostingBundle, comment: "")
			}

			fileprivate init() {}
		}

		/// This `R.string.global` struct is generated, and contains static references to 47 localization keys.
		struct global {
			/// Value: %@ %@
			static let commonDateWithWeekdayFormat = Rswift.StringResource(key: "CommonDateWithWeekdayFormat", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: %@ dcml
			static let visusOutput = Rswift.StringResource(key: "VisusOutput", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: %@ µm
			static let nhdOutput = Rswift.StringResource(key: "NhdOutput", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: ,
			static let speechSplitConnector = Rswift.StringResource(key: "SpeechSplitConnector", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: --- µm
			static let nhdOutputNoValue = Rswift.StringResource(key: "NhdOutputNoValue", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: -.-- dcml
			static let visusOutputNoValue = Rswift.StringResource(key: "VisusOutputNoValue", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: A M D Netz e.V.
			static let contactAmdNetworkSpeech = Rswift.StringResource(key: "ContactAmdNetworkSpeech", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: AMD-Netz e.V.
			static let contactAmdNetwork = Rswift.StringResource(key: "ContactAmdNetwork", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Avastin®
			static let medicamentEntryAvastin = Rswift.StringResource(key: "MedicamentEntryAvastin", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Behandlung
			static let appointmentTreatment = Rswift.StringResource(key: "AppointmentTreatment", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Behandlung
			static let appointmentTreatmentSpeech = Rswift.StringResource(key: "AppointmentTreatmentSpeech", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Behandlung
			static let contactTreatment = Rswift.StringResource(key: "ContactTreatment", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Behandlung
			static let contactTreatmentSpeech = Rswift.StringResource(key: "ContactTreatmentSpeech", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Datenbank-Fehler
			static let databaseWriteErrorTitle = Rswift.StringResource(key: "DatabaseWriteErrorTitle", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Di
			static let commonDateWeekdayTu = Rswift.StringResource(key: "CommonDateWeekdayTu", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Do
			static let commonDateWeekdayTh = Rswift.StringResource(key: "CommonDateWeekdayTh", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Es ist ein Fehler beim Speichern in die Datenbank aufgetreten.
			static let databaseWriteErrorMessage = Rswift.StringResource(key: "DatabaseWriteErrorMessage", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Eylea®
			static let medicamentEntryEylea = Rswift.StringResource(key: "MedicamentEntryEylea", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Fr
			static let commonDateWeekdayFr = Rswift.StringResource(key: "CommonDateWeekdayFr", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: HH:mm
			static let commonTimeFormat = Rswift.StringResource(key: "CommonTimeFormat", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Iluvien®
			static let medicamentEntryIluvien = Rswift.StringResource(key: "MedicamentEntryIluvien", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Lucentis®
			static let medicamentEntryLucentis = Rswift.StringResource(key: "MedicamentEntryLucentis", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Mi
			static let commonDateWeekdayWe = Rswift.StringResource(key: "CommonDateWeekdayWe", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Mo
			static let commonDateWeekdayMo = Rswift.StringResource(key: "CommonDateWeekdayMo", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Nachsorge
			static let appointmentAftercare = Rswift.StringResource(key: "AppointmentAftercare", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Nachsorge
			static let appointmentAftercareSpeech = Rswift.StringResource(key: "AppointmentAftercareSpeech", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Nachsorge
			static let contactAftercare = Rswift.StringResource(key: "ContactAftercare", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Nachsorge
			static let contactAftercareSpeech = Rswift.StringResource(key: "ContactAftercareSpeech", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: O C T Kontrolle
			static let appointmentOctCheckSpeech = Rswift.StringResource(key: "AppointmentOctCheckSpeech", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: O C T Kontrolle
			static let contactOctCheckSpeech = Rswift.StringResource(key: "ContactOctCheckSpeech", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: OCT-Kontrolle
			static let appointmentOctCheck = Rswift.StringResource(key: "AppointmentOctCheck", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: OCT-Kontrolle
			static let contactOctCheck = Rswift.StringResource(key: "ContactOctCheck", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Ok
			static let databaseWriteErrorCancelButton = Rswift.StringResource(key: "DatabaseWriteErrorCancelButton", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Ok
			static let defaultErrorConfirmButton = Rswift.StringResource(key: "DefaultErrorConfirmButton", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Ozurdex®
			static let medicamentEntryOzurdex = Rswift.StringResource(key: "MedicamentEntryOzurdex", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Sa
			static let commonDateWeekdaySa = Rswift.StringResource(key: "CommonDateWeekdaySa", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: So
			static let commonDateWeekdaySu = Rswift.StringResource(key: "CommonDateWeekdaySu", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Sonstige
			static let appointmentOther = Rswift.StringResource(key: "AppointmentOther", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Sonstige
			static let appointmentOtherSpeech = Rswift.StringResource(key: "AppointmentOtherSpeech", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Termin um %@ Uhr
			static let localNotificationMessage = Rswift.StringResource(key: "LocalNotificationMessage", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: besser
			static let amslertestProgressBetter = Rswift.StringResource(key: "AmslertestProgressBetter", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: besser
			static let amslertestProgressBetterSpeech = Rswift.StringResource(key: "AmslertestProgressBetterSpeech", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: dd.MM.yy
			static let commonDateFormat = Rswift.StringResource(key: "CommonDateFormat", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: gleich
			static let amslertestProgressEqual = Rswift.StringResource(key: "AmslertestProgressEqual", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: gleich
			static let amslertestProgressEqualSpeech = Rswift.StringResource(key: "AmslertestProgressEqualSpeech", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: schlechter
			static let amslertestProgressWorse = Rswift.StringResource(key: "AmslertestProgressWorse", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: schlechter
			static let amslertestProgressWorseSpeech = Rswift.StringResource(key: "AmslertestProgressWorseSpeech", tableName: "Global", bundle: R.hostingBundle, locales: [], comment: nil)

			/// Value: %@ %@
			static func commonDateWithWeekdayFormat(_ value1: String, _ value2: String) -> String {
				return String(format: NSLocalizedString("CommonDateWithWeekdayFormat", tableName: "Global", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
			}

			/// Value: %@ dcml
			static func visusOutput(_ value1: String) -> String {
				return String(format: NSLocalizedString("VisusOutput", tableName: "Global", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
			}

			/// Value: %@ µm
			static func nhdOutput(_ value1: String) -> String {
				return String(format: NSLocalizedString("NhdOutput", tableName: "Global", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
			}

			/// Value: ,
			static func speechSplitConnector(_: Void = ()) -> String {
				return NSLocalizedString("SpeechSplitConnector", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: --- µm
			static func nhdOutputNoValue(_: Void = ()) -> String {
				return NSLocalizedString("NhdOutputNoValue", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: -.-- dcml
			static func visusOutputNoValue(_: Void = ()) -> String {
				return NSLocalizedString("VisusOutputNoValue", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: A M D Netz e.V.
			static func contactAmdNetworkSpeech(_: Void = ()) -> String {
				return NSLocalizedString("ContactAmdNetworkSpeech", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: AMD-Netz e.V.
			static func contactAmdNetwork(_: Void = ()) -> String {
				return NSLocalizedString("ContactAmdNetwork", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Avastin®
			static func medicamentEntryAvastin(_: Void = ()) -> String {
				return NSLocalizedString("MedicamentEntryAvastin", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Behandlung
			static func appointmentTreatment(_: Void = ()) -> String {
				return NSLocalizedString("AppointmentTreatment", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Behandlung
			static func appointmentTreatmentSpeech(_: Void = ()) -> String {
				return NSLocalizedString("AppointmentTreatmentSpeech", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Behandlung
			static func contactTreatment(_: Void = ()) -> String {
				return NSLocalizedString("ContactTreatment", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Behandlung
			static func contactTreatmentSpeech(_: Void = ()) -> String {
				return NSLocalizedString("ContactTreatmentSpeech", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Datenbank-Fehler
			static func databaseWriteErrorTitle(_: Void = ()) -> String {
				return NSLocalizedString("DatabaseWriteErrorTitle", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Di
			static func commonDateWeekdayTu(_: Void = ()) -> String {
				return NSLocalizedString("CommonDateWeekdayTu", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Do
			static func commonDateWeekdayTh(_: Void = ()) -> String {
				return NSLocalizedString("CommonDateWeekdayTh", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Es ist ein Fehler beim Speichern in die Datenbank aufgetreten.
			static func databaseWriteErrorMessage(_: Void = ()) -> String {
				return NSLocalizedString("DatabaseWriteErrorMessage", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Eylea®
			static func medicamentEntryEylea(_: Void = ()) -> String {
				return NSLocalizedString("MedicamentEntryEylea", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Fr
			static func commonDateWeekdayFr(_: Void = ()) -> String {
				return NSLocalizedString("CommonDateWeekdayFr", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: HH:mm
			static func commonTimeFormat(_: Void = ()) -> String {
				return NSLocalizedString("CommonTimeFormat", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Iluvien®
			static func medicamentEntryIluvien(_: Void = ()) -> String {
				return NSLocalizedString("MedicamentEntryIluvien", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Lucentis®
			static func medicamentEntryLucentis(_: Void = ()) -> String {
				return NSLocalizedString("MedicamentEntryLucentis", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Mi
			static func commonDateWeekdayWe(_: Void = ()) -> String {
				return NSLocalizedString("CommonDateWeekdayWe", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Mo
			static func commonDateWeekdayMo(_: Void = ()) -> String {
				return NSLocalizedString("CommonDateWeekdayMo", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Nachsorge
			static func appointmentAftercare(_: Void = ()) -> String {
				return NSLocalizedString("AppointmentAftercare", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Nachsorge
			static func appointmentAftercareSpeech(_: Void = ()) -> String {
				return NSLocalizedString("AppointmentAftercareSpeech", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Nachsorge
			static func contactAftercare(_: Void = ()) -> String {
				return NSLocalizedString("ContactAftercare", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Nachsorge
			static func contactAftercareSpeech(_: Void = ()) -> String {
				return NSLocalizedString("ContactAftercareSpeech", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: O C T Kontrolle
			static func appointmentOctCheckSpeech(_: Void = ()) -> String {
				return NSLocalizedString("AppointmentOctCheckSpeech", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: O C T Kontrolle
			static func contactOctCheckSpeech(_: Void = ()) -> String {
				return NSLocalizedString("ContactOctCheckSpeech", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: OCT-Kontrolle
			static func appointmentOctCheck(_: Void = ()) -> String {
				return NSLocalizedString("AppointmentOctCheck", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: OCT-Kontrolle
			static func contactOctCheck(_: Void = ()) -> String {
				return NSLocalizedString("ContactOctCheck", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Ok
			static func databaseWriteErrorCancelButton(_: Void = ()) -> String {
				return NSLocalizedString("DatabaseWriteErrorCancelButton", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Ok
			static func defaultErrorConfirmButton(_: Void = ()) -> String {
				return NSLocalizedString("DefaultErrorConfirmButton", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Ozurdex®
			static func medicamentEntryOzurdex(_: Void = ()) -> String {
				return NSLocalizedString("MedicamentEntryOzurdex", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Sa
			static func commonDateWeekdaySa(_: Void = ()) -> String {
				return NSLocalizedString("CommonDateWeekdaySa", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: So
			static func commonDateWeekdaySu(_: Void = ()) -> String {
				return NSLocalizedString("CommonDateWeekdaySu", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Sonstige
			static func appointmentOther(_: Void = ()) -> String {
				return NSLocalizedString("AppointmentOther", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Sonstige
			static func appointmentOtherSpeech(_: Void = ()) -> String {
				return NSLocalizedString("AppointmentOtherSpeech", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Termin um %@ Uhr
			static func localNotificationMessage(_ value1: String) -> String {
				return String(format: NSLocalizedString("LocalNotificationMessage", tableName: "Global", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
			}

			/// Value: besser
			static func amslertestProgressBetter(_: Void = ()) -> String {
				return NSLocalizedString("AmslertestProgressBetter", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: besser
			static func amslertestProgressBetterSpeech(_: Void = ()) -> String {
				return NSLocalizedString("AmslertestProgressBetterSpeech", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: dd.MM.yy
			static func commonDateFormat(_: Void = ()) -> String {
				return NSLocalizedString("CommonDateFormat", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: gleich
			static func amslertestProgressEqual(_: Void = ()) -> String {
				return NSLocalizedString("AmslertestProgressEqual", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: gleich
			static func amslertestProgressEqualSpeech(_: Void = ()) -> String {
				return NSLocalizedString("AmslertestProgressEqualSpeech", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: schlechter
			static func amslertestProgressWorse(_: Void = ()) -> String {
				return NSLocalizedString("AmslertestProgressWorse", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			/// Value: schlechter
			static func amslertestProgressWorseSpeech(_: Void = ()) -> String {
				return NSLocalizedString("AmslertestProgressWorseSpeech", tableName: "Global", bundle: R.hostingBundle, comment: "")
			}

			fileprivate init() {}
		}

		/// This `R.string.graph` struct is generated, and contains static references to 8 localization keys.
		struct graph {
			/// Value: %02d
			static let graphMonthNumberFormat = Rswift.StringResource(key: "GraphMonthNumberFormat", tableName: "Graph", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: %@.%@
			static let graphXAxisLabelFormat = Rswift.StringResource(key: "GraphXAxisLabelFormat", tableName: "Graph", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: IVOM
			static let ivomDateCellTitle = Rswift.StringResource(key: "IvomDateCellTitle", tableName: "Graph", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: NH-Dicke (µm)
			static let graphTitleLeft = Rswift.StringResource(key: "GraphTitleLeft", tableName: "Graph", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: NH-Dicke/Visus
			static let title = Rswift.StringResource(key: "Title", tableName: "Graph", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Visus (dcml)
			static let graphTitleRight = Rswift.StringResource(key: "GraphTitleRight", tableName: "Graph", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: links
			static let headerCellLeftEye = Rswift.StringResource(key: "HeaderCellLeftEye", tableName: "Graph", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: rechts
			static let headerCellRightEye = Rswift.StringResource(key: "HeaderCellRightEye", tableName: "Graph", bundle: R.hostingBundle, locales: [], comment: nil)

			/// Value: %02d
			static func graphMonthNumberFormat(_ value1: Int) -> String {
				return String(format: NSLocalizedString("GraphMonthNumberFormat", tableName: "Graph", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
			}

			/// Value: %@.%@
			static func graphXAxisLabelFormat(_ value1: String, _ value2: String) -> String {
				return String(format: NSLocalizedString("GraphXAxisLabelFormat", tableName: "Graph", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
			}

			/// Value: IVOM
			static func ivomDateCellTitle(_: Void = ()) -> String {
				return NSLocalizedString("IvomDateCellTitle", tableName: "Graph", bundle: R.hostingBundle, comment: "")
			}

			/// Value: NH-Dicke (µm)
			static func graphTitleLeft(_: Void = ()) -> String {
				return NSLocalizedString("GraphTitleLeft", tableName: "Graph", bundle: R.hostingBundle, comment: "")
			}

			/// Value: NH-Dicke/Visus
			static func title(_: Void = ()) -> String {
				return NSLocalizedString("Title", tableName: "Graph", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Visus (dcml)
			static func graphTitleRight(_: Void = ()) -> String {
				return NSLocalizedString("GraphTitleRight", tableName: "Graph", bundle: R.hostingBundle, comment: "")
			}

			/// Value: links
			static func headerCellLeftEye(_: Void = ()) -> String {
				return NSLocalizedString("HeaderCellLeftEye", tableName: "Graph", bundle: R.hostingBundle, comment: "")
			}

			/// Value: rechts
			static func headerCellRightEye(_: Void = ()) -> String {
				return NSLocalizedString("HeaderCellRightEye", tableName: "Graph", bundle: R.hostingBundle, comment: "")
			}

			fileprivate init() {}
		}

		/// This `R.string.info` struct is generated, and contains static references to 175 localization keys.
		struct info {
			/// Value: (Ophthalmoskopie / Funduskopie) Die wichtigste Methode zur Untersuchung der Netzhautstruktur ist die Untersuchung des Augenhintergrundes (Netzhautuntersuchung, Ophthalmoskopie). Diese erfolgt bei makulären Erkrankungen meist an der Spaltlampe mit Hilfe spezieller Lupen oder bei der Beurteilung der Netzhautperipherie mit einer Lampe und Lupe aus circa 60 Zentimetern Entfernung.
			static let examinationInfo0Instruction = Rswift.StringResource(key: "ExaminationInfo0Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: (Ophthalmoskopie / Funduskopie) Die wichtigste Methode zur Untersuchung der Netzhautstruktur ist die Untersuchung des Augenhintergrundes (Netzhautuntersuchung, Ophthalmoskopie). Diese erfolgt bei makulären Erkrankungen meist an der Spaltlampe mit Hilfe spezieller Lupen oder bei der Beurteilung der Netzhautperipherie mit einer Lampe und Lupe aus circa 60 Zentimetern Entfernung.
			static let examinationInfo0SpeechText = Rswift.StringResource(key: "ExaminationInfo0SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: (der Netzhaut) Mit einer Funduskamera ist es möglich, Netzhaut und Makula zu fotografieren, den aktuellen Befund zu dokumentieren und so eine Verlaufskontrolle zu ermöglichen.
			static let examinationInfo2Instruction = Rswift.StringResource(key: "ExaminationInfo2Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: (der Netzhaut) Mit einer Funduskamera ist es möglich, Netzhaut und Makula zu fotografieren, den aktuellen Befund zu dokumentieren und so eine Verlaufskontrolle zu ermöglichen.
			static let examinationInfo2SpeechText = Rswift.StringResource(key: "ExaminationInfo2SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: <h2>Altersabhängige Makuladegeneration</h2> Die AMD ist eine Erkrankung der Makula, dem Punkt des schärfsten Sehens der zentralen Netzhaut im hinteren Auge. Sie tritt vorwiegend bei Menschen ab einem Lebensalter von 55 Jahren auf. Neben dem Haupt-Risikofaktor Lebensalter kann für eine AMD eine erbliche Vorbelastung bestehen. Das individuelle Risiko an einer AMD zu erkranken steigt je mehr Risikofaktoren vorliegen. In Deutschland geht man aktuell von etwa 4,5 Millionen Betroffenen aus. Frühe und mittlere Stadien sind meist mit nur geringen Symptomen assoziiert, während es bei Spätstadien oft zu einem erheblichen Verlust an Sehschärfe und zentralem Gesichtsfeld kommt. Die Erkrankung kann an beiden Augen eines Patienten unterschiedlich verlaufen. Eine späte AMD kann als eine sogenannte „feuchte“ (neovaskuläre AMD, nAMD) und eine sogenannte „trockene“ Form (Geografische Atrophie, GA) auftreten, in manchen Fällen auch als eine Kombination aus beidem. Eine späte AMD hat eine erhebliche Minderung des zentralen Sehvermögens in der Ferne und beim Lesen zur Folge: Betroffene verlieren die Fähigkeit, scharf zu sehen. Es gibt bislang keine spezifische Therapie der frühen und mittleren AMD, die ein Voranschreiten verlangsamt, aufhält oder zu einer Heilung der Erkrankung in diesem Stadium führt. Auch für die trockene Spätform existiert bislang keine zugelassene, wirksame Therapie zur Verlangsamung des Fortschreitens der Erkrankung. Bei Patienten mit „trockenen“ Frühformen ist unter bestimmten Voraussetzungen die Einnahme von entsprechend dosierten Nahrungsergänzungsmitteln sinnvoll. Im Gegensatz zu den trockenen Formen lässt sich die feuchte Form mit Medikamenten wirksam behandeln. Verschiedene Wirkstoffe, die unter OP-Bedingungen schmerzfrei direkt ins Auge gespritzt werden, können helfen, die Sehkraft zumindest vorübergehend zu verbessern oder länger zu erhalten.
			static let amdInstruction = Rswift.StringResource(key: "AmdInstruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: <h2>Altersabhängige Makuladegeneration</h2> Die AMD ist eine Erkrankung der Makula, dem Punkt des schärfsten Sehens der zentralen Netzhaut im hinteren Auge. Sie tritt vorwiegend bei Menschen ab einem Lebensalter von 55 Jahren auf. Neben dem Haupt-Risikofaktor Lebensalter kann für eine AMD eine erbliche Vorbelastung bestehen. Das individuelle Risiko an einer AMD zu erkranken steigt je mehr Risikofaktoren vorliegen. In Deutschland geht man aktuell von etwa 4,5 Millionen Betroffenen aus. Frühe und mittlere Stadien sind meist mit nur geringen Symptomen assoziiert, während es bei Spätstadien oft zu einem erheblichen Verlust an Sehschärfe und zentralem Gesichtsfeld kommt. Die Erkrankung kann an beiden Augen eines Patienten unterschiedlich verlaufen. Eine späte AMD kann als eine sogenannte „feuchte“ (neovaskuläre AMD, nAMD) und eine sogenannte „trockene“ Form (Geografische Atrophie, GA) auftreten, in manchen Fällen auch als eine Kombination aus beidem. Eine späte AMD hat eine erhebliche Minderung des zentralen Sehvermögens in der Ferne und beim Lesen zur Folge: Betroffene verlieren die Fähigkeit, scharf zu sehen. Es gibt bislang keine spezifische Therapie der frühen und mittleren AMD, die ein Voranschreiten verlangsamt, aufhält oder zu einer Heilung der Erkrankung in diesem Stadium führt. Auch für die trockene Spätform existiert bislang keine zugelassene, wirksame Therapie zur Verlangsamung des Fortschreitens der Erkrankung. Bei Patienten mit „trockenen“ Frühformen ist unter bestimmten Voraussetzungen die Einnahme von entsprechend dosierten Nahrungsergänzungsmitteln sinnvoll. Im Gegensatz zu den trockenen Formen lässt sich die feuchte Form mit Medikamenten wirksam behandeln. Verschiedene Wirkstoffe, die unter OP-Bedingungen schmerzfrei direkt ins Auge gespritzt werden, können helfen, die Sehkraft zumindest vorübergehend zu verbessern oder länger zu erhalten.  <h2>Diabetisches Makulaödem</h2> In Deutschland leben circa 8 Millionen Menschen mit Diabetes mellitus. Die chronische Stoffwechselerkrankung wirkt sich auch auf das Auge aus. Zu hohe Blutzuckerwerte schädigen auf Dauer die feinen Netzhautgefäße. Bei schlechter Einstellung erkrankt jeder fünfte Diabetiker an diabetischer Retinopathie. Aus dieser kann sich ein Diabetisches Makulaödem (DMÖ) entwickeln. 40 Prozent aller Typ-1-Diabetiker und 20 Prozent der Typ-2- Diabetiker sind von DMÖ betroffen. Im Frühstadium verläuft das diabetische Makulaödem unbemerkt. Sehbeein¬trächti-gungen treten meist erst dann auf, wenn die Netzhautschäden schon weit fortge-schritten und damit schlechter zu behandeln sind. im fortgeschrittenen Stadium kommt es zum Sehverlust auch durch Einblutungen in den Glaskörper des Auges oder durch Narbenbildung mit Netzhautablösung. Therapeutisch kommen bei einem DMÖ Injektionen mit VEGF-Hemmern oder Cortison-Präparaten sowie Laserverfahren zum Einsatz. Sollten Sie an Diabetes erkrankt sein, sind regelmäßige und frühzeitige Unter¬suchun-gen beim Augenarzt als Vorsorgemaßnahmen, die eine rechtzeitige Diagnose und eventuelle Therapie ermöglichen, wichtig für die Augengesundheit.  <h2>Retinaler Venenverschluss</h2> Bei einem Retinalen Venenverschluss (RVV) kann das Blut aufgrund einer Netzhautvenenerkrankung nicht mehr ungehindert abfließen. Retinale Venenverschlüsse (RVV) entstehen durch verschiedene Risikofaktoren: Ein Blutgerinnsel, das sich in einer Stelle der Vene festsetzt oder durch Bluthochdruck mit und ohne Arteriosklerose veränderte Arterien, die benachbarte Venen komprimieren. Dadurch steigt der Druck in den Augenvenen. Es können Netzhautblutungen, Ödeme, Gefäßwucherungen oder sogar Netzhautablösungen entstehen. Retinale Venenverschlüsse führen zu Einbußen der Sehschärfe. Patienten sehen verschwommen oder auch einen „grauen Vorhang“. Je schneller die Therapie erfolgt, desto höher liegen die Behandlungschancen. Injektionen mit einem VEGF-Hemmer in den Glaskörper sind wirksam. Daneben werden Injektionen von Kortisonimplantaten oder Laserbehandlungen eingesetzt sowie durch kontrollierte Blutverdünnung (Hämodilution) die Fließfähigkeiten des Blutes gefördert.  <h2>Myope choroidale Neovaskularisation</h2> In Europa ist die durch Myopie (Kurzsichtigkeit) entstehende choroidale Neovaskularisation (CNV) die siebthäufigste Erblindungsursache. Es sind vor allem junge, noch berufstätige Patienten betroffen. In der jüngeren Erwachsenenbevölkerung ist die Myopie die häufigste Ursache einer CNV. Eine sehr hohe (pathologische) Myopie kann sich zu einer myopiebedingten choriodalen Neovaskularisation (myopische CNV) entwickeln. Aus neuen, krankhaften Blutgefäßen in der Choroidea kann Flüssigkeit austreten und ein lokales Ödem verursachen. Dies führt in der Makula zu verschwommener Sicht, Metamorphopsien und blinden oder grauen Flecken im Zentrum des Sichtfeldes bis hin zum Sehverlust. Als Behandlungen können eingesetzt werden - die intravitreale-VEGF-Hemmer-Therapie, - eher selten eine Hochenergielaserkoagulation - oder eine Kombination aus einem Medikament, das krankhafte Gefäße der Aderhaut lichtempfindlich macht ( (Photosensibilisierung), und einem niedrig-energetischen Laserlicht (photodynamische Therapie).
			static let diagnoseInstruction = Rswift.StringResource(key: "DiagnoseInstruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: <h2>Amsler-Test</h2> Der Amsler-Test wird zum frühzeitigen Erkennen von subjektiver Sehstörung mit verzerrter Wahrnehmung der Umwelt, sogenannten Metamorphopsien, eingesetzt. Er eignet sich zur Selbstkontrolle. Mit dem Amslergitter (auch Amsler-Netz genannt) können Augen auf ihre Funktionalität und Gesichtsfeldausfälle getestet werden. Decken Sie ein Auge ab und fixieren Sie mit dem anderen den Punkt in der Mitte. Halten Sie dabei einen normalen Leseabstand von 30-40 cm ein. Wenn Sie eine Lesebrille tragen, setzen Sie diese auch zum Test auf. Anschließend testen Sie das andere Auge, ebenfalls unter Abdeckung des Partnerauges. Erkennen Sie den Punkt in der Mitte nicht, sehen Sie verschwommene Stellen, Löcher, Schleier, unterschiedlich große Kästchen oder gebogene Linien, suchen Sie Ihren Arzt auf. In dieser App finden Sie auch einen Amsler-Test. Sie können damit verfolgen, ob sich Änderungen ergeben haben. Wenn ja, teilen Sie dies Ihrem Arzt mit. Empfehlung: Führen Sie den Test regelmäßig im Abstand von 1-2 Wochen oder bei dem Gefühl der Sehverschlechterung unmittelbar durch.
			static let amslertestInstruction = Rswift.StringResource(key: "AmslertestInstruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: <h2>Diabetisches Makulaödem</h2> In Deutschland leben circa 8 Millionen Menschen mit Diabetes mellitus. Die chronische Stoffwechselerkrankung wirkt sich auch auf das Auge aus. Zu hohe Blutzuckerwerte schädigen auf Dauer die feinen Netzhautgefäße. Bei schlechter Einstellung erkrankt jeder fünfte Diabetiker an diabetischer Retinopathie. Aus dieser kann sich ein Diabetisches Makulaödem (DMÖ) entwickeln. 40 Prozent aller Typ-1-Diabetiker und 20 Prozent der Typ-2- Diabetiker sind von DMÖ betroffen. Im Frühstadium verläuft das diabetische Makulaödem unbemerkt. Sehbeeinträchtigungen treten meist erst dann auf, wenn die Netzhautschäden schon weit fortgeschritten und damit schlechter zu behandeln sind. Im fortgeschrittenen Stadium kommt es zum Sehverlust auch durch Einblutungen in den Glaskörper des Auges oder durch Narbenbildung mit Netzhautablösung. Therapeutisch kommen bei einem DMÖ Injektionen mit VEGF-Hemmern oder Cortison-Präparaten sowie Laserverfahren zum Einsatz. Sollten Sie an Diabetes erkrankt sein, sind regelmäßige und frühzeitige Untersuchungen beim Augenarzt als Vorsorgemaßnahmen, die eine rechtzeitige Diagnose und eventuelle Therapie ermöglichen, wichtig für die Augengesundheit.
			static let dmoInstruction = Rswift.StringResource(key: "DmoInstruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: <h2>Disclaimer und Hauptmenü</h2> Wenn Sie die Makula App zum ersten Mal starten, werden Sie gebeten dem Disclaimer zuzustimmen. Tippen Sie dazu auf „Bestätigt“. Ohne diese Bestätigung können Sie die App nicht nutzen. Nachdem Sie Ihre Zustimmung bestätigt haben, erscheint die Startseite. Hier gibt es acht Menüpunkte. Bei den ersten 5 Menüpunkten sehen Sie eine hellblaue Schrift auf einem dunklen Hintergrund. Dieser Teil ist Ihr „Digitaler Assistent”. Bei den unteren drei Menüpunkten haben wir eine dunkelfarbige Schrift auf einem hellen Hintergrund; dies ist der Teil „Informiert sein“.Unter den einzelnen Menüpunkten verbergen sich folgende Funktionen:  <h2>Digitaler Assistent</h2> ARZTBESUCH: •  Datum des Termins  (=Injektion), Nachsorge, OCT-Kontrolle, Sonstige) •  Diagnose: diese ändert sich in der Regel nicht und muss daher nur beim ersten Besuch angegeben werden •  Medikamente: in der Regel wird immer dasselbe Medikament bei einer Injektion verabreicht. Es kann medizinische Gründe geben, die den Wechsel auf ein anderes Präparat bedingen. Dann sollten Sie das hier dokumentieren. Sie können zusätzlich die Notizfunktion des Termins nutzen •  Visus-Eingabe: Sie erhalten den Visus von Ihrem Augenarzt. Bitte geben Sie diesen getrennt für jedes Auge ein. •  NH-Dicke-Eingabe: NH steht für Netzhautdicke und ist ein Indikator für Ihre Erkrankung. Dieser Wert wird in einer OCT-Untersuchung ermittelt und Sie erfahren ihn von Ihrem Augenarzt. •  OCT und Visus rechts und links: Hier sehen Sie im zeitlichen Verlauf Ihre Werte im Diagramm für das rechte und das linke Auge. TERMINE Hier können Sie Ihre nächsten Termine beim Augenarzt verwalten. Zur Übersicht werden die Termine nach Art farblich unterschieden. Sie haben die Möglichkeit, zusätzliche Notizen zum Termin hinzuzufügen. Die Termine finden sich im internen App-Kalender KALENDER Hier sehen Sie alle Termine der Zukunft und Vergangenheit in der Übersicht. Über das „+“-Symbol können Sie ebenfalls neue Termine hinzufügen analog zum Menüpunkt Termine des Hauptmenüs. Zudem enthalten die Termine alle Ergebnisse des Arztbesuches noch einmal hinterlegt sowie die Ergebnisse der Selbsttests an den Tagen der Durchführung. So können Sie nachvollziehen, wie die Entwicklung Ihrer Sehfähigkeit der letzten zwei Jahre war. Auch kann bei einem Wechsel des Augenarztes die vergangene Behandlung sehr gut dokumentiert vorgelegt werden. KONTAKTE Hier haben Sie die Möglichkeit, Ihre Ansprechpartner zu hinterlegen und direkt zu kontaktieren. Dazu zählen neben Ihren Augenarzt auch Kliniken für Injektionen, Beratungsstellen, Hausarzt und weitere. SELBSTTESTS Unter Selbsttests finden Sie zum einen das Amslergitter sowie einen Lesetest. Diese helfen Ihnen, Ihre Sehfähigkeit selbstständig regelmäßig zu kontrollieren. Die Ergebnisse werden lokal im App-Kalender hinterlegt.  <h2>Informiert sein</h2> WISSEN / INFORMATION Im Bereich „Wissen / Information“ können Sie sich über alle Aspekte Ihrer Erkrankung informieren. Zusätzlich gibt es einen Überblick über Hilfsmittel und Sehhilfen sowie praktische Tipps. Für weiterführende Informationen wird in den einzelnen Themen direkt auf die Website des AMD-Netz verlinkt. Die Wissensbereiche sind dann wiederum in die einzelnen Themen untergliedert und mit kurzen Informationen angereichert. Für weitere Informationen gibt es unter den einzelnen Themen Links zur Website des AMD-Netz. ADRESVERZEICHNIS Im Adressverzeichnis finden Sie Adressen von verschiedenen Ansprechpartnern in Ihrer Nähe. Diese Funktion ist nur im Online-modus nutzbar, da aktuelle Informationen direkt abgerufen werden. WEITERE HINWEISE Sie können die Schrift innerhalb der App vergrößern, indem Sie das Smartphone um 90° von der vertikalen in die horizontale Ansicht drehen. Außerdem können Sie sich den Text vorlesen lassen, wenn Sie auf das Lautsprecher Symbol oben rechts tippen. Die Menüpunkte werden nacheinander aufleuchten und vorgelesen.
			static let manualInstruction = Rswift.StringResource(key: "ManualInstruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: <h2>Lesetest</h2> Dieser Lesetest dient der Selbstkontrolle. Er ist individuell und auf Ihrem Smartphone aussagekräftig. Halten Sie bitte Ihr Endgerät bei jeder Nutzung in der gleichen Position und in einem vergleichbaren Leseabstand von 30-40 cm. Sie können hier verfolgen, ob sich bei Ihnen Änderungen ergeben haben. Halten Sie jeweils ein Auge zu und testen Sie beide Seiten einzeln. Sie können das Ergebnis für beide Augen getrennt markieren. Wenn sich Änderungen ergeben haben, teilen Sie dies Ihrem Arzt mit. Empfehlung: Führen Sie den Lese-Test regelmäßig im Abstand von 2 Wochen, bei Verschlechterung unmittelbar durch.
			static let readingtestInstruction = Rswift.StringResource(key: "ReadingtestInstruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: <h2>Myope choroidale Neovaskularisation</h2> In Europa ist die durch Myopie (Kurzsichtigkeit) entstehende choroidale Neovaskularisation (CNV) die siebthäufigste Erblindungsursache. Es sind vor allem junge, noch berufstätige Patienten betroffen. In der jüngeren Erwachsenenbevölkerung ist die Myopie die häufigste Ursache einer CNV. Eine sehr hohe (pathologische) Myopie kann sich zu einer myopiebedingten choriodalen Neovaskularisation (myopische CNV) entwickeln. Aus neuen, krankhaften Blutgefäßen in der Choroidea kann Flüssigkeit austreten und ein lokales Ödem verursachen. Dies führt in der Makula zu verschwommener Sicht, Metamorphopsien und blinden oder grauen Flecken im Zentrum des Sichtfeldes bis hin zum Sehverlust. Als Behandlungen können eingesetzt werden - die intravitreale-VEGF-Hemmer-Therapie, - eher selten eine Hochenergielaserkoagulation - oder eine Kombination aus einem Medikament, das krankhafte Gefäße der Aderhaut lichtempfindlich macht (Photosensibilisierung), und einem niedrig-energetischen Laserlicht (photodynamische Therapie).
			static let mcnvInstruction = Rswift.StringResource(key: "McnvInstruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: <h2>NHD</h2> Viele Augenerkrankungen wirken sich durch eine Veränderung der Netzhautdicke aus. Deswegen ist für die Diagnose sehr wichtig, Wert und Veränderungen der Netzhautdicke durch die optische Cohärenz-Tomographie (OCT) zu messen. Bitte erfragen Sie den Wert in Ihrer Praxis.
			static let nhdInstruction = Rswift.StringResource(key: "NhdInstruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: <h2>Retinaler Venenverschluss</h2> Bei einem Retinalen Venenverschluss (RVV) kann das Blut aufgrund einer Netzhautvenenerkrankung nicht mehr ungehindert abfließen. Retinale Venenverschlüsse (RVV) entstehen durch verschiedene Risikofaktoren: Ein Blutgerinnsel, das sich in einer Stelle der Vene festsetzt oder durch Bluthochdruck mit und ohne Arteriosklerose veränderte Arterien, die benachbarte Venen komprimieren. Dadurch steigt der Druck in den Augenvenen. Es können Netzhautblutungen, Ödeme, Gefäßwucherungen oder sogar Netzhautablösungen entstehen. Retinale Venenverschlüsse führen zu Einbußen der Sehschärfe. Patienten sehen verschwommen oder auch einen „grauen Vorhang“. Je schneller die Therapie erfolgt, desto höher liegen die Behandlungschancen. Injektionen mit einem VEGF-Hemmer in den Glaskörper sind wirksam. Daneben werden Injektionen von Kortisonimplantaten oder Laserbehandlungen eingesetzt sowie durch kontrollierte Blutverdünnung (Hämodilution) die Fließfähigkeiten des Blutes gefördert.
			static let rvvInstruction = Rswift.StringResource(key: "RvvInstruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: <h2>Visus</h2> Unter der Sehschärfe bzw. dem Visus versteht man das Potenzial des Auges diverse Umweltstrukturen wahrzunehmen und zu erkennen. Die Sehschärfe ist eine messbare Größe, die in der Diagnostik eine Rolle spielt. Zur Bestimmung des Visus werden beim Augenarzt oder Optiker Sehzeichen projiziert oder Schrifttafeln gezeigt mit Zahlen, Buchstaben oder abstrakten Zeichen (z.B. E-Haken oder Landolt-Ringe). Bitte erfragen Sie den Wert in Ihrer Praxis.
			static let visusInstruction = Rswift.StringResource(key: "VisusInstruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: AMD
			static let amdInfoTitle = Rswift.StringResource(key: "AmdInfoTitle", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: AMD
			static let illnessInfo0Title = Rswift.StringResource(key: "IllnessInfo0Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Adressverzeichnis
			static let addressesTitle = Rswift.StringResource(key: "AddressesTitle", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Aktive Prävention: Durch regelmäßige körperliche Bewegung können Sie Ihr Risiko für eine Makuladegeneration nachweislich erheblich senken.
			static let activitiesInfo1Instruction = Rswift.StringResource(key: "ActivitiesInfo1Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Aktive Prävention: Durch regelmäßige körperliche Bewegung können Sie Ihr Risiko für eine Makuladegeneration nachweislich erheblich senken.
			static let activitiesInfo1SpeechText = Rswift.StringResource(key: "ActivitiesInfo1SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Aktuelles
			static let newsTitle = Rswift.StringResource(key: "NewsTitle", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Alltagshilfen
			static let aidInfo7Title = Rswift.StringResource(key: "AidInfo7Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Als Makula oder gelber Fleck wird die Netzhautmitte bezeichnet, der Punkt des schärfsten Sehens. Hier befinden sich die meisten Sinneszellen des Auges. Der Bereich der Makula ist für das Farbensehen und die feinste Bildauflösung verantwortlich. Der Sehnerv leitet diese Information an das Gehirn weiter.
			static let illnessInfo5Instruction = Rswift.StringResource(key: "IllnessInfo5Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Als Makula oder gelber Fleck wird die Netzhautmitte bezeichnet, der Punkt des schärfsten Sehens. Hier befinden sich die meisten Sinneszellen des Auges. Der Bereich der Makula ist für das Farbensehen und die feinste Bildauflösung verantwortlich. Der Sehnerv leitet diese Information an das Gehirn weiter.
			static let illnessInfo5SpeechText = Rswift.StringResource(key: "IllnessInfo5SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Alternative
			static let therapyInfo0Title = Rswift.StringResource(key: "TherapyInfo0Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Altersabhängige Makuladegeneration. Die AMD ist eine Erkrankung der Makula, dem Punkt des schärfsten Sehens der zentralen Netzhaut im hinteren Auge. Sie tritt vorwiegend bei Menschen ab einem Lebensalter von 55 Jahren auf. Neben dem Haupt-Risikofaktor Lebensalter kann für eine AMD eine erbliche Vorbelastung bestehen. Das individuelle Risiko an einer AMD zu erkranken steigt je mehr Risikofaktoren vorliegen. In Deutschland geht man aktuell von etwa 4,5 Millionen Betroffenen aus. Frühe und mittlere Stadien sind meist mit nur geringen Symptomen assoziiert, während es bei Spätstadien oft zu einem erheblichen Verlust an Sehschärfe und zentralem Gesichtsfeld kommt. Die Erkrankung kann an beiden Augen eines Patienten unterschiedlich verlaufen. Eine späte AMD kann als eine sogenannte „feuchte“ (neovaskuläre AMD, nAMD) und eine sogenannte „trockene“ Form (Geografische Atrophie, GA) auftreten, in manchen Fällen auch als eine Kombination aus beidem. Eine späte AMD hat eine erhebliche Minderung des zentralen Sehvermögens in der Ferne und beim Lesen zur Folge: Betroffene verlieren die Fähigkeit, scharf zu sehen. Es gibt bislang keine spezifische Therapie der frühen und mittleren AMD, die ein Voranschreiten verlangsamt, aufhält oder zu einer Heilung der Erkrankung in diesem Stadium führt. Auch für die trockene Spätform existiert bislang keine zugelassene, wirksame Therapie zur Verlangsamung des Fortschreitens der Erkrankung. Bei Patienten mit „trockenen“ Frühformen ist unter bestimmten Voraussetzungen die Einnahme von entsprechend dosierten Nahrungsergänzungsmitteln sinnvoll. Im Gegensatz zu den trockenen Formen lässt sich die feuchte Form mit Medikamenten wirksam behandeln. Verschiedene Wirkstoffe, die unter OP-Bedingungen schmerzfrei direkt ins Auge gespritzt werden, können helfen, die Sehkraft zumindest vorübergehend zu verbessern oder länger zu erhalten.
			static let amdSpeechText = Rswift.StringResource(key: "AmdSpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Altersabhängige Makuladegeneration. Die AMD ist eine Erkrankung der Makula, dem Punkt des schärfsten Sehens der zentralen Netzhaut im hinteren Auge. Sie tritt vorwiegend bei Menschen ab einem Lebensalter von 55 Jahren auf. Neben dem Haupt-Risikofaktor Lebensalter kann für eine AMD eine erbliche Vorbelastung bestehen. Das individuelle Risiko an einer AMD zu erkranken steigt je mehr Risikofaktoren vorliegen. In Deutschland geht man aktuell von etwa 4,5 Millionen Betroffenen aus. Frühe und mittlere Stadien sind meist mit nur geringen Symptomen assoziiert, während es bei Spätstadien oft zu einem erheblichen Verlust an Sehschärfe und zentralem Gesichtsfeld kommt. Die Erkrankung kann an beiden Augen eines Patienten unterschiedlich verlaufen. Eine späte AMD kann als eine sogenannte „feuchte“ (neovaskuläre AMD, nAMD) und eine sogenannte „trockene“ Form (Geografische Atrophie, GA) auftreten, in manchen Fällen auch als eine Kombination aus beidem. Eine späte AMD hat eine erhebliche Minderung des zentralen Sehvermögens in der Ferne und beim Lesen zur Folge: Betroffene verlieren die Fähigkeit, scharf zu sehen. Es gibt bislang keine spezifische Therapie der frühen und mittleren AMD, die ein Voranschreiten verlangsamt, aufhält oder zu einer Heilung der Erkrankung in diesem Stadium führt. Auch für die trockene Spätform existiert bislang keine zugelassene, wirksame Therapie zur Verlangsamung des Fortschreitens der Erkrankung. Bei Patienten mit „trockenen“ Frühformen ist unter bestimmten Voraussetzungen die Einnahme von entsprechend dosierten Nahrungsergänzungsmitteln sinnvoll. Im Gegensatz zu den trockenen Formen lässt sich die feuchte Form mit Medikamenten wirksam behandeln. Verschiedene Wirkstoffe, die unter OP-Bedingungen schmerzfrei direkt ins Auge gespritzt werden, können helfen, die Sehkraft zumindest vorübergehend zu verbessern oder länger zu erhalten. Diabetisches Makulaödem. In Deutschland leben circa 8 Millionen Menschen mit Diabetes mellitus. Die chronische Stoffwechselerkrankung wirkt sich auch auf das Auge aus. Zu hohe Blutzuckerwerte schädigen auf Dauer die feinen Netzhautgefäße. Bei schlechter Einstellung erkrankt jeder fünfte Diabetiker an diabetischer Retinopathie. Aus dieser kann sich ein Diabetisches Makulaödem (DMÖ) entwickeln. 40 Prozent aller Typ-1-Diabetiker und 20 Prozent der Typ-2- Diabetiker sind von DMÖ betroffen. Im Frühstadium verläuft das diabetische Makulaödem unbemerkt. Sehbeein¬trächti-gungen treten meist erst dann auf, wenn die Netzhautschäden schon weit fortge-schritten und damit schlechter zu behandeln sind. im fortgeschrittenen Stadium kommt es zum Sehverlust auch durch Einblutungen in den Glaskörper des Auges oder durch Narbenbildung mit Netzhautablösung. Therapeutisch kommen bei einem DMÖ Injektionen mit VEGF-Hemmern oder Cortison-Präparaten sowie Laserverfahren zum Einsatz. Sollten Sie an Diabetes erkrankt sein, sind regelmäßige und frühzeitige Unter¬suchun-gen beim Augenarzt als Vorsorgemaßnahmen, die eine rechtzeitige Diagnose und eventuelle Therapie ermöglichen, wichtig für die Augengesundheit. Retinaler Venenverschluss. Bei einem Retinalen Venenverschluss (RVV) kann das Blut aufgrund einer Netzhautvenenerkrankung nicht mehr ungehindert abfließen. Retinale Venenverschlüsse (RVV) entstehen durch verschiedene Risikofaktoren: Ein Blutgerinnsel, das sich in einer Stelle der Vene festsetzt oder durch Bluthochdruck mit und ohne Arteriosklerose veränderte Arterien, die benachbarte Venen komprimieren. Dadurch steigt der Druck in den Augenvenen. Es können Netzhautblutungen, Ödeme, Gefäßwucherungen oder sogar Netzhautablösungen entstehen. Retinale Venenverschlüsse führen zu Einbußen der Sehschärfe. Patienten sehen verschwommen oder auch einen „grauen Vorhang“. Je schneller die Therapie erfolgt, desto höher liegen die Behandlungschancen. Injektionen mit einem VEGF-Hemmer in den Glaskörper sind wirksam. Daneben werden Injektionen von Kortisonimplantaten oder Laserbehandlungen eingesetzt sowie durch kontrollierte Blutverdünnung (Hämodilution) die Fließfähigkeiten des Blutes gefördert. Myope choroidale Neovaskularisation. In Europa ist die durch Myopie (Kurzsichtigkeit) entstehende choroidale Neovaskularisation (CNV) die siebthäufigste Erblindungsursache. Es sind vor allem junge, noch berufstätige Patienten betroffen. In der jüngeren Erwachsenenbevölkerung ist die Myopie die häufigste Ursache einer CNV. Eine sehr hohe (pathologische) Myopie kann sich zu einer myopiebedingten choriodalen Neovaskularisation (myopische CNV) entwickeln. Aus neuen, krankhaften Blutgefäßen in der Choroidea kann Flüssigkeit austreten und ein lokales Ödem verursachen. Dies führt in der Makula zu verschwommener Sicht, Metamorphopsien und blinden oder grauen Flecken im Zentrum des Sichtfeldes bis hin zum Sehverlust. Als Behandlungen können eingesetzt werden - die intravitreale-VEGF-Hemmer-Therapie, - eher selten eine Hochenergielaserkoagulation - oder eine Kombination aus einem Medikament, das krankhafte Gefäße der Aderhaut lichtempfindlich macht ( (Photosensibilisierung), und einem niedrig-energetischen Laserlicht (photodynamische Therapie).
			static let diagnoseSpeechText = Rswift.StringResource(key: "DiagnoseSpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Amsler-Test
			static let activitiesInfo0Title = Rswift.StringResource(key: "ActivitiesInfo0Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Amsler-Test. Der Amsler-Test wird zum frühzeitigen Erkennen von subjektiver Sehstörung mit verzerrter Wahrnehmung der Umwelt, sogenannten Metamorphopsien, eingesetzt. Er eignet sich zur Selbstkontrolle. Mit dem Amslergitter (auch Amsler-Netz genannt) können Augen auf ihre Funktionalität und Gesichtsfeldausfälle getestet werden. Decken Sie ein Auge ab und fixieren Sie mit dem anderen den Punkt in der Mitte. Halten Sie dabei einen normalen Leseabstand von 30-40 cm ein. Wenn Sie eine Lesebrille tragen, setzen Sie diese auch zum Test auf. Anschließend testen Sie das andere Auge, ebenfalls unter Abdeckung des Partnerauges. Erkennen Sie den Punkt in der Mitte nicht, sehen Sie verschwommene Stellen, Löcher, Schleier, unterschiedlich große Kästchen oder gebogene Linien, suchen Sie Ihren Arzt auf. In dieser App finden Sie auch einen Amsler-Test. Sie können damit verfolgen, ob sich Änderungen ergeben haben. Wenn ja, teilen Sie dies Ihrem Arzt mit. Empfehlung: Führen Sie den Test regelmäßig im Abstand von 1-2 Wochen oder bei dem Gefühl der Sehverschlechterung unmittelbar durch.
			static let amslertestSpeechText = Rswift.StringResource(key: "AmslertestSpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Angaben gemäß § 5 TMG AMD-Netz e.V. Hohenzollernring 56 48145 Münster Vertreten durch den Vorstand: PD Dr. Klaus Dieter Lemmen Prof. Dr. Daniel Pauleikhoff Registereintrag: Eintragung im Vereinsregiste Registergericht: Amtsgericht Münster  Vereinsregisternummer: 5065 Aufsichtsbehörde: Berufsbezeichnung:Ärzte Zuständige Kammer:  Ärztekammern Nordrhein und Westfalen-Lippe Verliehen durch: Bundesrepublik Deutschland Es gelten folgende berufsrechtliche Regelungen: Bürgerliches Gesetzbuch, Berufsordung für Ärzte  Diese App wird betrieben von Johannes Vegt c/o appamedix Bismarckstr. 10-12 10625 Berlin StIdNr: 74580296162 UmsztSt.IdNr: DE136442400  Verantwortlich für den Inhalt nach § 55 Abs. 2 RStV: Prof. Dr. Daniel Pauleikhoff Telefon: +49 (0) 251 – 935 59 40 Fax: +49 (0) 251 – 935 59 47 E-Mail: info(at)amd-netz.de Internet: <a>www.amd-netz.de</a>  App-Entwicklung: appamedix UG Innovations-Centrum chic Bismarckstraße 10-12 10625 Berlin  Haftungsausschluss:  <h2>Haftung für Inhalte</h2> Die Inhalte unserer App wurden mit größter Sorgfalt erstellt. Für die Richtigkeit, Vollständigkeit und Aktualität der Inhalte können wir jedoch keine Gewähr übernehmen. Als Diensteanbieter sind wir gemäß § 7 Abs.1 TMG für eigene Inhalte auf diesen Seiten nach den allgemeinen Gesetzen verantwortlich. Nach §§ 8 bis 10 TMG sind wir als Diensteanbieter jedoch nicht verpflichtet, übermittelte oder gespeicherte fremde Informationen zu überwachen oder nach Umständen zu forschen, die auf eine rechtswidrige Tätigkeit hinweisen. Verpflichtungen zur Entfernung oder Sperrung der Nutzung von Informationen nach den allgemeinen Gesetzen bleiben hiervon unberührt. Eine diesbezügliche Haftung ist jedoch erst ab dem Zeitpunkt der Kenntnis einer konkreten Rechtsverletzung möglich. Bei Bekanntwerden von entsprechenden Rechtsverletzungen werden wir diese Inhalte umgehend entfernen.  <h2>Haftung für Links</h2> Unser Angebot enthält Links zu externen Webseiten Dritter, auf deren Inhalte wir keinen Einfluss haben. Deshalb können wir für diese fremden Inhalte auch keine Gewähr übernehmen. Für die Inhalte der verlinkten Seiten ist stets der jeweilige Anbieter oder Betreiber der Seiten verantwortlich. Die verlinkten Seiten wurden zum Zeitpunkt der Verlinkung auf mögliche Rechtsverstöße überprüft. Rechtswidrige Inhalte waren zum Zeitpunkt der Verlinkung nicht erkennbar. Eine permanente inhaltliche Kontrolle der verlinkten Seiten ist jedoch ohne konkrete Anhaltspunkte einer Rechtsverletzung nicht zumutbar. Bei Bekanntwerden von Rechtsverletzungen werden wir derartige Links umgehend entfernen.  <h2>Urheberrecht</h2> Die durch die Seitenbetreiber erstellten Inhalte und Werke auf diesen Seiten unterliegen dem deutschen Urheberrecht. Die Vervielfältigung, Bearbeitung, Verbreitung und jede Art der Verwertung außerhalb der Grenzen des Urheberrechtes bedürfen der schriftlichen Zustimmung des jeweiligen Autors bzw. Erstellers. Downloads und Kopien dieser Seite sind nur für den privaten, nicht kommerziellen Gebrauch gestattet. Soweit die Inhalte auf dieser Seite nicht vom Betreiber erstellt wurden, werden die Urheberrechte Dritter beachtet. Insbesondere werden Inhalte Dritter als solche gekennzeichnet. Sollten Sie trotzdem auf eine Urheberrechtsverletzung aufmerksam werden, bitten wir um einen entsprechenden Hinweis. Bei Bekanntwerden von Rechtsverletzungen werden wir derartige Inhalte umgehend entfernen.  <h2>Datenschutz</h2> Die Nutzung unserer App ist in der Regel ohne Angabe personenbezogener Daten möglich. Es werden seitens des Anbieters keine personenbezogene Daten (beispielsweise Name, Anschrift oder eMail-Adressen, medizinische Parameter) erhoben und übertragen. Wenn die App aufgerufen wird, wird automatisch die IP-Adresse gespeichert. Die gespeicherten Angaben dienen nur zu statistischen Zwecken, zur Auswertung der Aufrufe- und Downloadzahlen. In keinem Fall verwenden wie die erhobenen Daten zu dem Zweck, Rückschlüsse auf die Person der Nutzer unserer App zu ziehen. Soweit Inhalte unserer App auf die Homepage des AMD-Netzes verweisen, werden die dort niedergelegten Regelungen zum Datenschutz angewandt. <a>https://www.amd-netz.de/datenschutz</a> Wir weisen darauf hin, dass die Datenübertragung im Internet Sicherheitslücken aufweisen kann. Ein lückenloser Schutz der Daten vor dem Zugriff durch Dritte ist nicht möglich. Der Nutzung von im Rahmen der Impressumspflicht veröffentlichten Kontaktdaten durch Dritte zur Übersendung von nicht ausdrücklich angeforderter Werbung und Informationsmaterialien wird hiermit ausdrücklich widersprochen. Die Betreiber der App behalten sich ausdrücklich rechtliche Schritte im Falle der unverlangten Zusendung von Werbeinformationen, etwa durch Spam-Mails, vor.
			static let inprintInstruction = Rswift.StringResource(key: "InprintInstruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Angaben gemäß § 5 TMG AMD-Netz e.V. Hohenzollernring 56 48145 Münster Vertreten durch den Vorstand: PD Dr. Klaus Dieter Lemmen Prof. Dr. Daniel Pauleikhoff Registereintrag: Eintragung im Vereinsregiste Registergericht: Amtsgericht Münster  Vereinsregisternummer: 5065 Aufsichtsbehörde: Berufsbezeichnung:Ärzte Zuständige Kammer:  Ärztekammern Nordrhein und Westfalen-Lippe Verliehen durch: Bundesrepublik Deutschland Es gelten folgende berufsrechtliche Regelungen: Bürgerliches Gesetzbuch, Berufsordung für Ärzte  Diese App wird betrieben von Johannes Vegt c/o appamedix Bismarckstr. 10-12 10625 Berlin StIdNr: 74580296162 UmsztSt.IdNr: DE136442400  Verantwortlich für den Inhalt nach § 55 Abs. 2 RStV: Prof. Dr. Daniel Pauleikhoff Telefon: +49 (0) 251 – 935 59 40 Fax: +49 (0) 251 – 935 59 47 E-Mail: info(at)amd-netz.de Internet: www.amd-netz.de  App-Entwicklung: appamedix UG Innovations-Centrum chic Bismarckstraße 10-12 10625 Berlin  Haftungsausschluss: Haftung für Inhalte. Die Inhalte unserer App wurden mit größter Sorgfalt erstellt. Für die Richtigkeit, Vollständigkeit und Aktualität der Inhalte können wir jedoch keine Gewähr übernehmen. Als Diensteanbieter sind wir gemäß § 7 Abs.1 TMG für eigene Inhalte auf diesen Seiten nach den allgemeinen Gesetzen verantwortlich. Nach §§ 8 bis 10 TMG sind wir als Diensteanbieter jedoch nicht verpflichtet, übermittelte oder gespeicherte fremde Informationen zu überwachen oder nach Umständen zu forschen, die auf eine rechtswidrige Tätigkeit hinweisen. Verpflichtungen zur Entfernung oder Sperrung der Nutzung von Informationen nach den allgemeinen Gesetzen bleiben hiervon unberührt. Eine diesbezügliche Haftung ist jedoch erst ab dem Zeitpunkt der Kenntnis einer konkreten Rechtsverletzung möglich. Bei Bekanntwerden von entsprechenden Rechtsverletzungen werden wir diese Inhalte umgehend entfernen. Haftung für Links. Unser Angebot enthält Links zu externen Webseiten Dritter, auf deren Inhalte wir keinen Einfluss haben. Deshalb können wir für diese fremden Inhalte auch keine Gewähr übernehmen. Für die Inhalte der verlinkten Seiten ist stets der jeweilige Anbieter oder Betreiber der Seiten verantwortlich. Die verlinkten Seiten wurden zum Zeitpunkt der Verlinkung auf mögliche Rechtsverstöße überprüft. Rechtswidrige Inhalte waren zum Zeitpunkt der Verlinkung nicht erkennbar. Eine permanente inhaltliche Kontrolle der verlinkten Seiten ist jedoch ohne konkrete Anhaltspunkte einer Rechtsverletzung nicht zumutbar. Bei Bekanntwerden von Rechtsverletzungen werden wir derartige Links umgehend entfernen. Urheberrecht. Die durch die Seitenbetreiber erstellten Inhalte und Werke auf diesen Seiten unterliegen dem deutschen Urheberrecht. Die Vervielfältigung, Bearbeitung, Verbreitung und jede Art der Verwertung außerhalb der Grenzen des Urheberrechtes bedürfen der schriftlichen Zustimmung des jeweiligen Autors bzw. Erstellers. Downloads und Kopien dieser Seite sind nur für den privaten, nicht kommerziellen Gebrauch gestattet. Soweit die Inhalte auf dieser Seite nicht vom Betreiber erstellt wurden, werden die Urheberrechte Dritter beachtet. Insbesondere werden Inhalte Dritter als solche gekennzeichnet. Sollten Sie trotzdem auf eine Urheberrechtsverletzung aufmerksam werden, bitten wir um einen entsprechenden Hinweis. Bei Bekanntwerden von Rechtsverletzungen werden wir derartige Inhalte umgehend entfernen. Datenschutz. Die Nutzung unserer App ist in der Regel ohne Angabe personenbezogener Daten möglich. Es werden seitens des Anbieters keine personenbezogene Daten (beispielsweise Name, Anschrift oder eMail-Adressen, medizinische Parameter) erhoben und übertragen. Wenn die App aufgerufen wird, wird automatisch die IP-Adresse gespeichert. Die gespeicherten Angaben dienen nur zu statistischen Zwecken, zur Auswertung der Aufrufe- und Downloadzahlen. In keinem Fall verwenden wie die erhobenen Daten zu dem Zweck, Rückschlüsse auf die Person der Nutzer unserer App zu ziehen. Soweit Inhalte unserer App auf die Homepage des AMD-Netzes verweisen, werden die dort niedergelegten Regelungen zum Datenschutz angewandt. https://www.amd-netz.de/datenschutz Wir weisen darauf hin, dass die Datenübertragung im Internet Sicherheitslücken aufweisen kann. Ein lückenloser Schutz der Daten vor dem Zugriff durch Dritte ist nicht möglich. Der Nutzung von im Rahmen der Impressumspflicht veröffentlichten Kontaktdaten durch Dritte zur Übersendung von nicht ausdrücklich angeforderter Werbung und Informationsmaterialien wird hiermit ausdrücklich widersprochen. Die Betreiber der App behalten sich ausdrücklich rechtliche Schritte im Falle der unverlangten Zusendung von Werbeinformationen, etwa durch Spam-Mails, vor.
			static let inprintSpeechText = Rswift.StringResource(key: "InprintSpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Anleitung
			static let amslertestInfoTitle = Rswift.StringResource(key: "AmslertestInfoTitle", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Anleitung
			static let readingtestInfoTitle = Rswift.StringResource(key: "ReadingtestInfoTitle", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Augenspiegelung
			static let examinationInfo0Title = Rswift.StringResource(key: "ExaminationInfo0Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Backup
			static let backupTitle = Rswift.StringResource(key: "BackupTitle", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Bedienung
			static let manualTitle = Rswift.StringResource(key: "ManualTitle", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Behandlung
			static let illnessInfo4Title = Rswift.StringResource(key: "IllnessInfo4Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Bei der hochauflösenden Optischen Cohärenz Tomografie (O C T) wird die Netzhaut im Rahmen einer berührungsfreien Untersuchung mit Laserstrahlen abgetastet. Die reflektierten Laserstrahlen ergeben ein Schnittbild der Netzhautstruktur und ermöglichen damit eine sehr detaillierte Untersuchung der Makula.
			static let examinationInfo4SpeechText = Rswift.StringResource(key: "ExaminationInfo4SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Bei der hochauflösenden Optischen Cohärenz Tomografie (OCT) wird die Netzhaut im Rahmen einer berührungsfreien Untersuchung mit Laserstrahlen abgetastet. Die reflektierten Laserstrahlen ergeben ein Schnittbild der Netzhautstruktur und ermöglichen damit eine sehr detaillierte Untersuchung der Makula.
			static let examinationInfo4Instruction = Rswift.StringResource(key: "ExaminationInfo4Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Bei der trockenen A M D geht es mangels wirkungsvoller Behandlungsmöglichkeiten vor allem darum, beeinflussbare Risikofaktoren auszuschalten und gesund zu leben.
			static let therapyInfo3SpeechText = Rswift.StringResource(key: "TherapyInfo3SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Bei der trockenen AMD geht es mangels wirkungsvoller Behandlungsmöglichkeiten vor allem darum, beeinflussbare Risikofaktoren auszuschalten und gesund zu leben. mehr: <a>https://www.amd-netz.de/makuladegeneration/faktoren-vorbeugung-frueherkennung/risikofaktoren-und-vorbeugung</a>
			static let therapyInfo3Instruction = Rswift.StringResource(key: "TherapyInfo3Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Bewegung
			static let activitiesInfo1Title = Rswift.StringResource(key: "ActivitiesInfo1Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Bezeichnet eine subjektive Sehstörung mit verzerrter Wahrnehmung der Umwelt (Verzerrtsehen).
			static let illnessInfo7Instruction = Rswift.StringResource(key: "IllnessInfo7Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Bezeichnet eine subjektive Sehstörung mit verzerrter Wahrnehmung der Umwelt (Verzerrtsehen).
			static let illnessInfo7SpeechText = Rswift.StringResource(key: "IllnessInfo7SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Bildschirmlesegerät
			static let aidInfo0Title = Rswift.StringResource(key: "AidInfo0Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Bildschirmlesegeräte nehmen mit einer Kamera Texte und Bilder auf und geben diese unmittelbar vergrößert auf einem Monitor wieder. Sie eignen sich besonders dann, wenn das Kontrastsehen stark eingeschränkt ist und Betroffene hohe Vergrößerungen benötigen.
			static let aidInfo0SpeechText = Rswift.StringResource(key: "AidInfo0SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Bildschirmlesegeräte nehmen mit einer Kamera Texte und Bilder auf und geben diese unmittelbar vergrößert auf einem Monitor wieder. Sie eignen sich besonders dann, wenn das Kontrastsehen stark eingeschränkt ist und Betroffene hohe Vergrößerungen benötigen. mehr: <a>https://www.amd-netz.de/leben-mit-amd/sehhilfen-und-hilfsmittel/bildschirmlesegeraete</a>
			static let aidInfo0Instruction = Rswift.StringResource(key: "AidInfo0Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Blindengeld
			static let supportInfo0Title = Rswift.StringResource(key: "SupportInfo0Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: DMÖ
			static let dmoInfoTitle = Rswift.StringResource(key: "DmoInfoTitle", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Das A M D-Netz führt ein Adressverzeichnis von Ansprechpartnern für Betroffene einer A M D in Deutschland. Hier finden Sie Augenärzte, spezialisierte Augenoptiker, Reha-Lehrer, Berater und Anlaufstellen in Ihrer Nähe: w w w . a m d - netz . d e / Adressverzeichnis
			static let addressesSpeechText = Rswift.StringResource(key: "AddressesSpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Das AMD-Netz führt ein Adressverzeichnis von Ansprechpartnern für Betroffene einer AMD in Deutschland. Hier finden Sie Augenärzte, spezialisierte Augenoptiker, Reha-Lehrer, Berater und Anlaufstellen in Ihrer Nähe: <a>http://www.amd-netz.de/Adressverzeichnis</a>
			static let addressesInstruction = Rswift.StringResource(key: "AddressesInstruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Das AMD-Netz unterhält eine eigene Hotline mit geschulten Ansprechpartnern zur AMD. Sie ist unter 01805 / 774 778 von Montag bis Donnerstag zwischen 14 bis 18 Uhr geschaltet. Anrufe kosten im deuschen Festnetz 14 Ct/Min und im Mobilfunk max 42 Ct/Min.
			static let supportInfo1Instruction = Rswift.StringResource(key: "SupportInfo1Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Das AMD-Netz unterhält eine eigene Hotline mit geschulten Ansprechpartnern zur AMD. Sie ist unter 01805 / 774 778 von Montag bis Donnerstag zwischen 14 bis 18 Uhr geschaltet. Anrufe kosten im deuschen Festnetz 14 Ct/Min und im Mobilfunk max 42 Ct/Min.
			static let supportInfo1SpeechText = Rswift.StringResource(key: "SupportInfo1SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Das AMD-Netz veröffentlicht regelmäßig Nachrichten und Informationen aus dem Bereich Augenheilkunde und AMD.  <a>https://www.amd-netz.de/aktuelles</a>
			static let newsInstruction = Rswift.StringResource(key: "NewsInstruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Das AMD-Netz veröffentlicht regelmäßig Nachrichten und Informationen aus dem Bereich Augenheilkunde und AMD. https://www.amd-netz.de/aktuelles
			static let newsSpeechText = Rswift.StringResource(key: "NewsSpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Der Amsler-Test wird zum frühzeitigen Erkennen und zur Verlaufskontrolle von subjektiver Sehstörung mit verzerrter Wahrnehmung der Umwelt, sogenannten Metamorphopsien, auf einem gitterförmigen Hintergrund (Amsler-Netz oder -gitter ) eingesetzt. Er eignet sich auch zur Selbstkontrolle. Diesen Test finden Sie auch in dieser App.
			static let activitiesInfo0Instruction = Rswift.StringResource(key: "ActivitiesInfo0Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Der Amsler-Test wird zum frühzeitigen Erkennen und zur Verlaufskontrolle von subjektiver Sehstörung mit verzerrter Wahrnehmung der Umwelt, sogenannten Metamorphopsien, auf einem gitterförmigen Hintergrund (Amsler-Netz oder -gitter ) eingesetzt. Er eignet sich auch zur Selbstkontrolle. Diesen Test finden Sie auch in dieser App.
			static let activitiesInfo0SpeechText = Rswift.StringResource(key: "ActivitiesInfo0SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Der Schwerbehindertenausweis dient als Nachweis der Behinderung. Er wird von der zuständigen Behörde nach bundeseinheitlichen Gesetzen ausgestellt. Der Grad der Behinderung (abgekürzt G d B) wird über die Sehschärfe und/oder die Einschränkung des Gesichtsfeldes ermittelt. Jeder Antragsteller erhält einen Feststellungsbescheid, in dem die Behinderung und die Merkzeichen beschrieben sind. Ein Ausweis wird ab einem Grad der Behinderung von 50 ausgestellt.
			static let supportInfo3SpeechText = Rswift.StringResource(key: "SupportInfo3SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Der Schwerbehindertenausweis dient als Nachweis der Behinderung. Er wird von der zuständigen Behörde nach bundeseinheitlichen Gesetzen ausgestellt. Der Grad der Behinderung (abgekürzt G d B) wird über die Sehschärfe und/oder die Einschränkung des Gesichtsfeldes ermittelt. Jeder Antragsteller erhält einen Feststellungsbescheid, in dem die Behinderung und die Merkzeichen beschrieben sind. Ein Ausweis wird ab einem Grad der Behinderung von 50 ausgestellt. mehr: <a>https://www.amd-netz.de/leben-mit-amd/staatliche-hilfen-und-finanzierung/schwerbehindertenausweis</a>
			static let supportInfo3Instruction = Rswift.StringResource(key: "SupportInfo3Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Der Wachstumsfaktor V E G F (Vascular Endothelial Growth Factor) bewirkt unter anderem, dass sich Blutgefäße ständig erneuern. Bei Patienten mit „feuchter“ A M D ist dieser überaktiv. So wachsen Blutgefäße in die Netzhaut, die zudem vermehrt durchlässig sind, so dass Blut und Flüssigkeit ins Gewebe eindringen können. V E G F-Hemmer blockieren diesen Wachstumsfaktor im Auge. Gleichzeitig besitzen diese Wirkstoffe einen abschwellenden Effekt und wirken positiv auf Makulaödeme. Dadurch lässt sich das Fortschreiten der „feuchten“ A M D verzögern und das Sehvermögen dabei oftmals auch verbessern.
			static let therapyInfo5SpeechText = Rswift.StringResource(key: "TherapyInfo5SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Der Wachstumsfaktor VEGF (Vascular Endothelial Growth Factor) bewirkt unter anderem, dass sich Blutgefäße ständig erneuern. Bei Patienten mit „feuchter“ AMD ist dieser überaktiv. So wachsen Blutgefäße in die Netzhaut, die zudem vermehrt durchlässig sind, so dass Blut und Flüssigkeit ins Gewebe eindringen können. VEGF-Hemmer blockieren diesen Wachstumsfaktor im Auge. Gleichzeitig besitzen diese Wirkstoffe einen abschwellenden Effekt und wirken positiv auf Makulaödeme. Dadurch lässt sich das Fortschreiten der „feuchten“ AMD verzögern und das Sehvermögen dabei oftmals auch verbessern. mehr: <a>https://www.amd-netz.de/makuladegeneration/behandlung-und-therapie/ivom/medikamente</a>
			static let therapyInfo5Instruction = Rswift.StringResource(key: "TherapyInfo5Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Derzeit beschränken sich Rehabilitationsprogramme meist auf technische Hilfsmittel mit dem Ziel, Fähigkeiten wie das Lesen temporär zu erhalten und zu verbessern. Dazu gehören aber auch Schulungen zu den Themen Orientierung und Mobilität (O & M), zum Erhalt der Selbständigkeit im Straßenverkehr sowie Schulungen zu lebenspraktischen Fähigkeiten (L P F) rund um die eigene häusliche Umgebung.
			static let activitiesInfo5SpeechText = Rswift.StringResource(key: "ActivitiesInfo5SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Derzeit beschränken sich Rehabilitationsprogramme meist auf technische Hilfsmittel mit dem Ziel, Fähigkeiten wie das Lesen temporär zu erhalten und zu verbessern. Dazu gehören aber auch Schulungen zu den Themen Orientierung und Mobilität (O&M), zum Erhalt der Selbständigkeit im Straßenverkehr sowie Schulungen zu lebenspraktischen Fähigkeiten (LPF) rund um die eigene häusliche Umgebung. mehr: <a>https://www.amd-netz.de/leben-mit-amd/schulungen</a>
			static let activitiesInfo5Instruction = Rswift.StringResource(key: "ActivitiesInfo5Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Derzeit liegen keine ausreichenden Daten für Empfehlungen von Akupunktur oder Plasmapherese vor.
			static let therapyInfo0SpeechText = Rswift.StringResource(key: "TherapyInfo0SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Derzeit liegen keine ausreichenden Daten für Empfehlungen von Akupunktur oder Plasmapherese vor. mehr: <a>https://www.amd-netz.de/makuladegeneration/behandlung-und-therapie/akupunktur</a>
			static let therapyInfo0Instruction = Rswift.StringResource(key: "TherapyInfo0Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Diabetisches Makulaödem. In Deutschland leben circa 8 Millionen Menschen mit Diabetes mellitus. Die chronische Stoffwechselerkrankung wirkt sich auch auf das Auge aus. Zu hohe Blutzuckerwerte schädigen auf Dauer die feinen Netzhautgefäße. Bei schlechter Einstellung erkrankt jeder fünfte Diabetiker an diabetischer Retinopathie. Aus dieser kann sich ein Diabetisches Makulaödem (DMÖ) entwickeln. 40 Prozent aller Typ-1-Diabetiker und 20 Prozent der Typ-2- Diabetiker sind von DMÖ betroffen. Im Frühstadium verläuft das diabetische Makulaödem unbemerkt. Sehbeeinträchtigungen treten meist erst dann auf, wenn die Netzhautschäden schon weit fortgeschritten und damit schlechter zu behandeln sind. Im fortgeschrittenen Stadium kommt es zum Sehverlust auch durch Einblutungen in den Glaskörper des Auges oder durch Narbenbildung mit Netzhautablösung. Therapeutisch kommen bei einem DMÖ Injektionen mit VEGF-Hemmern oder Cortison-Präparaten sowie Laserverfahren zum Einsatz. Sollten Sie an Diabetes erkrankt sein, sind regelmäßige und frühzeitige Untersuchungen beim Augenarzt als Vorsorgemaßnahmen, die eine rechtzeitige Diagnose und eventuelle Therapie ermöglichen, wichtig für die Augengesundheit.
			static let dmoSpeechText = Rswift.StringResource(key: "DmoSpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Diagnose
			static let diagnoseTitle = Rswift.StringResource(key: "DiagnoseTitle", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Die Daten konnten nicht exportiert werden. Bitte beenden Sie die App und versuchen Sie es anschließend erneut.
			static let backupErrorMessage = Rswift.StringResource(key: "BackupErrorMessage", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Die Frühform (intermediäre AMD) ist ebenso wie die Spätform (sogenannte geographische Atrophie, GA) eine eher langsam voranschreitende Erkrankung. Sie geht mit einer allmählichen Sehminderung einher. Für beide Formen existiert bislang keine zugelassene wirksame Therapie zur Verlangsamung des Fortschreitens.
			static let illnessInfo9SpeechText = Rswift.StringResource(key: "IllnessInfo9SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Die Frühform (intermediäre AMD) ist ebenso wie die Spätform (sogenannte geographische Atrophie, GA) eine eher langsam voranschreitende Erkrankung. Sie geht mit einer allmählichen Sehminderung einher. Für beide Formen existiert bislang keine zugelassene wirksame Therapie zur Verlangsamung des Fortschreitens. mehr: <a>https://www.amd-netz.de/makuladegeneration/formen-und-verlauf/trockene-amd</a>
			static let illnessInfo9Instruction = Rswift.StringResource(key: "IllnessInfo9Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Die Netzhaut, oder auch Retina, ist eine ca. 200 µm dicke Gewebeschicht, die das Innere des Auges auskleidet. Sie ist der sensorische Bereich des Auges und dient der Wahrnehmung von Lichtreizen.
			static let illnessInfo8Instruction = Rswift.StringResource(key: "IllnessInfo8Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Die Netzhaut, oder auch Retina, ist eine ca. 200 µm dicke Gewebeschicht, die das Innere des Auges auskleidet. Sie ist der sensorische Bereich des Auges und dient der Wahrnehmung von Lichtreizen.
			static let illnessInfo8SpeechText = Rswift.StringResource(key: "IllnessInfo8SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Die Versionsnummer besteht in der Regel aus einer Kombination aus Versions- und Bau-Nummer. Bitte geben Sie bei Feedback immer beide Nummern an.
			static let versionInstruction = Rswift.StringResource(key: "VersionInstruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Die Versionsnummer besteht in der Regel aus einer Kombination aus Versions- und Bau-Nummer. Bitte geben Sie bei Feedback immer beide Nummern an.
			static let versionSpeechText = Rswift.StringResource(key: "VersionSpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Die altersabhängige Makuladegeneration, A M D, ist eine Erkrankung der Makula, dem zentralen Punkt des schärfsten Sehens der Netzhaut im hinteren Auge. Sie tritt bei Menschen ab etwa 55 Jahren auf und ist bedingt durch ein Zusammenspiel von Alter, erblicher Vorbelastung, bestimmten Umwelteinflüssen und weiteren Risikofaktoren. Frühe und mittlere Stadien sind meist nur mit geringen Symptomen verbunden, während es bei Spätstadien oft zu einem erheblichen Verlust an Sehschärfe und zentralem Gesichtsfeld kommt.
			static let illnessInfo0SpeechText = Rswift.StringResource(key: "IllnessInfo0SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Die altersabhängige Makuladegeneration, AMD, ist eine Erkrankung der Makula, dem zentralen Punkt des schärfsten Sehens der Netzhaut im hinteren Auge. Sie tritt bei Menschen ab etwa 55 Jahren auf und ist bedingt durch ein Zusammenspiel von Alter, erblicher Vorbelastung, bestimmten Umwelteinflüssen und weiteren Risikofaktoren. Frühe und mittlere Stadien sind meist nur mit geringen Symptomen verbunden, während es bei Spätstadien oft zu einem erheblichen Verlust an Sehschärfe und zentralem Gesichtsfeld kommt. mehr: <a>https://www.amd-netz.de/makuladegeneration</a>
			static let illnessInfo0Instruction = Rswift.StringResource(key: "IllnessInfo0Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Die gültige klinische Einteilung der A M D umfasst Drusen als normale Altersveränderungen. Personen mit Drusen mittlerer Ausprägung (≥63–<125 μm) aber ohne Pigmentveränderungen sollten als frühe A M D eingestuft werden. Große Drusen oder Pigmentveränderungen zusammen mit mindestens mittelgroßen Drusen werden als intermediäre A M D eingestuft. Läsionen (Schädigungen) im Zusammenhang mit sogenannter feuchter (neovaskulärer) A M D oder geographischer Atrophie kennzeichnen eine späte A M D.
			static let illnessInfo3SpeechText = Rswift.StringResource(key: "IllnessInfo3SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Die gültige klinische Einteilung der AMD umfasst Drusen als normale Altersveränderungen. Personen mit Drusen mittlerer Ausprägung (≥63–<125 μm) aber ohne Pigmentveränderungen sollten als frühe AMD eingestuft werden. Große Drusen oder Pigmentveränderungen zusammen mit mindestens mittelgroßen Drusen werden als intermediäre AMD eingestuft. Läsionen (Schädigungen) im Zusammenhang mit sogenannter feuchter (neovaskulärer) AMD oder geographischer Atrophie kennzeichnen eine späte AMD. mehr: <a>https://www.amd-netz.de/makuladegeneration/formen-und-verlauf</a>
			static let illnessInfo3Instruction = Rswift.StringResource(key: "IllnessInfo3Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Die „feuchte“ (neovaskuläre) A M D entsteht durch eine Neubildung von Gefäßen oder Gefäßnetzen, die von der Gefäßhaut (Choroidea) ausgeht. Die Erkrankung kann durch regelmäßige Injektionen von V E G F Hemmern über eine lange Zeit aufgehalten oder deutlich verlangsamt werden, wodurch die Sehfähigkeit erhalten bleibt.
			static let illnessInfo2SpeechText = Rswift.StringResource(key: "IllnessInfo2SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Die „feuchte“ (neovaskuläre) AMD entsteht durch eine Neubildung von Gefäßen oder Gefäßnetzen, die von der Gefäßhaut (Choroidea) ausgeht. Die Erkrankung kann durch regelmäßige Injektionen von VEGF-Hemmern über eine lange Zeit aufgehalten oder deutlich verlangsamt werden, wodurch die Sehfähigkeit erhalten bleibt. mehr: <a>https://www.amd-netz.de/makuladegeneration/formen-und-verlauf/feuchte-amd</a>
			static let illnessInfo2Instruction = Rswift.StringResource(key: "IllnessInfo2Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Disclaimer und Hauptmenü. Wenn Sie die Makula App zum ersten Mal starten, werden Sie gebeten dem Disclaimer zuzustimmen. Tippen Sie dazu auf „Bestätigt“. Ohne diese Bestätigung können Sie die App nicht nutzen. Nachdem Sie Ihre Zustimmung bestätigt haben, erscheint die Startseite. Hier gibt es acht Menüpunkte. Bei den ersten 5 Menüpunkten sehen Sie eine hellblaue Schrift auf einem dunklen Hintergrund. Dieser Teil ist Ihr „Digitaler Assistent”. Bei den unteren drei Menüpunkten haben wir eine dunkelfarbige Schrift auf einem hellen Hintergrund; dies ist der Teil „Informiert sein“.Unter den einzelnen Menüpunkten verbergen sich folgende Funktionen: Digitaler Assistent ARZTBESUCH. Datum des Termins  (=Injektion), Nachsorge, O C T-Kontrolle, Sonstige) Diagnose: diese ändert sich in der Regel nicht und muss daher nur beim ersten Besuch angegeben werden Medikamente: in der Regel wird immer dasselbe Medikament bei einer Injektion verabreicht. Es kann medizinische Gründe geben, die den Wechsel auf ein anderes Präparat bedingen. Dann sollten Sie das hier dokumentieren. Sie können zusätzlich die Notizfunktion des Termins nutzen •  Visus-Eingabe: Sie erhalten den Visus von Ihrem Augenarzt. Bitte geben Sie diesen getrennt für jedes Auge ein. •  NH-Dicke-Eingabe: NH steht für Netzhautdicke und ist ein Indikator für Ihre Erkrankung. Dieser Wert wird in einer O C T-Untersuchung ermittelt und Sie erfahren ihn von Ihrem Augenarzt. O C T und Visus rechts und links: Hier sehen Sie im zeitlichen Verlauf Ihre Werte im Diagramm für das rechte und das linke Auge.TERMINE Hier können Sie Ihre nächsten Termine beim Augenarzt verwalten. Zur Übersicht werden die Termine nach Art farblich unterschieden. Sie haben die Möglichkeit, zusätzliche Notizen zum Termin hinzuzufügen. Die Termine finden sich im internen App Kalender KALENDER Hier sehen Sie alle Termine der Zukunft und Vergangenheit in der Übersicht. Über das „+“-Symbol können Sie ebenfalls neue Termine hinzufügen analog zum Menüpunkt Termine des Hauptmenüs. Zudem enthalten die Termine alle Ergebnisse des Arztbesuches noch einmal hinterlegt sowie die Ergebnisse der Selbsttests an den Tagen der Durchführung. So können Sie nachvollziehen, wie die Entwicklung Ihrer Sehfähigkeit der letzten zwei Jahre war. Auch kann bei einem Wechsel des Augenarztes die vergangene Behandlung sehr gut dokumentiert vorgelegt werden. KONTAKTE Hier haben Sie die Möglichkeit, Ihre Ansprechpartner zu hinterlegen und direkt zu kontaktieren. Dazu zählen neben Ihren Augenarzt auch Kliniken für Injektionen, Beratungsstellen, Hausarzt und weitere. SELBSTTESTS Unter Selbsttests finden Sie zum einen das Amslergitter sowie einen Lesetest. Diese helfen Ihnen, Ihre Sehfähigkeit selbstständig regelmäßig zu kontrollieren. Die Ergebnisse werden lokal im App-Kalender hinterlegt. Informiert sein WISSEN / INFORMATION. Im Bereich „Wissen / Information“ können Sie sich über alle Aspekte Ihrer Erkrankung informieren. Zusätzlich gibt es einen Überblick über Hilfsmittel und Sehhilfen sowie praktische Tipps. Für weiterführende Informationen wird in den einzelnen Themen direkt auf die Website des AMD-Netz verlinkt. Die Wissensbereiche sind dann wiederum in die einzelnen Themen untergliedert und mit kurzen Informationen angereichert. Für weitere Informationen gibt es unter den einzelnen Themen Links zur Website des AMD-Netz. ADRESVERZEICHNIS Im Adressverzeichnis finden Sie Adressen von verschiedenen Ansprechpartnern in Ihrer Nähe. Diese Funktion ist nur im Online-modus nutzbar, da aktuelle Informationen direkt abgerufen werden. WEITERE HINWEISE Sie können die Schrift innerhalb der App vergrößern, indem Sie das Smartphone um 90° von der vertikalen in die horizontale Ansicht drehen. Außerdem können Sie sich den Text vorlesen lassen, wenn Sie auf das Lautsprecher Symbol oben rechts tippen. Die Menüpunkte werden nacheinander aufleuchten und vorgelesen.
			static let manualSpeechText = Rswift.StringResource(key: "ManualSpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Drusen
			static let illnessInfo1Title = Rswift.StringResource(key: "IllnessInfo1Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Drusen sind kleine, gelbliche Ablagerungen unter der Netzhaut. Bei vielen Menschen finden sich Drusen als normale Altersveränderung. Erst bei vermehrtem Auftreten oder einer deutlichen Zunahme der Größe der Drusen wird dies einer frühen A M D zugeordnet.
			static let illnessInfo1SpeechText = Rswift.StringResource(key: "IllnessInfo1SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Drusen sind kleine, gelbliche Ablagerungen unter der Netzhaut. Bei vielen Menschen finden sich Drusen als normale Altersveränderung. Erst bei vermehrtem Auftreten oder einer deutlichen Zunahme der Größe der Drusen wird dies einer frühen AMD zugeordnet. mehr: <a>https://www.amd-netz.de/makuladegeneration/formen-und-verlauf/drusen-und-fruehstadium</a>
			static let illnessInfo1Instruction = Rswift.StringResource(key: "IllnessInfo1Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Durch eine gezielte Ernährung lässt sich die A M D beeinflussen und die Sehkraft sowie die Beschaffenheit der Makula verbessern.
			static let activitiesInfo2SpeechText = Rswift.StringResource(key: "ActivitiesInfo2SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Durch eine gezielte Ernährung lässt sich die AMD beeinflussen und die Sehkraft sowie die Beschaffenheit der Makula verbessern. mehr: <a>https://www.amd-netz.de/makuladegeneration/faktoren-vorbeugung-frueherkennung/risikofaktoren-und-vorbeugung#ernaehrung</a>
			static let activitiesInfo2Instruction = Rswift.StringResource(key: "ActivitiesInfo2Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Eine intravitreale operative Medikamenteneingabe (kurz I V O M) bezeichnet eine Injektion in den Glaskörper des Auges. Bei der A M D sind dies V E G F-Hemmer, die den Wachstumsfaktor im Auge blockieren und nach strengen Hygienevorschriften direkt in das Auge gespritzt werden. Dadurch lässt sich das Fortschreiten der Erkrankung verzögern und das Sehvermögen in einigen Fällen sogar verbessern. Die Injektionen erfolgen mehrfach und regelmäßig. eine Therapiekontrolle ist dabei im Hinblick auf Dauer und Wiederaufnahme der Behandlung sehr wichtig.
			static let therapyInfo1SpeechText = Rswift.StringResource(key: "TherapyInfo1SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Eine intravitreale operative Medikamenteneingabe (kurz IVOM) bezeichnet eine Injektion in den Glaskörper des Auges. Bei der AMD sind dies VEGF-Hemmer, die den Wachstumsfaktor im Auge blockieren und nach strengen Hygienevorschriften direkt in das Auge gespritzt werden. Dadurch lässt sich das Fortschreiten der Erkrankung verzögern und das Sehvermögen in einigen Fällen sogar verbessern. Die Injektionen erfolgen mehrfach und regelmäßig. eine Therapiekontrolle ist dabei im Hinblick auf Dauer und Wiederaufnahme der Behandlung sehr wichtig. mehr: <a>https://www.amd-netz.de/makuladegeneration/behandlung-und-therapie/ivom</a>
			static let therapyInfo1Instruction = Rswift.StringResource(key: "TherapyInfo1Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Ernährung
			static let activitiesInfo2Title = Rswift.StringResource(key: "ActivitiesInfo2Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Es gibt vielfältige Möglichkeiten Hilfsmittel einzusetzen. Auswahl und Erfolg der Nutzung sind sehr individuell. Suchen Sie nach Sehhilfen und Hilfsmitteln zum Beispiel auf <a>www.amd-netz.de</a>. Nutzen Sie die Suche nach Ansprechpartnern in Ihrer Region unter <a>www.amd-netz.de/Adressverzeichnis</a> und probieren Sie aus, was für Sie sinnvoll ist. mehr: <a>https://www.amd-netz.de/leben-mit-amd/sehhilfen-und-hilfsmittel/suche</a>
			static let aidInfo7Instruction = Rswift.StringResource(key: "AidInfo7Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Es gibt vielfältige Möglichkeiten Hilfsmittel einzusetzen. Auswahl und Erfolg der Nutzung sind sehr individuell. Suchen Sie nach Sehhilfen und Hilfsmitteln zum Beispiel auf www.amd-netz.de. Nutzen Sie die Suche nach Ansprechpartnern in Ihrer Region unter www.amd-netz.de/Adressverzeichnis und probieren Sie aus, was für Sie sinnvoll ist.
			static let aidInfo7SpeechText = Rswift.StringResource(key: "AidInfo7SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Export gescheitert
			static let backupErrorTitle = Rswift.StringResource(key: "BackupErrorTitle", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Exportieren
			static let backupButtonTitle = Rswift.StringResource(key: "BackupButtonTitle", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Feuchte AMD
			static let illnessInfo2Title = Rswift.StringResource(key: "IllnessInfo2Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Fluoreszenzangiographie
			static let examinationInfo1Title = Rswift.StringResource(key: "ExaminationInfo1Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Fluoreszenzangiographie ist ein bildgebendes Verfahren zur Diagnostik von Erkrankungen des Augenhintergrundes. Dabei wird ein Farbstoff als Kontrastmittel in eine Armvene injiziert, um Blutgefäße der Augen sichtbar zu machen.
			static let examinationInfo1Instruction = Rswift.StringResource(key: "ExaminationInfo1Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Fluoreszenzangiographie ist ein bildgebendes Verfahren zur Diagnostik von Erkrankungen des Augenhintergrundes. Dabei wird ein Farbstoff als Kontrastmittel in eine Armvene injiziert, um Blutgefäße der Augen sichtbar zu machen.
			static let examinationInfo1SpeechText = Rswift.StringResource(key: "ExaminationInfo1SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Formen AMD
			static let illnessInfo3Title = Rswift.StringResource(key: "IllnessInfo3Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Fundusfotografie
			static let examinationInfo2Title = Rswift.StringResource(key: "ExaminationInfo2Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Für den Bezug von Blindengeld muss das Augenlicht vollständig erloschen oder die Sehschärfe auf beiden Augen auf 1/50 (2 %) herabgesetzt sein oder eine entsprechend gravierende Gesichtsfeldeinschränkung vorliegen. Das Sehvermögen ist durch eine augenfachärztliche Bescheinigung nachzuweisen, es sei denn, im Schwerbehindertenausweis ist bereits das Merkzeichen Bl (blind) eingetragen. Die Höhe dieser Leistung ist in jedem Bundesland gesetzlich geregelt.
			static let supportInfo0SpeechText = Rswift.StringResource(key: "SupportInfo0SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Für den Bezug von Blindengeld muss das Augenlicht vollständig erloschen oder die Sehschärfe auf beiden Augen auf 1/50 (2 %) herabgesetzt sein oder eine entsprechend gravierende Gesichtsfeldeinschränkung vorliegen. Das Sehvermögen ist durch eine augenfachärztliche Bescheinigung nachzuweisen, es sei denn, im Schwerbehindertenausweis ist bereits das Merkzeichen Bl (blind) eingetragen. Die Höhe dieser Leistung ist in jedem Bundesland gesetzlich geregelt. mehr: <a>https://www.amd-netz.de/leben-mit-amd/staatliche-hilfen-und-finanzierung/blinden-und-sehbehindertengeld</a>
			static let supportInfo0Instruction = Rswift.StringResource(key: "SupportInfo0Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Hotline-AMD
			static let supportInfo1Title = Rswift.StringResource(key: "SupportInfo1Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Hörbucherei
			static let aidInfo1Title = Rswift.StringResource(key: "AidInfo1Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Hörbüchereien bieten für seheingeschränkte und blinde Menschen Bücher und Zeitschriften in ungekürzter Fassung als Hörversion kostenlos zur Ausleihe an. Es sind keine Kenntnisse der Blindenschrift erforderlich.
			static let aidInfo1SpeechText = Rswift.StringResource(key: "AidInfo1SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Hörbüchereien bieten für seheingeschränkte und blinde Menschen Bücher und Zeitschriften in ungekürzter Fassung als Hörversion kostenlos zur Ausleihe an. Es sind keine Kenntnisse der Blindenschrift erforderlich. mehr: <a>https://www.amd-netz.de/leben-mit-amd/sehhilfen-und-hilfsmittel/hoerbuecher</a>
			static let aidInfo1Instruction = Rswift.StringResource(key: "AidInfo1Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: IVOM-Therapie
			static let therapyInfo1Title = Rswift.StringResource(key: "TherapyInfo1Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Ihre Daten in der App werden über Apples iCloud Backup-Funktionalität mitgesichert, d.h. wenn Sie Ihr iPhone oder iPad aus einem iCloud Backup wieder herstellen, dann werden auch die in der App gespeicherten Daten wieder hergestellt.  Außerdem können Sie ein manuelles Backup erstellen, indem Sie die Datenbank exportieren und diese sich selbst dann zumailen. Um diese dann wieder zu importieren öffnen Sie die Mail mit dem Backup, drücken und halten Sie lange auf die Datei und wählen dann die Makula App aus der Liste der Apps.
			static let backupInstruction = Rswift.StringResource(key: "BackupInstruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Ihre Daten in der App werden über Apples iCloud Backup-Funktionalität mitgesichert, d.h. wenn Sie Ihr iPhone oder iPad aus einem iCloud Backup wieder herstellen, dann werden auch die in der App gespeicherten Daten wieder hergestellt. Außerdem können Sie ein manuelles Backup erstellen, indem Sie die Datenbank exportieren und diese sich selbst dann zumailen. Um diese dann wieder zu importieren öffnen Sie die Mail mit dem Backup, drücken und halten Sie lange auf die Datei und wählen dann die Makula App aus der Liste der Apps.
			static let backupSpeechText = Rswift.StringResource(key: "BackupSpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Impressum
			static let inprintTitle = Rswift.StringResource(key: "InprintTitle", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Kantenfiltergläser
			static let aidInfo2Title = Rswift.StringResource(key: "AidInfo2Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Kantenfiltergläser sind eine spezielle Form der Lichtschutzfilter. Sie filtern das kurzwellige Licht aus dem sichtbaren Spektrum, das letztendlich für die Blendung verantwortlich ist, vollständig heraus. Viele Nutzer empfinden zudem eine Verstärkung der Kontraste.
			static let aidInfo2SpeechText = Rswift.StringResource(key: "AidInfo2SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Kantenfiltergläser sind eine spezielle Form der Lichtschutzfilter. Sie filtern das kurzwellige Licht aus dem sichtbaren Spektrum, das letztendlich für die Blendung verantwortlich ist, vollständig heraus. Viele Nutzer empfinden zudem eine Verstärkung der Kontraste. mehr: <a>https://www.amd-netz.de/leben-mit-amd/sehhilfen-und-hilfsmittel/kantenfilterglaeser</a>
			static let aidInfo2Instruction = Rswift.StringResource(key: "AidInfo2Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Krankenkasse
			static let supportInfo2Title = Rswift.StringResource(key: "SupportInfo2Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Leistungen: Die medizinische Therapie bei der feuchten A M D (I V O M) wird in der Regel von den privaten und gesetzlichen Krankenkassen (meist in sogenannten Selektivverträgen) erstattet, wenn eine behandlungsbedürftige A M D besteht. Dies gilt meist auch für die Nachsorge und Diagnostik (u. a. O C T). Die regional spezifische Situation kann der behandelnde Arzt klären. Die Finanzierung eines Hilfsmittels für den privaten Gebrauch kann als medizinische Leistung zur Rehabilitation erfolgen. Kostenträger ist vorrangig die gesetzliche Krankenkasse. Bei Hilfsmitteln für den privaten Gebrauch ist es notwendig, dass der behandelnde Arzt ein Rezept für das beantragte Hilfsmittel ausstellt.
			static let supportInfo2SpeechText = Rswift.StringResource(key: "SupportInfo2SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Leistungen: Die medizinische Therapie bei der feuchten AMD (IVOM) wird in der Regel von den privaten und gesetzlichen Krankenkassen (meist in sogenannten Selektivverträgen) erstattet, wenn eine behandlungsbedürftige AMD besteht. Dies gilt meist auch für die Nachsorge und Diagnostik (u. a. OCT). Die regional spezifische Situation kann der behandelnde Arzt klären. Die Finanzierung eines Hilfsmittels für den privaten Gebrauch kann als medizinische Leistung zur Rehabilitation erfolgen. Kostenträger ist vorrangig die gesetzliche Krankenkasse. Bei Hilfsmitteln für den privaten Gebrauch ist es notwendig, dass der behandelnde Arzt ein Rezept für das beantragte Hilfsmittel ausstellt. mehr: <a>https://www.amd-netz.de/leben-mit-amd/staatliche-hilfen-und-finanzierung/finanzierung-von-hilfsmitteln</a>
			static let supportInfo2Instruction = Rswift.StringResource(key: "SupportInfo2Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Lesebrillen mit höheren Stärken werden als Lupenbrillen bezeichnet. Für Lupenbrillen werden spezielle, besonders starke Brillengläser in eine Brillenfassung eingebaut. Sie erreichen bis zu 15-fache Vergrößerungen.
			static let aidInfo4SpeechText = Rswift.StringResource(key: "AidInfo4SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Lesebrillen mit höheren Stärken werden als Lupenbrillen bezeichnet. Für Lupenbrillen werden spezielle, besonders starke Brillengläser in eine Brillenfassung eingebaut. Sie erreichen bis zu 15-fache Vergrößerungen. mehr: <a>https://www.amd-netz.de/leben-mit-amd/sehhilfen-und-hilfsmittel/lupenbrillen</a>
			static let aidInfo4Instruction = Rswift.StringResource(key: "AidInfo4Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Lesetest. Dieser Lesetest dient der Selbstkontrolle. Er ist individuell und auf Ihrem Smartphone aussagekräftig. Halten Sie bitte Ihr Endgerät bei jeder Nutzung in der gleichen Position und in einem vergleichbaren Leseabstand von 30-40 cm. Sie können hier verfolgen, ob sich bei Ihnen Änderungen ergeben haben. Halten Sie jeweils ein Auge zu und testen Sie beide Seiten einzeln. Sie können das Ergebnis für beide Augen getrennt markieren. Wenn sich Änderungen ergeben haben, teilen Sie dies Ihrem Arzt mit. Empfehlung: Führen Sie den Lese-Test regelmäßig im Abstand von 2 Wochen, bei Verschlechterung unmittelbar durch.
			static let readingtestSpeechText = Rswift.StringResource(key: "ReadingtestSpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Lupe
			static let aidInfo3Title = Rswift.StringResource(key: "AidInfo3Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Lupen sind einfache und bekannte vergrößernde Sehhilfen und werden häufig als erstes Hilfsmittel verwendet, um Beschriftungen und kurze Texte zu lesen. Die Lupe sollte von einem erfahrenen Augenoptiker auf den individuellen Bedarf angepasst werden.
			static let aidInfo3SpeechText = Rswift.StringResource(key: "AidInfo3SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Lupen sind einfache und bekannte vergrößernde Sehhilfen und werden häufig als erstes Hilfsmittel verwendet, um Beschriftungen und kurze Texte zu lesen. Die Lupe sollte von einem erfahrenen Augenoptiker auf den individuellen Bedarf angepasst werden. mehr: <a>https://www.amd-netz.de/leben-mit-amd/sehhilfen-und-hilfsmittel/Lupen</a>
			static let aidInfo3Instruction = Rswift.StringResource(key: "AidInfo3Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Lupenbrille
			static let aidInfo4Title = Rswift.StringResource(key: "AidInfo4Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Makula
			static let illnessInfo5Title = Rswift.StringResource(key: "IllnessInfo5Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Makulaödem
			static let illnessInfo6Title = Rswift.StringResource(key: "IllnessInfo6Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Makulaödem beschreibt eine Ansammlung von Flüssigkeit im Auge. Das Ödem befindet sich dabei im Bereich des Gelben Flecks in der Netzhautmitte. In der Folge kommt es zu Sehstörungen und zu unscharfem Sehen.
			static let illnessInfo6Instruction = Rswift.StringResource(key: "IllnessInfo6Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Makulaödem beschreibt eine Ansammlung von Flüssigkeit im Auge. Das Ödem befindet sich dabei im Bereich des Gelben Flecks in der Netzhautmitte. In der Folge kommt es zu Sehstörungen und zu unscharfem Sehen.
			static let illnessInfo6SpeechText = Rswift.StringResource(key: "IllnessInfo6SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Metamorphopsie
			static let illnessInfo7Title = Rswift.StringResource(key: "IllnessInfo7Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Myope choroidale Neovaskularisation. In Europa ist die durch Myopie (Kurzsichtigkeit) entstehende choroidale Neovaskularisation (CNV) die siebthäufigste Erblindungsursache. Es sind vor allem junge, noch berufstätige Patienten betroffen. In der jüngeren Erwachsenenbevölkerung ist die Myopie die häufigste Ursache einer CNV. Eine sehr hohe (pathologische) Myopie kann sich zu einer myopiebedingten choriodalen Neovaskularisation (myopische CNV) entwickeln. Aus neuen, krankhaften Blutgefäßen in der Choroidea kann Flüssigkeit austreten und ein lokales Ödem verursachen. Dies führt in der Makula zu verschwommener Sicht, Metamorphopsien und blinden oder grauen Flecken im Zentrum des Sichtfeldes bis hin zum Sehverlust. Als Behandlungen können eingesetzt werden - die intravitreale-VEGF-Hemmer-Therapie, - eher selten eine Hochenergielaserkoagulation - oder eine Kombination aus einem Medikament, das krankhafte Gefäße der Aderhaut lichtempfindlich macht (Photosensibilisierung), und einem niedrig-energetischen Laserlicht (photodynamische Therapie).
			static let mcnvSpeechText = Rswift.StringResource(key: "McnvSpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: N H D. Viele Augenerkrankungen wirken sich durch eine Veränderung der Netzhautdicke aus. Deswegen ist für die Diagnose sehr wichtig, Wert und Veränderungen der Netzhautdicke durch die optische Cohärenz-Tomographie (O C T) zu messen. Bitte erfragen Sie den Wert in Ihrer Praxis.
			static let nhdSpeechText = Rswift.StringResource(key: "NhdSpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: NH-Dicke
			static let nhdInfoTitle = Rswift.StringResource(key: "NhdInfoTitle", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Nahrungsergänzung
			static let activitiesInfo3Title = Rswift.StringResource(key: "ActivitiesInfo3Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Nahrungsergänzungsmittel sind konzentrierte Quellen von Nährstoffen oder anderen Stoffen mit ernährungsspezifischer oder physiologischer Wirkung. Sie können die normale Ernährung ergänzen. Verschiedene Studien belegen, dass A M D-Patienten von bestimmtem Vitaminen und Mineralstoffen auch in Form von Nahrungsergänzungsmitteln profitieren können.
			static let activitiesInfo3SpeechText = Rswift.StringResource(key: "ActivitiesInfo3SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Nahrungsergänzungsmittel sind konzentrierte Quellen von Nährstoffen oder anderen Stoffen mit ernährungsspezifischer oder physiologischer Wirkung. Sie können die normale Ernährung ergänzen. Verschiedene Studien belegen, dass AMD-Patienten von bestimmtem Vitaminen und Mineralstoffen auch in Form von Nahrungsergänzungsmitteln profitieren können. mehr: <a>https://www.amd-netz.de/makuladegeneration/faktoren-vorbeugung-frueherkennung/risikofaktoren-und-vorbeugung#vitaminpraeparate</a>
			static let activitiesInfo3Instruction = Rswift.StringResource(key: "ActivitiesInfo3Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Netzhaut
			static let illnessInfo8Title = Rswift.StringResource(key: "IllnessInfo8Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Netzhautdicke
			static let examinationInfo3Title = Rswift.StringResource(key: "ExaminationInfo3Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: OCT-A
			static let examinationInfo5Title = Rswift.StringResource(key: "ExaminationInfo5Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: OCT-Untersuchung
			static let examinationInfo4Title = Rswift.StringResource(key: "ExaminationInfo4Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Optische Cohärenz Tomografie, Angiographie (O C T-A). Mit dieser ergänzenden diagnostischen Methode kann der Blutfluss in den Netzhautgefäßen ohne Verwendung eines Farbstoffs / Kontrastmittels dargestellt werden.
			static let examinationInfo5SpeechText = Rswift.StringResource(key: "ExaminationInfo5SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Optische Cohärenz Tomografie, Angiographie (OCT-A). Mit dieser ergänzenden diagnostischen Methode kann der Blutfluss in den Netzhautgefäßen ohne Verwendung eines Farbstoffs / Kontrastmittels dargestellt werden.
			static let examinationInfo5Instruction = Rswift.StringResource(key: "ExaminationInfo5Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: PRN-Schema
			static let therapyInfo2Title = Rswift.StringResource(key: "TherapyInfo2Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: RVV
			static let rvvInfoTitle = Rswift.StringResource(key: "RvvInfoTitle", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Rauchen
			static let activitiesInfo4Title = Rswift.StringResource(key: "ActivitiesInfo4Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Rauchen stellt einen entscheidenden Risikofaktor für die Entwicklung einer AMD dar. Studien zufolge sind Raucher einem zwei- bis dreifachen höheren Risiko für eine A M D ausgesetzt als Nichtraucher. Das individuelle Risiko steigt dabei mit der Intensität/Häufigkeit des Rauchens.
			static let activitiesInfo4SpeechText = Rswift.StringResource(key: "ActivitiesInfo4SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Rauchen stellt einen entscheidenden Risikofaktor für die Entwicklung einer AMD dar. Studien zufolge sind Raucher einem zwei- bis dreifachen höheren Risiko für eine AMD ausgesetzt als Nichtraucher. Das individuelle Risiko steigt dabei mit der Intensität/Häufigkeit des Rauchens. mehr: <a>https://www.amd-netz.de/makuladegeneration/faktoren-vorbeugung-frueherkennung/risikofaktoren-und-vorbeugung#rauchen</a>
			static let activitiesInfo4Instruction = Rswift.StringResource(key: "ActivitiesInfo4Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Reha-Maßnahmen
			static let activitiesInfo5Title = Rswift.StringResource(key: "ActivitiesInfo5Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Retinaler Venenverschluss. Bei einem Retinalen Venenverschluss (RVV) kann das Blut aufgrund einer Netzhautvenenerkrankung nicht mehr ungehindert abfließen. Retinale Venenverschlüsse (RVV) entstehen durch verschiedene Risikofaktoren: Ein Blutgerinnsel, das sich in einer Stelle der Vene festsetzt oder durch Bluthochdruck mit und ohne Arteriosklerose veränderte Arterien, die benachbarte Venen komprimieren. Dadurch steigt der Druck in den Augenvenen. Es können Netzhautblutungen, Ödeme, Gefäßwucherungen oder sogar Netzhautablösungen entstehen. Retinale Venenverschlüsse führen zu Einbußen der Sehschärfe. Patienten sehen verschwommen oder auch einen „grauen Vorhang“. Je schneller die Therapie erfolgt, desto höher liegen die Behandlungschancen. Injektionen mit einem VEGF-Hemmer in den Glaskörper sind wirksam. Daneben werden Injektionen von Kortisonimplantaten oder Laserbehandlungen eingesetzt sowie durch kontrollierte Blutverdünnung (Hämodilution) die Fließfähigkeiten des Blutes gefördert.
			static let rvvSpeechText = Rswift.StringResource(key: "RvvSpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Schema für eine intravitreale operative Medikamenteneingabe (I V O M): Nach der initialen 3-er Behandlung einer I V O M-Therapie erfolgen monatliche Kontrollen und eventuelle weitere Behandlungen, meist auch in einer 3-er Behandlungsserie in monatlichen Abständen bei erneuter Läsionsaktivität (häufig erneute Flüssigkeitsansammlung in und unter der Netzhaut, in der O C T sichtbar).
			static let therapyInfo2SpeechText = Rswift.StringResource(key: "TherapyInfo2SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Schema für eine intravitreale operative Medikamenteneingabe (IVOM): Nach der initialen 3-er Behandlung einer IVOM-Therapie erfolgen monatliche Kontrollen und eventuelle weitere Behandlungen, meist auch in einer 3-er Behandlungsserie in monatlichen Abständen bei erneuter Läsionsaktivität (häufig erneute Flüssigkeitsansammlung in und unter der Netzhaut, in der OCT sichtbar).
			static let therapyInfo2Instruction = Rswift.StringResource(key: "TherapyInfo2Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Schwerbehindertenausweis
			static let supportInfo3Title = Rswift.StringResource(key: "SupportInfo3Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Sehbehindertengeld
			static let supportInfo4Title = Rswift.StringResource(key: "SupportInfo4Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Sehbehindertengeld wird hochgradig seheingeschränkten Menschen nach Länderrecht gewährt. Nicht alle Bundesländer haben hierzu Regelungen getroffen. Die Leistungen sind in den gewährenden Ländern unterschiedlich hoch.
			static let supportInfo4SpeechText = Rswift.StringResource(key: "SupportInfo4SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Sehbehindertengeld wird hochgradig seheingeschränkten Menschen nach Länderrecht gewährt. Nicht alle Bundesländer haben hierzu Regelungen getroffen. Die Leistungen sind in den gewährenden Ländern unterschiedlich hoch. mehr: <a>https://www.amd-netz.de/leben-mit-amd/staatliche-hilfen-und-finanzierung/blinden-und-sehbehindertengeld</a>
			static let supportInfo4Instruction = Rswift.StringResource(key: "SupportInfo4Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Smartphone
			static let aidInfo5Title = Rswift.StringResource(key: "AidInfo5Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Smartphones sind Alltagshelfer im mobilen Einsatz – auch für sehbehinderte und ältere Menschen. Voraussetzung: Es müssen individuelle Einstellungen vorgenommen, entsprechende Apps installiert und die Handhabung geübt werden.
			static let aidInfo5SpeechText = Rswift.StringResource(key: "AidInfo5SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Smartphones sind Alltagshelfer im mobilen Einsatz – auch für sehbehinderte und ältere Menschen. Voraussetzung: Es müssen individuelle Einstellungen vorgenommen, entsprechende Apps installiert und die Handhabung geübt werden. mehr: <a>https://www.amd-netz.de/leben-mit-amd/sehhilfen-und-hilfsmittel/smartphone-tablet</a>
			static let aidInfo5Instruction = Rswift.StringResource(key: "AidInfo5Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Tablets können unterwegs verwendet werden. Mit entsprechender Software dienen sie beispielsweise als Lupe, Taschenlampe oder Navigationsgerät, helfen im Supermarkt beim Etikettenlesen oder an der Haltestelle beim Entziffern eines Fahrplans.
			static let aidInfo6SpeechText = Rswift.StringResource(key: "AidInfo6SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Tablets können unterwegs verwendet werden. Mit entsprechender Software dienen sie beispielsweise als Lupe, Taschenlampe oder Navigationsgerät, helfen im Supermarkt beim Etikettenlesen oder an der Haltestelle beim Entziffern eines Fahrplans. mehr: <a>https://www.amd-netz.de/leben-mit-amd/sehhilfen-und-hilfsmittel/smartphone-tablet</a>
			static let aidInfo6Instruction = Rswift.StringResource(key: "AidInfo6Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Tablett-PC
			static let aidInfo6Title = Rswift.StringResource(key: "AidInfo6Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Treat & Extend
			static let therapyInfo4Title = Rswift.StringResource(key: "TherapyInfo4Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Treat & Extend-Schema. Schema für eine intravitreale operative Medikamenteneingabe (I V O M): Bei dieser vor allem in den U S A angewendeten Behandlungsstrategie erfolgt bei jeder Kontrolle/Behandlung eine I V O M-Therapie. Hierbei wird mit monatlichen Injektionen begonnen, aber bei stabilisierter Netzhautsituation das Behandlungsintervall um z. B. 2 Wochen verlängert. Zeigt sich bei einem Behandlungstermin nach verlängertem Intervall allerdings eine erneute Läsionsaktivität (häufig erneute Flüssigkeitsansammlung in und unter der Netzhaut, in der O C T sichtbar), so wird das Behandlungsintervall wieder verkürzt.
			static let therapyInfo4SpeechText = Rswift.StringResource(key: "TherapyInfo4SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Treat & Extend-Schema. Schema für eine intravitreale operative Medikamenteneingabe (IVOM): Bei dieser vor allem in den USA angewendeten Behandlungsstrategie erfolgt bei jeder Kontrolle/Behandlung eine IVOM-Therapie. Hierbei wird mit monatlichen Injektionen begonnen, aber bei stabilisierter Netzhautsituation das Behandlungsintervall um z. B. 2 Wochen verlängert. Zeigt sich bei einem Behandlungstermin nach verlängertem Intervall allerdings eine erneute Läsionsaktivität (häufig erneute Flüssigkeitsansammlung in und unter der Netzhaut, in der OCT sichtbar), so wird das Behandlungsintervall wieder verkürzt.
			static let therapyInfo4Instruction = Rswift.StringResource(key: "TherapyInfo4Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Trockene AMD
			static let illnessInfo9Title = Rswift.StringResource(key: "IllnessInfo9Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Trockenen AMD
			static let therapyInfo3Title = Rswift.StringResource(key: "TherapyInfo3Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Unter der Sehschärfe bzw. dem Visus versteht man das Potenzial des Auges, diverse Umweltstrukturen wahrzunehmen und zu erkennen. Die Sehschärfe ist eine messbare Größe, die in der Diagnostik von Augenerkrankungen eine wichtige Rolle spielt.
			static let examinationInfo6Instruction = Rswift.StringResource(key: "ExaminationInfo6Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Unter der Sehschärfe bzw. dem Visus versteht man das Potenzial des Auges, diverse Umweltstrukturen wahrzunehmen und zu erkennen. Die Sehschärfe ist eine messbare Größe, die in der Diagnostik von Augenerkrankungen eine wichtige Rolle spielt.
			static let examinationInfo6SpeechText = Rswift.StringResource(key: "ExaminationInfo6SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: VEGF-Hemmer
			static let therapyInfo5Title = Rswift.StringResource(key: "TherapyInfo5Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Version
			static let versionTitle = Rswift.StringResource(key: "VersionTitle", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Viele Augenerkrankungen wirken sich durch eine Veränderung der Netzhautdicke aus. Deswegen ist für die Diagnose sehr wichtig, Wert und Veränderungen in ihrer Struktur mittels der O C T-Untersuchung zu messen.
			static let examinationInfo3SpeechText = Rswift.StringResource(key: "ExaminationInfo3SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Viele Augenerkrankungen wirken sich durch eine Veränderung der Netzhautdicke aus. Deswegen ist für die Diagnose sehr wichtig, Wert und Veränderungen in ihrer Struktur mittels der OCT-Untersuchung zu messen.
			static let examinationInfo3Instruction = Rswift.StringResource(key: "ExaminationInfo3Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Visus
			static let examinationInfo6Title = Rswift.StringResource(key: "ExaminationInfo6Title", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Visus
			static let visusInfoTitle = Rswift.StringResource(key: "VisusInfoTitle", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Visus. Unter der Sehschärfe bzw. dem Visus versteht man das Potenzial des Auges diverse Umweltstrukturen wahrzunehmen und zu erkennen. Die Sehschärfe ist eine messbare Größe, die in der Diagnostik eine Rolle spielt. Zur Bestimmung des Visus werden beim Augenarzt oder Optiker Sehzeichen projiziert oder Schrifttafeln gezeigt mit Zahlen, Buchstaben oder abstrakten Zeichen (z.B. E-Haken oder Landolt-Ringe). Bitte erfragen Sie den Wert in Ihrer Praxis.
			static let visusSpeechText = Rswift.StringResource(key: "VisusSpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Wenn Sie die Diagnose A M D erhalten haben ist es wichtig, regelmäßige Arzttermine wahrzunehmen. Es gibt bislang keine spezifische Therapie der frühen und mittleren A M D, die ein Voranschreiten verlangsamt, aufhält oder zu einer Heilung der Erkrankung führt. Die feuchte Form ist behandelbar; verschiedene Wirkstoffe können helfen, die Sehkraft zumindest vorübergehend zu verbessern oder länger zu erhalten. Informationen zu Hilfsmitteln und Unterstützung tragen zusätzlich dazu bei, die Lebensqualität zu erhalten.
			static let illnessInfo4SpeechText = Rswift.StringResource(key: "IllnessInfo4SpeechText", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Wenn Sie die Diagnose AMD erhalten haben ist es wichtig, regelmäßige Arzttermine wahrzunehmen. Es gibt bislang keine spezifische Therapie der frühen und mittleren AMD, die ein Voranschreiten verlangsamt, aufhält oder zu einer Heilung der Erkrankung führt. Die feuchte Form ist behandelbar; verschiedene Wirkstoffe können helfen, die Sehkraft zumindest vorübergehend zu verbessern oder länger zu erhalten. Informationen zu Hilfsmitteln und Unterstützung tragen zusätzlich dazu bei, die Lebensqualität zu erhalten. mehr: <a>https://www.amd-netz.de/makuladegeneration/behandlung-und-therapie</a>
			static let illnessInfo4Instruction = Rswift.StringResource(key: "IllnessInfo4Instruction", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: backup_%@.makula
			static let backupFileName = Rswift.StringResource(key: "BackupFileName", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: mCNV
			static let mcnvInfoTitle = Rswift.StringResource(key: "McnvInfoTitle", tableName: "Info", bundle: R.hostingBundle, locales: [], comment: nil)

			/// Value: (Ophthalmoskopie / Funduskopie) Die wichtigste Methode zur Untersuchung der Netzhautstruktur ist die Untersuchung des Augenhintergrundes (Netzhautuntersuchung, Ophthalmoskopie). Diese erfolgt bei makulären Erkrankungen meist an der Spaltlampe mit Hilfe spezieller Lupen oder bei der Beurteilung der Netzhautperipherie mit einer Lampe und Lupe aus circa 60 Zentimetern Entfernung.
			static func examinationInfo0Instruction(_: Void = ()) -> String {
				return NSLocalizedString("ExaminationInfo0Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: (Ophthalmoskopie / Funduskopie) Die wichtigste Methode zur Untersuchung der Netzhautstruktur ist die Untersuchung des Augenhintergrundes (Netzhautuntersuchung, Ophthalmoskopie). Diese erfolgt bei makulären Erkrankungen meist an der Spaltlampe mit Hilfe spezieller Lupen oder bei der Beurteilung der Netzhautperipherie mit einer Lampe und Lupe aus circa 60 Zentimetern Entfernung.
			static func examinationInfo0SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("ExaminationInfo0SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: (der Netzhaut) Mit einer Funduskamera ist es möglich, Netzhaut und Makula zu fotografieren, den aktuellen Befund zu dokumentieren und so eine Verlaufskontrolle zu ermöglichen.
			static func examinationInfo2Instruction(_: Void = ()) -> String {
				return NSLocalizedString("ExaminationInfo2Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: (der Netzhaut) Mit einer Funduskamera ist es möglich, Netzhaut und Makula zu fotografieren, den aktuellen Befund zu dokumentieren und so eine Verlaufskontrolle zu ermöglichen.
			static func examinationInfo2SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("ExaminationInfo2SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: <h2>Altersabhängige Makuladegeneration</h2> Die AMD ist eine Erkrankung der Makula, dem Punkt des schärfsten Sehens der zentralen Netzhaut im hinteren Auge. Sie tritt vorwiegend bei Menschen ab einem Lebensalter von 55 Jahren auf. Neben dem Haupt-Risikofaktor Lebensalter kann für eine AMD eine erbliche Vorbelastung bestehen. Das individuelle Risiko an einer AMD zu erkranken steigt je mehr Risikofaktoren vorliegen. In Deutschland geht man aktuell von etwa 4,5 Millionen Betroffenen aus. Frühe und mittlere Stadien sind meist mit nur geringen Symptomen assoziiert, während es bei Spätstadien oft zu einem erheblichen Verlust an Sehschärfe und zentralem Gesichtsfeld kommt. Die Erkrankung kann an beiden Augen eines Patienten unterschiedlich verlaufen. Eine späte AMD kann als eine sogenannte „feuchte“ (neovaskuläre AMD, nAMD) und eine sogenannte „trockene“ Form (Geografische Atrophie, GA) auftreten, in manchen Fällen auch als eine Kombination aus beidem. Eine späte AMD hat eine erhebliche Minderung des zentralen Sehvermögens in der Ferne und beim Lesen zur Folge: Betroffene verlieren die Fähigkeit, scharf zu sehen. Es gibt bislang keine spezifische Therapie der frühen und mittleren AMD, die ein Voranschreiten verlangsamt, aufhält oder zu einer Heilung der Erkrankung in diesem Stadium führt. Auch für die trockene Spätform existiert bislang keine zugelassene, wirksame Therapie zur Verlangsamung des Fortschreitens der Erkrankung. Bei Patienten mit „trockenen“ Frühformen ist unter bestimmten Voraussetzungen die Einnahme von entsprechend dosierten Nahrungsergänzungsmitteln sinnvoll. Im Gegensatz zu den trockenen Formen lässt sich die feuchte Form mit Medikamenten wirksam behandeln. Verschiedene Wirkstoffe, die unter OP-Bedingungen schmerzfrei direkt ins Auge gespritzt werden, können helfen, die Sehkraft zumindest vorübergehend zu verbessern oder länger zu erhalten.
			static func amdInstruction(_: Void = ()) -> String {
				return NSLocalizedString("AmdInstruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: <h2>Altersabhängige Makuladegeneration</h2> Die AMD ist eine Erkrankung der Makula, dem Punkt des schärfsten Sehens der zentralen Netzhaut im hinteren Auge. Sie tritt vorwiegend bei Menschen ab einem Lebensalter von 55 Jahren auf. Neben dem Haupt-Risikofaktor Lebensalter kann für eine AMD eine erbliche Vorbelastung bestehen. Das individuelle Risiko an einer AMD zu erkranken steigt je mehr Risikofaktoren vorliegen. In Deutschland geht man aktuell von etwa 4,5 Millionen Betroffenen aus. Frühe und mittlere Stadien sind meist mit nur geringen Symptomen assoziiert, während es bei Spätstadien oft zu einem erheblichen Verlust an Sehschärfe und zentralem Gesichtsfeld kommt. Die Erkrankung kann an beiden Augen eines Patienten unterschiedlich verlaufen. Eine späte AMD kann als eine sogenannte „feuchte“ (neovaskuläre AMD, nAMD) und eine sogenannte „trockene“ Form (Geografische Atrophie, GA) auftreten, in manchen Fällen auch als eine Kombination aus beidem. Eine späte AMD hat eine erhebliche Minderung des zentralen Sehvermögens in der Ferne und beim Lesen zur Folge: Betroffene verlieren die Fähigkeit, scharf zu sehen. Es gibt bislang keine spezifische Therapie der frühen und mittleren AMD, die ein Voranschreiten verlangsamt, aufhält oder zu einer Heilung der Erkrankung in diesem Stadium führt. Auch für die trockene Spätform existiert bislang keine zugelassene, wirksame Therapie zur Verlangsamung des Fortschreitens der Erkrankung. Bei Patienten mit „trockenen“ Frühformen ist unter bestimmten Voraussetzungen die Einnahme von entsprechend dosierten Nahrungsergänzungsmitteln sinnvoll. Im Gegensatz zu den trockenen Formen lässt sich die feuchte Form mit Medikamenten wirksam behandeln. Verschiedene Wirkstoffe, die unter OP-Bedingungen schmerzfrei direkt ins Auge gespritzt werden, können helfen, die Sehkraft zumindest vorübergehend zu verbessern oder länger zu erhalten.  <h2>Diabetisches Makulaödem</h2> In Deutschland leben circa 8 Millionen Menschen mit Diabetes mellitus. Die chronische Stoffwechselerkrankung wirkt sich auch auf das Auge aus. Zu hohe Blutzuckerwerte schädigen auf Dauer die feinen Netzhautgefäße. Bei schlechter Einstellung erkrankt jeder fünfte Diabetiker an diabetischer Retinopathie. Aus dieser kann sich ein Diabetisches Makulaödem (DMÖ) entwickeln. 40 Prozent aller Typ-1-Diabetiker und 20 Prozent der Typ-2- Diabetiker sind von DMÖ betroffen. Im Frühstadium verläuft das diabetische Makulaödem unbemerkt. Sehbeein¬trächti-gungen treten meist erst dann auf, wenn die Netzhautschäden schon weit fortge-schritten und damit schlechter zu behandeln sind. im fortgeschrittenen Stadium kommt es zum Sehverlust auch durch Einblutungen in den Glaskörper des Auges oder durch Narbenbildung mit Netzhautablösung. Therapeutisch kommen bei einem DMÖ Injektionen mit VEGF-Hemmern oder Cortison-Präparaten sowie Laserverfahren zum Einsatz. Sollten Sie an Diabetes erkrankt sein, sind regelmäßige und frühzeitige Unter¬suchun-gen beim Augenarzt als Vorsorgemaßnahmen, die eine rechtzeitige Diagnose und eventuelle Therapie ermöglichen, wichtig für die Augengesundheit.  <h2>Retinaler Venenverschluss</h2> Bei einem Retinalen Venenverschluss (RVV) kann das Blut aufgrund einer Netzhautvenenerkrankung nicht mehr ungehindert abfließen. Retinale Venenverschlüsse (RVV) entstehen durch verschiedene Risikofaktoren: Ein Blutgerinnsel, das sich in einer Stelle der Vene festsetzt oder durch Bluthochdruck mit und ohne Arteriosklerose veränderte Arterien, die benachbarte Venen komprimieren. Dadurch steigt der Druck in den Augenvenen. Es können Netzhautblutungen, Ödeme, Gefäßwucherungen oder sogar Netzhautablösungen entstehen. Retinale Venenverschlüsse führen zu Einbußen der Sehschärfe. Patienten sehen verschwommen oder auch einen „grauen Vorhang“. Je schneller die Therapie erfolgt, desto höher liegen die Behandlungschancen. Injektionen mit einem VEGF-Hemmer in den Glaskörper sind wirksam. Daneben werden Injektionen von Kortisonimplantaten oder Laserbehandlungen eingesetzt sowie durch kontrollierte Blutverdünnung (Hämodilution) die Fließfähigkeiten des Blutes gefördert.  <h2>Myope choroidale Neovaskularisation</h2> In Europa ist die durch Myopie (Kurzsichtigkeit) entstehende choroidale Neovaskularisation (CNV) die siebthäufigste Erblindungsursache. Es sind vor allem junge, noch berufstätige Patienten betroffen. In der jüngeren Erwachsenenbevölkerung ist die Myopie die häufigste Ursache einer CNV. Eine sehr hohe (pathologische) Myopie kann sich zu einer myopiebedingten choriodalen Neovaskularisation (myopische CNV) entwickeln. Aus neuen, krankhaften Blutgefäßen in der Choroidea kann Flüssigkeit austreten und ein lokales Ödem verursachen. Dies führt in der Makula zu verschwommener Sicht, Metamorphopsien und blinden oder grauen Flecken im Zentrum des Sichtfeldes bis hin zum Sehverlust. Als Behandlungen können eingesetzt werden - die intravitreale-VEGF-Hemmer-Therapie, - eher selten eine Hochenergielaserkoagulation - oder eine Kombination aus einem Medikament, das krankhafte Gefäße der Aderhaut lichtempfindlich macht ( (Photosensibilisierung), und einem niedrig-energetischen Laserlicht (photodynamische Therapie).
			static func diagnoseInstruction(_: Void = ()) -> String {
				return NSLocalizedString("DiagnoseInstruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: <h2>Amsler-Test</h2> Der Amsler-Test wird zum frühzeitigen Erkennen von subjektiver Sehstörung mit verzerrter Wahrnehmung der Umwelt, sogenannten Metamorphopsien, eingesetzt. Er eignet sich zur Selbstkontrolle. Mit dem Amslergitter (auch Amsler-Netz genannt) können Augen auf ihre Funktionalität und Gesichtsfeldausfälle getestet werden. Decken Sie ein Auge ab und fixieren Sie mit dem anderen den Punkt in der Mitte. Halten Sie dabei einen normalen Leseabstand von 30-40 cm ein. Wenn Sie eine Lesebrille tragen, setzen Sie diese auch zum Test auf. Anschließend testen Sie das andere Auge, ebenfalls unter Abdeckung des Partnerauges. Erkennen Sie den Punkt in der Mitte nicht, sehen Sie verschwommene Stellen, Löcher, Schleier, unterschiedlich große Kästchen oder gebogene Linien, suchen Sie Ihren Arzt auf. In dieser App finden Sie auch einen Amsler-Test. Sie können damit verfolgen, ob sich Änderungen ergeben haben. Wenn ja, teilen Sie dies Ihrem Arzt mit. Empfehlung: Führen Sie den Test regelmäßig im Abstand von 1-2 Wochen oder bei dem Gefühl der Sehverschlechterung unmittelbar durch.
			static func amslertestInstruction(_: Void = ()) -> String {
				return NSLocalizedString("AmslertestInstruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: <h2>Diabetisches Makulaödem</h2> In Deutschland leben circa 8 Millionen Menschen mit Diabetes mellitus. Die chronische Stoffwechselerkrankung wirkt sich auch auf das Auge aus. Zu hohe Blutzuckerwerte schädigen auf Dauer die feinen Netzhautgefäße. Bei schlechter Einstellung erkrankt jeder fünfte Diabetiker an diabetischer Retinopathie. Aus dieser kann sich ein Diabetisches Makulaödem (DMÖ) entwickeln. 40 Prozent aller Typ-1-Diabetiker und 20 Prozent der Typ-2- Diabetiker sind von DMÖ betroffen. Im Frühstadium verläuft das diabetische Makulaödem unbemerkt. Sehbeeinträchtigungen treten meist erst dann auf, wenn die Netzhautschäden schon weit fortgeschritten und damit schlechter zu behandeln sind. Im fortgeschrittenen Stadium kommt es zum Sehverlust auch durch Einblutungen in den Glaskörper des Auges oder durch Narbenbildung mit Netzhautablösung. Therapeutisch kommen bei einem DMÖ Injektionen mit VEGF-Hemmern oder Cortison-Präparaten sowie Laserverfahren zum Einsatz. Sollten Sie an Diabetes erkrankt sein, sind regelmäßige und frühzeitige Untersuchungen beim Augenarzt als Vorsorgemaßnahmen, die eine rechtzeitige Diagnose und eventuelle Therapie ermöglichen, wichtig für die Augengesundheit.
			static func dmoInstruction(_: Void = ()) -> String {
				return NSLocalizedString("DmoInstruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: <h2>Disclaimer und Hauptmenü</h2> Wenn Sie die Makula App zum ersten Mal starten, werden Sie gebeten dem Disclaimer zuzustimmen. Tippen Sie dazu auf „Bestätigt“. Ohne diese Bestätigung können Sie die App nicht nutzen. Nachdem Sie Ihre Zustimmung bestätigt haben, erscheint die Startseite. Hier gibt es acht Menüpunkte. Bei den ersten 5 Menüpunkten sehen Sie eine hellblaue Schrift auf einem dunklen Hintergrund. Dieser Teil ist Ihr „Digitaler Assistent”. Bei den unteren drei Menüpunkten haben wir eine dunkelfarbige Schrift auf einem hellen Hintergrund; dies ist der Teil „Informiert sein“.Unter den einzelnen Menüpunkten verbergen sich folgende Funktionen:  <h2>Digitaler Assistent</h2> ARZTBESUCH: •  Datum des Termins  (=Injektion), Nachsorge, OCT-Kontrolle, Sonstige) •  Diagnose: diese ändert sich in der Regel nicht und muss daher nur beim ersten Besuch angegeben werden •  Medikamente: in der Regel wird immer dasselbe Medikament bei einer Injektion verabreicht. Es kann medizinische Gründe geben, die den Wechsel auf ein anderes Präparat bedingen. Dann sollten Sie das hier dokumentieren. Sie können zusätzlich die Notizfunktion des Termins nutzen •  Visus-Eingabe: Sie erhalten den Visus von Ihrem Augenarzt. Bitte geben Sie diesen getrennt für jedes Auge ein. •  NH-Dicke-Eingabe: NH steht für Netzhautdicke und ist ein Indikator für Ihre Erkrankung. Dieser Wert wird in einer OCT-Untersuchung ermittelt und Sie erfahren ihn von Ihrem Augenarzt. •  OCT und Visus rechts und links: Hier sehen Sie im zeitlichen Verlauf Ihre Werte im Diagramm für das rechte und das linke Auge. TERMINE Hier können Sie Ihre nächsten Termine beim Augenarzt verwalten. Zur Übersicht werden die Termine nach Art farblich unterschieden. Sie haben die Möglichkeit, zusätzliche Notizen zum Termin hinzuzufügen. Die Termine finden sich im internen App-Kalender KALENDER Hier sehen Sie alle Termine der Zukunft und Vergangenheit in der Übersicht. Über das „+“-Symbol können Sie ebenfalls neue Termine hinzufügen analog zum Menüpunkt Termine des Hauptmenüs. Zudem enthalten die Termine alle Ergebnisse des Arztbesuches noch einmal hinterlegt sowie die Ergebnisse der Selbsttests an den Tagen der Durchführung. So können Sie nachvollziehen, wie die Entwicklung Ihrer Sehfähigkeit der letzten zwei Jahre war. Auch kann bei einem Wechsel des Augenarztes die vergangene Behandlung sehr gut dokumentiert vorgelegt werden. KONTAKTE Hier haben Sie die Möglichkeit, Ihre Ansprechpartner zu hinterlegen und direkt zu kontaktieren. Dazu zählen neben Ihren Augenarzt auch Kliniken für Injektionen, Beratungsstellen, Hausarzt und weitere. SELBSTTESTS Unter Selbsttests finden Sie zum einen das Amslergitter sowie einen Lesetest. Diese helfen Ihnen, Ihre Sehfähigkeit selbstständig regelmäßig zu kontrollieren. Die Ergebnisse werden lokal im App-Kalender hinterlegt.  <h2>Informiert sein</h2> WISSEN / INFORMATION Im Bereich „Wissen / Information“ können Sie sich über alle Aspekte Ihrer Erkrankung informieren. Zusätzlich gibt es einen Überblick über Hilfsmittel und Sehhilfen sowie praktische Tipps. Für weiterführende Informationen wird in den einzelnen Themen direkt auf die Website des AMD-Netz verlinkt. Die Wissensbereiche sind dann wiederum in die einzelnen Themen untergliedert und mit kurzen Informationen angereichert. Für weitere Informationen gibt es unter den einzelnen Themen Links zur Website des AMD-Netz. ADRESVERZEICHNIS Im Adressverzeichnis finden Sie Adressen von verschiedenen Ansprechpartnern in Ihrer Nähe. Diese Funktion ist nur im Online-modus nutzbar, da aktuelle Informationen direkt abgerufen werden. WEITERE HINWEISE Sie können die Schrift innerhalb der App vergrößern, indem Sie das Smartphone um 90° von der vertikalen in die horizontale Ansicht drehen. Außerdem können Sie sich den Text vorlesen lassen, wenn Sie auf das Lautsprecher Symbol oben rechts tippen. Die Menüpunkte werden nacheinander aufleuchten und vorgelesen.
			static func manualInstruction(_: Void = ()) -> String {
				return NSLocalizedString("ManualInstruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: <h2>Lesetest</h2> Dieser Lesetest dient der Selbstkontrolle. Er ist individuell und auf Ihrem Smartphone aussagekräftig. Halten Sie bitte Ihr Endgerät bei jeder Nutzung in der gleichen Position und in einem vergleichbaren Leseabstand von 30-40 cm. Sie können hier verfolgen, ob sich bei Ihnen Änderungen ergeben haben. Halten Sie jeweils ein Auge zu und testen Sie beide Seiten einzeln. Sie können das Ergebnis für beide Augen getrennt markieren. Wenn sich Änderungen ergeben haben, teilen Sie dies Ihrem Arzt mit. Empfehlung: Führen Sie den Lese-Test regelmäßig im Abstand von 2 Wochen, bei Verschlechterung unmittelbar durch.
			static func readingtestInstruction(_: Void = ()) -> String {
				return NSLocalizedString("ReadingtestInstruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: <h2>Myope choroidale Neovaskularisation</h2> In Europa ist die durch Myopie (Kurzsichtigkeit) entstehende choroidale Neovaskularisation (CNV) die siebthäufigste Erblindungsursache. Es sind vor allem junge, noch berufstätige Patienten betroffen. In der jüngeren Erwachsenenbevölkerung ist die Myopie die häufigste Ursache einer CNV. Eine sehr hohe (pathologische) Myopie kann sich zu einer myopiebedingten choriodalen Neovaskularisation (myopische CNV) entwickeln. Aus neuen, krankhaften Blutgefäßen in der Choroidea kann Flüssigkeit austreten und ein lokales Ödem verursachen. Dies führt in der Makula zu verschwommener Sicht, Metamorphopsien und blinden oder grauen Flecken im Zentrum des Sichtfeldes bis hin zum Sehverlust. Als Behandlungen können eingesetzt werden - die intravitreale-VEGF-Hemmer-Therapie, - eher selten eine Hochenergielaserkoagulation - oder eine Kombination aus einem Medikament, das krankhafte Gefäße der Aderhaut lichtempfindlich macht (Photosensibilisierung), und einem niedrig-energetischen Laserlicht (photodynamische Therapie).
			static func mcnvInstruction(_: Void = ()) -> String {
				return NSLocalizedString("McnvInstruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: <h2>NHD</h2> Viele Augenerkrankungen wirken sich durch eine Veränderung der Netzhautdicke aus. Deswegen ist für die Diagnose sehr wichtig, Wert und Veränderungen der Netzhautdicke durch die optische Cohärenz-Tomographie (OCT) zu messen. Bitte erfragen Sie den Wert in Ihrer Praxis.
			static func nhdInstruction(_: Void = ()) -> String {
				return NSLocalizedString("NhdInstruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: <h2>Retinaler Venenverschluss</h2> Bei einem Retinalen Venenverschluss (RVV) kann das Blut aufgrund einer Netzhautvenenerkrankung nicht mehr ungehindert abfließen. Retinale Venenverschlüsse (RVV) entstehen durch verschiedene Risikofaktoren: Ein Blutgerinnsel, das sich in einer Stelle der Vene festsetzt oder durch Bluthochdruck mit und ohne Arteriosklerose veränderte Arterien, die benachbarte Venen komprimieren. Dadurch steigt der Druck in den Augenvenen. Es können Netzhautblutungen, Ödeme, Gefäßwucherungen oder sogar Netzhautablösungen entstehen. Retinale Venenverschlüsse führen zu Einbußen der Sehschärfe. Patienten sehen verschwommen oder auch einen „grauen Vorhang“. Je schneller die Therapie erfolgt, desto höher liegen die Behandlungschancen. Injektionen mit einem VEGF-Hemmer in den Glaskörper sind wirksam. Daneben werden Injektionen von Kortisonimplantaten oder Laserbehandlungen eingesetzt sowie durch kontrollierte Blutverdünnung (Hämodilution) die Fließfähigkeiten des Blutes gefördert.
			static func rvvInstruction(_: Void = ()) -> String {
				return NSLocalizedString("RvvInstruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: <h2>Visus</h2> Unter der Sehschärfe bzw. dem Visus versteht man das Potenzial des Auges diverse Umweltstrukturen wahrzunehmen und zu erkennen. Die Sehschärfe ist eine messbare Größe, die in der Diagnostik eine Rolle spielt. Zur Bestimmung des Visus werden beim Augenarzt oder Optiker Sehzeichen projiziert oder Schrifttafeln gezeigt mit Zahlen, Buchstaben oder abstrakten Zeichen (z.B. E-Haken oder Landolt-Ringe). Bitte erfragen Sie den Wert in Ihrer Praxis.
			static func visusInstruction(_: Void = ()) -> String {
				return NSLocalizedString("VisusInstruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: AMD
			static func amdInfoTitle(_: Void = ()) -> String {
				return NSLocalizedString("AmdInfoTitle", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: AMD
			static func illnessInfo0Title(_: Void = ()) -> String {
				return NSLocalizedString("IllnessInfo0Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Adressverzeichnis
			static func addressesTitle(_: Void = ()) -> String {
				return NSLocalizedString("AddressesTitle", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Aktive Prävention: Durch regelmäßige körperliche Bewegung können Sie Ihr Risiko für eine Makuladegeneration nachweislich erheblich senken.
			static func activitiesInfo1Instruction(_: Void = ()) -> String {
				return NSLocalizedString("ActivitiesInfo1Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Aktive Prävention: Durch regelmäßige körperliche Bewegung können Sie Ihr Risiko für eine Makuladegeneration nachweislich erheblich senken.
			static func activitiesInfo1SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("ActivitiesInfo1SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Aktuelles
			static func newsTitle(_: Void = ()) -> String {
				return NSLocalizedString("NewsTitle", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Alltagshilfen
			static func aidInfo7Title(_: Void = ()) -> String {
				return NSLocalizedString("AidInfo7Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Als Makula oder gelber Fleck wird die Netzhautmitte bezeichnet, der Punkt des schärfsten Sehens. Hier befinden sich die meisten Sinneszellen des Auges. Der Bereich der Makula ist für das Farbensehen und die feinste Bildauflösung verantwortlich. Der Sehnerv leitet diese Information an das Gehirn weiter.
			static func illnessInfo5Instruction(_: Void = ()) -> String {
				return NSLocalizedString("IllnessInfo5Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Als Makula oder gelber Fleck wird die Netzhautmitte bezeichnet, der Punkt des schärfsten Sehens. Hier befinden sich die meisten Sinneszellen des Auges. Der Bereich der Makula ist für das Farbensehen und die feinste Bildauflösung verantwortlich. Der Sehnerv leitet diese Information an das Gehirn weiter.
			static func illnessInfo5SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("IllnessInfo5SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Alternative
			static func therapyInfo0Title(_: Void = ()) -> String {
				return NSLocalizedString("TherapyInfo0Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Altersabhängige Makuladegeneration. Die AMD ist eine Erkrankung der Makula, dem Punkt des schärfsten Sehens der zentralen Netzhaut im hinteren Auge. Sie tritt vorwiegend bei Menschen ab einem Lebensalter von 55 Jahren auf. Neben dem Haupt-Risikofaktor Lebensalter kann für eine AMD eine erbliche Vorbelastung bestehen. Das individuelle Risiko an einer AMD zu erkranken steigt je mehr Risikofaktoren vorliegen. In Deutschland geht man aktuell von etwa 4,5 Millionen Betroffenen aus. Frühe und mittlere Stadien sind meist mit nur geringen Symptomen assoziiert, während es bei Spätstadien oft zu einem erheblichen Verlust an Sehschärfe und zentralem Gesichtsfeld kommt. Die Erkrankung kann an beiden Augen eines Patienten unterschiedlich verlaufen. Eine späte AMD kann als eine sogenannte „feuchte“ (neovaskuläre AMD, nAMD) und eine sogenannte „trockene“ Form (Geografische Atrophie, GA) auftreten, in manchen Fällen auch als eine Kombination aus beidem. Eine späte AMD hat eine erhebliche Minderung des zentralen Sehvermögens in der Ferne und beim Lesen zur Folge: Betroffene verlieren die Fähigkeit, scharf zu sehen. Es gibt bislang keine spezifische Therapie der frühen und mittleren AMD, die ein Voranschreiten verlangsamt, aufhält oder zu einer Heilung der Erkrankung in diesem Stadium führt. Auch für die trockene Spätform existiert bislang keine zugelassene, wirksame Therapie zur Verlangsamung des Fortschreitens der Erkrankung. Bei Patienten mit „trockenen“ Frühformen ist unter bestimmten Voraussetzungen die Einnahme von entsprechend dosierten Nahrungsergänzungsmitteln sinnvoll. Im Gegensatz zu den trockenen Formen lässt sich die feuchte Form mit Medikamenten wirksam behandeln. Verschiedene Wirkstoffe, die unter OP-Bedingungen schmerzfrei direkt ins Auge gespritzt werden, können helfen, die Sehkraft zumindest vorübergehend zu verbessern oder länger zu erhalten.
			static func amdSpeechText(_: Void = ()) -> String {
				return NSLocalizedString("AmdSpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Altersabhängige Makuladegeneration. Die AMD ist eine Erkrankung der Makula, dem Punkt des schärfsten Sehens der zentralen Netzhaut im hinteren Auge. Sie tritt vorwiegend bei Menschen ab einem Lebensalter von 55 Jahren auf. Neben dem Haupt-Risikofaktor Lebensalter kann für eine AMD eine erbliche Vorbelastung bestehen. Das individuelle Risiko an einer AMD zu erkranken steigt je mehr Risikofaktoren vorliegen. In Deutschland geht man aktuell von etwa 4,5 Millionen Betroffenen aus. Frühe und mittlere Stadien sind meist mit nur geringen Symptomen assoziiert, während es bei Spätstadien oft zu einem erheblichen Verlust an Sehschärfe und zentralem Gesichtsfeld kommt. Die Erkrankung kann an beiden Augen eines Patienten unterschiedlich verlaufen. Eine späte AMD kann als eine sogenannte „feuchte“ (neovaskuläre AMD, nAMD) und eine sogenannte „trockene“ Form (Geografische Atrophie, GA) auftreten, in manchen Fällen auch als eine Kombination aus beidem. Eine späte AMD hat eine erhebliche Minderung des zentralen Sehvermögens in der Ferne und beim Lesen zur Folge: Betroffene verlieren die Fähigkeit, scharf zu sehen. Es gibt bislang keine spezifische Therapie der frühen und mittleren AMD, die ein Voranschreiten verlangsamt, aufhält oder zu einer Heilung der Erkrankung in diesem Stadium führt. Auch für die trockene Spätform existiert bislang keine zugelassene, wirksame Therapie zur Verlangsamung des Fortschreitens der Erkrankung. Bei Patienten mit „trockenen“ Frühformen ist unter bestimmten Voraussetzungen die Einnahme von entsprechend dosierten Nahrungsergänzungsmitteln sinnvoll. Im Gegensatz zu den trockenen Formen lässt sich die feuchte Form mit Medikamenten wirksam behandeln. Verschiedene Wirkstoffe, die unter OP-Bedingungen schmerzfrei direkt ins Auge gespritzt werden, können helfen, die Sehkraft zumindest vorübergehend zu verbessern oder länger zu erhalten. Diabetisches Makulaödem. In Deutschland leben circa 8 Millionen Menschen mit Diabetes mellitus. Die chronische Stoffwechselerkrankung wirkt sich auch auf das Auge aus. Zu hohe Blutzuckerwerte schädigen auf Dauer die feinen Netzhautgefäße. Bei schlechter Einstellung erkrankt jeder fünfte Diabetiker an diabetischer Retinopathie. Aus dieser kann sich ein Diabetisches Makulaödem (DMÖ) entwickeln. 40 Prozent aller Typ-1-Diabetiker und 20 Prozent der Typ-2- Diabetiker sind von DMÖ betroffen. Im Frühstadium verläuft das diabetische Makulaödem unbemerkt. Sehbeein¬trächti-gungen treten meist erst dann auf, wenn die Netzhautschäden schon weit fortge-schritten und damit schlechter zu behandeln sind. im fortgeschrittenen Stadium kommt es zum Sehverlust auch durch Einblutungen in den Glaskörper des Auges oder durch Narbenbildung mit Netzhautablösung. Therapeutisch kommen bei einem DMÖ Injektionen mit VEGF-Hemmern oder Cortison-Präparaten sowie Laserverfahren zum Einsatz. Sollten Sie an Diabetes erkrankt sein, sind regelmäßige und frühzeitige Unter¬suchun-gen beim Augenarzt als Vorsorgemaßnahmen, die eine rechtzeitige Diagnose und eventuelle Therapie ermöglichen, wichtig für die Augengesundheit. Retinaler Venenverschluss. Bei einem Retinalen Venenverschluss (RVV) kann das Blut aufgrund einer Netzhautvenenerkrankung nicht mehr ungehindert abfließen. Retinale Venenverschlüsse (RVV) entstehen durch verschiedene Risikofaktoren: Ein Blutgerinnsel, das sich in einer Stelle der Vene festsetzt oder durch Bluthochdruck mit und ohne Arteriosklerose veränderte Arterien, die benachbarte Venen komprimieren. Dadurch steigt der Druck in den Augenvenen. Es können Netzhautblutungen, Ödeme, Gefäßwucherungen oder sogar Netzhautablösungen entstehen. Retinale Venenverschlüsse führen zu Einbußen der Sehschärfe. Patienten sehen verschwommen oder auch einen „grauen Vorhang“. Je schneller die Therapie erfolgt, desto höher liegen die Behandlungschancen. Injektionen mit einem VEGF-Hemmer in den Glaskörper sind wirksam. Daneben werden Injektionen von Kortisonimplantaten oder Laserbehandlungen eingesetzt sowie durch kontrollierte Blutverdünnung (Hämodilution) die Fließfähigkeiten des Blutes gefördert. Myope choroidale Neovaskularisation. In Europa ist die durch Myopie (Kurzsichtigkeit) entstehende choroidale Neovaskularisation (CNV) die siebthäufigste Erblindungsursache. Es sind vor allem junge, noch berufstätige Patienten betroffen. In der jüngeren Erwachsenenbevölkerung ist die Myopie die häufigste Ursache einer CNV. Eine sehr hohe (pathologische) Myopie kann sich zu einer myopiebedingten choriodalen Neovaskularisation (myopische CNV) entwickeln. Aus neuen, krankhaften Blutgefäßen in der Choroidea kann Flüssigkeit austreten und ein lokales Ödem verursachen. Dies führt in der Makula zu verschwommener Sicht, Metamorphopsien und blinden oder grauen Flecken im Zentrum des Sichtfeldes bis hin zum Sehverlust. Als Behandlungen können eingesetzt werden - die intravitreale-VEGF-Hemmer-Therapie, - eher selten eine Hochenergielaserkoagulation - oder eine Kombination aus einem Medikament, das krankhafte Gefäße der Aderhaut lichtempfindlich macht ( (Photosensibilisierung), und einem niedrig-energetischen Laserlicht (photodynamische Therapie).
			static func diagnoseSpeechText(_: Void = ()) -> String {
				return NSLocalizedString("DiagnoseSpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Amsler-Test
			static func activitiesInfo0Title(_: Void = ()) -> String {
				return NSLocalizedString("ActivitiesInfo0Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Amsler-Test. Der Amsler-Test wird zum frühzeitigen Erkennen von subjektiver Sehstörung mit verzerrter Wahrnehmung der Umwelt, sogenannten Metamorphopsien, eingesetzt. Er eignet sich zur Selbstkontrolle. Mit dem Amslergitter (auch Amsler-Netz genannt) können Augen auf ihre Funktionalität und Gesichtsfeldausfälle getestet werden. Decken Sie ein Auge ab und fixieren Sie mit dem anderen den Punkt in der Mitte. Halten Sie dabei einen normalen Leseabstand von 30-40 cm ein. Wenn Sie eine Lesebrille tragen, setzen Sie diese auch zum Test auf. Anschließend testen Sie das andere Auge, ebenfalls unter Abdeckung des Partnerauges. Erkennen Sie den Punkt in der Mitte nicht, sehen Sie verschwommene Stellen, Löcher, Schleier, unterschiedlich große Kästchen oder gebogene Linien, suchen Sie Ihren Arzt auf. In dieser App finden Sie auch einen Amsler-Test. Sie können damit verfolgen, ob sich Änderungen ergeben haben. Wenn ja, teilen Sie dies Ihrem Arzt mit. Empfehlung: Führen Sie den Test regelmäßig im Abstand von 1-2 Wochen oder bei dem Gefühl der Sehverschlechterung unmittelbar durch.
			static func amslertestSpeechText(_: Void = ()) -> String {
				return NSLocalizedString("AmslertestSpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Angaben gemäß § 5 TMG AMD-Netz e.V. Hohenzollernring 56 48145 Münster Vertreten durch den Vorstand: PD Dr. Klaus Dieter Lemmen Prof. Dr. Daniel Pauleikhoff Registereintrag: Eintragung im Vereinsregiste Registergericht: Amtsgericht Münster  Vereinsregisternummer: 5065 Aufsichtsbehörde: Berufsbezeichnung:Ärzte Zuständige Kammer:  Ärztekammern Nordrhein und Westfalen-Lippe Verliehen durch: Bundesrepublik Deutschland Es gelten folgende berufsrechtliche Regelungen: Bürgerliches Gesetzbuch, Berufsordung für Ärzte  Diese App wird betrieben von Johannes Vegt c/o appamedix Bismarckstr. 10-12 10625 Berlin StIdNr: 74580296162 UmsztSt.IdNr: DE136442400  Verantwortlich für den Inhalt nach § 55 Abs. 2 RStV: Prof. Dr. Daniel Pauleikhoff Telefon: +49 (0) 251 – 935 59 40 Fax: +49 (0) 251 – 935 59 47 E-Mail: info(at)amd-netz.de Internet: <a>www.amd-netz.de</a>  App-Entwicklung: appamedix UG Innovations-Centrum chic Bismarckstraße 10-12 10625 Berlin  Haftungsausschluss:  <h2>Haftung für Inhalte</h2> Die Inhalte unserer App wurden mit größter Sorgfalt erstellt. Für die Richtigkeit, Vollständigkeit und Aktualität der Inhalte können wir jedoch keine Gewähr übernehmen. Als Diensteanbieter sind wir gemäß § 7 Abs.1 TMG für eigene Inhalte auf diesen Seiten nach den allgemeinen Gesetzen verantwortlich. Nach §§ 8 bis 10 TMG sind wir als Diensteanbieter jedoch nicht verpflichtet, übermittelte oder gespeicherte fremde Informationen zu überwachen oder nach Umständen zu forschen, die auf eine rechtswidrige Tätigkeit hinweisen. Verpflichtungen zur Entfernung oder Sperrung der Nutzung von Informationen nach den allgemeinen Gesetzen bleiben hiervon unberührt. Eine diesbezügliche Haftung ist jedoch erst ab dem Zeitpunkt der Kenntnis einer konkreten Rechtsverletzung möglich. Bei Bekanntwerden von entsprechenden Rechtsverletzungen werden wir diese Inhalte umgehend entfernen.  <h2>Haftung für Links</h2> Unser Angebot enthält Links zu externen Webseiten Dritter, auf deren Inhalte wir keinen Einfluss haben. Deshalb können wir für diese fremden Inhalte auch keine Gewähr übernehmen. Für die Inhalte der verlinkten Seiten ist stets der jeweilige Anbieter oder Betreiber der Seiten verantwortlich. Die verlinkten Seiten wurden zum Zeitpunkt der Verlinkung auf mögliche Rechtsverstöße überprüft. Rechtswidrige Inhalte waren zum Zeitpunkt der Verlinkung nicht erkennbar. Eine permanente inhaltliche Kontrolle der verlinkten Seiten ist jedoch ohne konkrete Anhaltspunkte einer Rechtsverletzung nicht zumutbar. Bei Bekanntwerden von Rechtsverletzungen werden wir derartige Links umgehend entfernen.  <h2>Urheberrecht</h2> Die durch die Seitenbetreiber erstellten Inhalte und Werke auf diesen Seiten unterliegen dem deutschen Urheberrecht. Die Vervielfältigung, Bearbeitung, Verbreitung und jede Art der Verwertung außerhalb der Grenzen des Urheberrechtes bedürfen der schriftlichen Zustimmung des jeweiligen Autors bzw. Erstellers. Downloads und Kopien dieser Seite sind nur für den privaten, nicht kommerziellen Gebrauch gestattet. Soweit die Inhalte auf dieser Seite nicht vom Betreiber erstellt wurden, werden die Urheberrechte Dritter beachtet. Insbesondere werden Inhalte Dritter als solche gekennzeichnet. Sollten Sie trotzdem auf eine Urheberrechtsverletzung aufmerksam werden, bitten wir um einen entsprechenden Hinweis. Bei Bekanntwerden von Rechtsverletzungen werden wir derartige Inhalte umgehend entfernen.  <h2>Datenschutz</h2> Die Nutzung unserer App ist in der Regel ohne Angabe personenbezogener Daten möglich. Es werden seitens des Anbieters keine personenbezogene Daten (beispielsweise Name, Anschrift oder eMail-Adressen, medizinische Parameter) erhoben und übertragen. Wenn die App aufgerufen wird, wird automatisch die IP-Adresse gespeichert. Die gespeicherten Angaben dienen nur zu statistischen Zwecken, zur Auswertung der Aufrufe- und Downloadzahlen. In keinem Fall verwenden wie die erhobenen Daten zu dem Zweck, Rückschlüsse auf die Person der Nutzer unserer App zu ziehen. Soweit Inhalte unserer App auf die Homepage des AMD-Netzes verweisen, werden die dort niedergelegten Regelungen zum Datenschutz angewandt. <a>https://www.amd-netz.de/datenschutz</a> Wir weisen darauf hin, dass die Datenübertragung im Internet Sicherheitslücken aufweisen kann. Ein lückenloser Schutz der Daten vor dem Zugriff durch Dritte ist nicht möglich. Der Nutzung von im Rahmen der Impressumspflicht veröffentlichten Kontaktdaten durch Dritte zur Übersendung von nicht ausdrücklich angeforderter Werbung und Informationsmaterialien wird hiermit ausdrücklich widersprochen. Die Betreiber der App behalten sich ausdrücklich rechtliche Schritte im Falle der unverlangten Zusendung von Werbeinformationen, etwa durch Spam-Mails, vor.
			static func inprintInstruction(_: Void = ()) -> String {
				return NSLocalizedString("InprintInstruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Angaben gemäß § 5 TMG AMD-Netz e.V. Hohenzollernring 56 48145 Münster Vertreten durch den Vorstand: PD Dr. Klaus Dieter Lemmen Prof. Dr. Daniel Pauleikhoff Registereintrag: Eintragung im Vereinsregiste Registergericht: Amtsgericht Münster  Vereinsregisternummer: 5065 Aufsichtsbehörde: Berufsbezeichnung:Ärzte Zuständige Kammer:  Ärztekammern Nordrhein und Westfalen-Lippe Verliehen durch: Bundesrepublik Deutschland Es gelten folgende berufsrechtliche Regelungen: Bürgerliches Gesetzbuch, Berufsordung für Ärzte  Diese App wird betrieben von Johannes Vegt c/o appamedix Bismarckstr. 10-12 10625 Berlin StIdNr: 74580296162 UmsztSt.IdNr: DE136442400  Verantwortlich für den Inhalt nach § 55 Abs. 2 RStV: Prof. Dr. Daniel Pauleikhoff Telefon: +49 (0) 251 – 935 59 40 Fax: +49 (0) 251 – 935 59 47 E-Mail: info(at)amd-netz.de Internet: www.amd-netz.de  App-Entwicklung: appamedix UG Innovations-Centrum chic Bismarckstraße 10-12 10625 Berlin  Haftungsausschluss: Haftung für Inhalte. Die Inhalte unserer App wurden mit größter Sorgfalt erstellt. Für die Richtigkeit, Vollständigkeit und Aktualität der Inhalte können wir jedoch keine Gewähr übernehmen. Als Diensteanbieter sind wir gemäß § 7 Abs.1 TMG für eigene Inhalte auf diesen Seiten nach den allgemeinen Gesetzen verantwortlich. Nach §§ 8 bis 10 TMG sind wir als Diensteanbieter jedoch nicht verpflichtet, übermittelte oder gespeicherte fremde Informationen zu überwachen oder nach Umständen zu forschen, die auf eine rechtswidrige Tätigkeit hinweisen. Verpflichtungen zur Entfernung oder Sperrung der Nutzung von Informationen nach den allgemeinen Gesetzen bleiben hiervon unberührt. Eine diesbezügliche Haftung ist jedoch erst ab dem Zeitpunkt der Kenntnis einer konkreten Rechtsverletzung möglich. Bei Bekanntwerden von entsprechenden Rechtsverletzungen werden wir diese Inhalte umgehend entfernen. Haftung für Links. Unser Angebot enthält Links zu externen Webseiten Dritter, auf deren Inhalte wir keinen Einfluss haben. Deshalb können wir für diese fremden Inhalte auch keine Gewähr übernehmen. Für die Inhalte der verlinkten Seiten ist stets der jeweilige Anbieter oder Betreiber der Seiten verantwortlich. Die verlinkten Seiten wurden zum Zeitpunkt der Verlinkung auf mögliche Rechtsverstöße überprüft. Rechtswidrige Inhalte waren zum Zeitpunkt der Verlinkung nicht erkennbar. Eine permanente inhaltliche Kontrolle der verlinkten Seiten ist jedoch ohne konkrete Anhaltspunkte einer Rechtsverletzung nicht zumutbar. Bei Bekanntwerden von Rechtsverletzungen werden wir derartige Links umgehend entfernen. Urheberrecht. Die durch die Seitenbetreiber erstellten Inhalte und Werke auf diesen Seiten unterliegen dem deutschen Urheberrecht. Die Vervielfältigung, Bearbeitung, Verbreitung und jede Art der Verwertung außerhalb der Grenzen des Urheberrechtes bedürfen der schriftlichen Zustimmung des jeweiligen Autors bzw. Erstellers. Downloads und Kopien dieser Seite sind nur für den privaten, nicht kommerziellen Gebrauch gestattet. Soweit die Inhalte auf dieser Seite nicht vom Betreiber erstellt wurden, werden die Urheberrechte Dritter beachtet. Insbesondere werden Inhalte Dritter als solche gekennzeichnet. Sollten Sie trotzdem auf eine Urheberrechtsverletzung aufmerksam werden, bitten wir um einen entsprechenden Hinweis. Bei Bekanntwerden von Rechtsverletzungen werden wir derartige Inhalte umgehend entfernen. Datenschutz. Die Nutzung unserer App ist in der Regel ohne Angabe personenbezogener Daten möglich. Es werden seitens des Anbieters keine personenbezogene Daten (beispielsweise Name, Anschrift oder eMail-Adressen, medizinische Parameter) erhoben und übertragen. Wenn die App aufgerufen wird, wird automatisch die IP-Adresse gespeichert. Die gespeicherten Angaben dienen nur zu statistischen Zwecken, zur Auswertung der Aufrufe- und Downloadzahlen. In keinem Fall verwenden wie die erhobenen Daten zu dem Zweck, Rückschlüsse auf die Person der Nutzer unserer App zu ziehen. Soweit Inhalte unserer App auf die Homepage des AMD-Netzes verweisen, werden die dort niedergelegten Regelungen zum Datenschutz angewandt. https://www.amd-netz.de/datenschutz Wir weisen darauf hin, dass die Datenübertragung im Internet Sicherheitslücken aufweisen kann. Ein lückenloser Schutz der Daten vor dem Zugriff durch Dritte ist nicht möglich. Der Nutzung von im Rahmen der Impressumspflicht veröffentlichten Kontaktdaten durch Dritte zur Übersendung von nicht ausdrücklich angeforderter Werbung und Informationsmaterialien wird hiermit ausdrücklich widersprochen. Die Betreiber der App behalten sich ausdrücklich rechtliche Schritte im Falle der unverlangten Zusendung von Werbeinformationen, etwa durch Spam-Mails, vor.
			static func inprintSpeechText(_: Void = ()) -> String {
				return NSLocalizedString("InprintSpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Anleitung
			static func amslertestInfoTitle(_: Void = ()) -> String {
				return NSLocalizedString("AmslertestInfoTitle", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Anleitung
			static func readingtestInfoTitle(_: Void = ()) -> String {
				return NSLocalizedString("ReadingtestInfoTitle", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Augenspiegelung
			static func examinationInfo0Title(_: Void = ()) -> String {
				return NSLocalizedString("ExaminationInfo0Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Backup
			static func backupTitle(_: Void = ()) -> String {
				return NSLocalizedString("BackupTitle", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Bedienung
			static func manualTitle(_: Void = ()) -> String {
				return NSLocalizedString("ManualTitle", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Behandlung
			static func illnessInfo4Title(_: Void = ()) -> String {
				return NSLocalizedString("IllnessInfo4Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Bei der hochauflösenden Optischen Cohärenz Tomografie (O C T) wird die Netzhaut im Rahmen einer berührungsfreien Untersuchung mit Laserstrahlen abgetastet. Die reflektierten Laserstrahlen ergeben ein Schnittbild der Netzhautstruktur und ermöglichen damit eine sehr detaillierte Untersuchung der Makula.
			static func examinationInfo4SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("ExaminationInfo4SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Bei der hochauflösenden Optischen Cohärenz Tomografie (OCT) wird die Netzhaut im Rahmen einer berührungsfreien Untersuchung mit Laserstrahlen abgetastet. Die reflektierten Laserstrahlen ergeben ein Schnittbild der Netzhautstruktur und ermöglichen damit eine sehr detaillierte Untersuchung der Makula.
			static func examinationInfo4Instruction(_: Void = ()) -> String {
				return NSLocalizedString("ExaminationInfo4Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Bei der trockenen A M D geht es mangels wirkungsvoller Behandlungsmöglichkeiten vor allem darum, beeinflussbare Risikofaktoren auszuschalten und gesund zu leben.
			static func therapyInfo3SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("TherapyInfo3SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Bei der trockenen AMD geht es mangels wirkungsvoller Behandlungsmöglichkeiten vor allem darum, beeinflussbare Risikofaktoren auszuschalten und gesund zu leben. mehr: <a>https://www.amd-netz.de/makuladegeneration/faktoren-vorbeugung-frueherkennung/risikofaktoren-und-vorbeugung</a>
			static func therapyInfo3Instruction(_: Void = ()) -> String {
				return NSLocalizedString("TherapyInfo3Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Bewegung
			static func activitiesInfo1Title(_: Void = ()) -> String {
				return NSLocalizedString("ActivitiesInfo1Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Bezeichnet eine subjektive Sehstörung mit verzerrter Wahrnehmung der Umwelt (Verzerrtsehen).
			static func illnessInfo7Instruction(_: Void = ()) -> String {
				return NSLocalizedString("IllnessInfo7Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Bezeichnet eine subjektive Sehstörung mit verzerrter Wahrnehmung der Umwelt (Verzerrtsehen).
			static func illnessInfo7SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("IllnessInfo7SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Bildschirmlesegerät
			static func aidInfo0Title(_: Void = ()) -> String {
				return NSLocalizedString("AidInfo0Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Bildschirmlesegeräte nehmen mit einer Kamera Texte und Bilder auf und geben diese unmittelbar vergrößert auf einem Monitor wieder. Sie eignen sich besonders dann, wenn das Kontrastsehen stark eingeschränkt ist und Betroffene hohe Vergrößerungen benötigen.
			static func aidInfo0SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("AidInfo0SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Bildschirmlesegeräte nehmen mit einer Kamera Texte und Bilder auf und geben diese unmittelbar vergrößert auf einem Monitor wieder. Sie eignen sich besonders dann, wenn das Kontrastsehen stark eingeschränkt ist und Betroffene hohe Vergrößerungen benötigen. mehr: <a>https://www.amd-netz.de/leben-mit-amd/sehhilfen-und-hilfsmittel/bildschirmlesegeraete</a>
			static func aidInfo0Instruction(_: Void = ()) -> String {
				return NSLocalizedString("AidInfo0Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Blindengeld
			static func supportInfo0Title(_: Void = ()) -> String {
				return NSLocalizedString("SupportInfo0Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: DMÖ
			static func dmoInfoTitle(_: Void = ()) -> String {
				return NSLocalizedString("DmoInfoTitle", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Das A M D-Netz führt ein Adressverzeichnis von Ansprechpartnern für Betroffene einer A M D in Deutschland. Hier finden Sie Augenärzte, spezialisierte Augenoptiker, Reha-Lehrer, Berater und Anlaufstellen in Ihrer Nähe: w w w . a m d - netz . d e / Adressverzeichnis
			static func addressesSpeechText(_: Void = ()) -> String {
				return NSLocalizedString("AddressesSpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Das AMD-Netz führt ein Adressverzeichnis von Ansprechpartnern für Betroffene einer AMD in Deutschland. Hier finden Sie Augenärzte, spezialisierte Augenoptiker, Reha-Lehrer, Berater und Anlaufstellen in Ihrer Nähe: <a>http://www.amd-netz.de/Adressverzeichnis</a>
			static func addressesInstruction(_: Void = ()) -> String {
				return NSLocalizedString("AddressesInstruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Das AMD-Netz unterhält eine eigene Hotline mit geschulten Ansprechpartnern zur AMD. Sie ist unter 01805 / 774 778 von Montag bis Donnerstag zwischen 14 bis 18 Uhr geschaltet. Anrufe kosten im deuschen Festnetz 14 Ct/Min und im Mobilfunk max 42 Ct/Min.
			static func supportInfo1Instruction(_: Void = ()) -> String {
				return NSLocalizedString("SupportInfo1Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Das AMD-Netz unterhält eine eigene Hotline mit geschulten Ansprechpartnern zur AMD. Sie ist unter 01805 / 774 778 von Montag bis Donnerstag zwischen 14 bis 18 Uhr geschaltet. Anrufe kosten im deuschen Festnetz 14 Ct/Min und im Mobilfunk max 42 Ct/Min.
			static func supportInfo1SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("SupportInfo1SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Das AMD-Netz veröffentlicht regelmäßig Nachrichten und Informationen aus dem Bereich Augenheilkunde und AMD.  <a>https://www.amd-netz.de/aktuelles</a>
			static func newsInstruction(_: Void = ()) -> String {
				return NSLocalizedString("NewsInstruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Das AMD-Netz veröffentlicht regelmäßig Nachrichten und Informationen aus dem Bereich Augenheilkunde und AMD. https://www.amd-netz.de/aktuelles
			static func newsSpeechText(_: Void = ()) -> String {
				return NSLocalizedString("NewsSpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Der Amsler-Test wird zum frühzeitigen Erkennen und zur Verlaufskontrolle von subjektiver Sehstörung mit verzerrter Wahrnehmung der Umwelt, sogenannten Metamorphopsien, auf einem gitterförmigen Hintergrund (Amsler-Netz oder -gitter ) eingesetzt. Er eignet sich auch zur Selbstkontrolle. Diesen Test finden Sie auch in dieser App.
			static func activitiesInfo0Instruction(_: Void = ()) -> String {
				return NSLocalizedString("ActivitiesInfo0Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Der Amsler-Test wird zum frühzeitigen Erkennen und zur Verlaufskontrolle von subjektiver Sehstörung mit verzerrter Wahrnehmung der Umwelt, sogenannten Metamorphopsien, auf einem gitterförmigen Hintergrund (Amsler-Netz oder -gitter ) eingesetzt. Er eignet sich auch zur Selbstkontrolle. Diesen Test finden Sie auch in dieser App.
			static func activitiesInfo0SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("ActivitiesInfo0SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Der Schwerbehindertenausweis dient als Nachweis der Behinderung. Er wird von der zuständigen Behörde nach bundeseinheitlichen Gesetzen ausgestellt. Der Grad der Behinderung (abgekürzt G d B) wird über die Sehschärfe und/oder die Einschränkung des Gesichtsfeldes ermittelt. Jeder Antragsteller erhält einen Feststellungsbescheid, in dem die Behinderung und die Merkzeichen beschrieben sind. Ein Ausweis wird ab einem Grad der Behinderung von 50 ausgestellt.
			static func supportInfo3SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("SupportInfo3SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Der Schwerbehindertenausweis dient als Nachweis der Behinderung. Er wird von der zuständigen Behörde nach bundeseinheitlichen Gesetzen ausgestellt. Der Grad der Behinderung (abgekürzt G d B) wird über die Sehschärfe und/oder die Einschränkung des Gesichtsfeldes ermittelt. Jeder Antragsteller erhält einen Feststellungsbescheid, in dem die Behinderung und die Merkzeichen beschrieben sind. Ein Ausweis wird ab einem Grad der Behinderung von 50 ausgestellt. mehr: <a>https://www.amd-netz.de/leben-mit-amd/staatliche-hilfen-und-finanzierung/schwerbehindertenausweis</a>
			static func supportInfo3Instruction(_: Void = ()) -> String {
				return NSLocalizedString("SupportInfo3Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Der Wachstumsfaktor V E G F (Vascular Endothelial Growth Factor) bewirkt unter anderem, dass sich Blutgefäße ständig erneuern. Bei Patienten mit „feuchter“ A M D ist dieser überaktiv. So wachsen Blutgefäße in die Netzhaut, die zudem vermehrt durchlässig sind, so dass Blut und Flüssigkeit ins Gewebe eindringen können. V E G F-Hemmer blockieren diesen Wachstumsfaktor im Auge. Gleichzeitig besitzen diese Wirkstoffe einen abschwellenden Effekt und wirken positiv auf Makulaödeme. Dadurch lässt sich das Fortschreiten der „feuchten“ A M D verzögern und das Sehvermögen dabei oftmals auch verbessern.
			static func therapyInfo5SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("TherapyInfo5SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Der Wachstumsfaktor VEGF (Vascular Endothelial Growth Factor) bewirkt unter anderem, dass sich Blutgefäße ständig erneuern. Bei Patienten mit „feuchter“ AMD ist dieser überaktiv. So wachsen Blutgefäße in die Netzhaut, die zudem vermehrt durchlässig sind, so dass Blut und Flüssigkeit ins Gewebe eindringen können. VEGF-Hemmer blockieren diesen Wachstumsfaktor im Auge. Gleichzeitig besitzen diese Wirkstoffe einen abschwellenden Effekt und wirken positiv auf Makulaödeme. Dadurch lässt sich das Fortschreiten der „feuchten“ AMD verzögern und das Sehvermögen dabei oftmals auch verbessern. mehr: <a>https://www.amd-netz.de/makuladegeneration/behandlung-und-therapie/ivom/medikamente</a>
			static func therapyInfo5Instruction(_: Void = ()) -> String {
				return NSLocalizedString("TherapyInfo5Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Derzeit beschränken sich Rehabilitationsprogramme meist auf technische Hilfsmittel mit dem Ziel, Fähigkeiten wie das Lesen temporär zu erhalten und zu verbessern. Dazu gehören aber auch Schulungen zu den Themen Orientierung und Mobilität (O & M), zum Erhalt der Selbständigkeit im Straßenverkehr sowie Schulungen zu lebenspraktischen Fähigkeiten (L P F) rund um die eigene häusliche Umgebung.
			static func activitiesInfo5SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("ActivitiesInfo5SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Derzeit beschränken sich Rehabilitationsprogramme meist auf technische Hilfsmittel mit dem Ziel, Fähigkeiten wie das Lesen temporär zu erhalten und zu verbessern. Dazu gehören aber auch Schulungen zu den Themen Orientierung und Mobilität (O&M), zum Erhalt der Selbständigkeit im Straßenverkehr sowie Schulungen zu lebenspraktischen Fähigkeiten (LPF) rund um die eigene häusliche Umgebung. mehr: <a>https://www.amd-netz.de/leben-mit-amd/schulungen</a>
			static func activitiesInfo5Instruction(_: Void = ()) -> String {
				return NSLocalizedString("ActivitiesInfo5Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Derzeit liegen keine ausreichenden Daten für Empfehlungen von Akupunktur oder Plasmapherese vor.
			static func therapyInfo0SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("TherapyInfo0SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Derzeit liegen keine ausreichenden Daten für Empfehlungen von Akupunktur oder Plasmapherese vor. mehr: <a>https://www.amd-netz.de/makuladegeneration/behandlung-und-therapie/akupunktur</a>
			static func therapyInfo0Instruction(_: Void = ()) -> String {
				return NSLocalizedString("TherapyInfo0Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Diabetisches Makulaödem. In Deutschland leben circa 8 Millionen Menschen mit Diabetes mellitus. Die chronische Stoffwechselerkrankung wirkt sich auch auf das Auge aus. Zu hohe Blutzuckerwerte schädigen auf Dauer die feinen Netzhautgefäße. Bei schlechter Einstellung erkrankt jeder fünfte Diabetiker an diabetischer Retinopathie. Aus dieser kann sich ein Diabetisches Makulaödem (DMÖ) entwickeln. 40 Prozent aller Typ-1-Diabetiker und 20 Prozent der Typ-2- Diabetiker sind von DMÖ betroffen. Im Frühstadium verläuft das diabetische Makulaödem unbemerkt. Sehbeeinträchtigungen treten meist erst dann auf, wenn die Netzhautschäden schon weit fortgeschritten und damit schlechter zu behandeln sind. Im fortgeschrittenen Stadium kommt es zum Sehverlust auch durch Einblutungen in den Glaskörper des Auges oder durch Narbenbildung mit Netzhautablösung. Therapeutisch kommen bei einem DMÖ Injektionen mit VEGF-Hemmern oder Cortison-Präparaten sowie Laserverfahren zum Einsatz. Sollten Sie an Diabetes erkrankt sein, sind regelmäßige und frühzeitige Untersuchungen beim Augenarzt als Vorsorgemaßnahmen, die eine rechtzeitige Diagnose und eventuelle Therapie ermöglichen, wichtig für die Augengesundheit.
			static func dmoSpeechText(_: Void = ()) -> String {
				return NSLocalizedString("DmoSpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Diagnose
			static func diagnoseTitle(_: Void = ()) -> String {
				return NSLocalizedString("DiagnoseTitle", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Die Daten konnten nicht exportiert werden. Bitte beenden Sie die App und versuchen Sie es anschließend erneut.
			static func backupErrorMessage(_: Void = ()) -> String {
				return NSLocalizedString("BackupErrorMessage", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Die Frühform (intermediäre AMD) ist ebenso wie die Spätform (sogenannte geographische Atrophie, GA) eine eher langsam voranschreitende Erkrankung. Sie geht mit einer allmählichen Sehminderung einher. Für beide Formen existiert bislang keine zugelassene wirksame Therapie zur Verlangsamung des Fortschreitens.
			static func illnessInfo9SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("IllnessInfo9SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Die Frühform (intermediäre AMD) ist ebenso wie die Spätform (sogenannte geographische Atrophie, GA) eine eher langsam voranschreitende Erkrankung. Sie geht mit einer allmählichen Sehminderung einher. Für beide Formen existiert bislang keine zugelassene wirksame Therapie zur Verlangsamung des Fortschreitens. mehr: <a>https://www.amd-netz.de/makuladegeneration/formen-und-verlauf/trockene-amd</a>
			static func illnessInfo9Instruction(_: Void = ()) -> String {
				return NSLocalizedString("IllnessInfo9Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Die Netzhaut, oder auch Retina, ist eine ca. 200 µm dicke Gewebeschicht, die das Innere des Auges auskleidet. Sie ist der sensorische Bereich des Auges und dient der Wahrnehmung von Lichtreizen.
			static func illnessInfo8Instruction(_: Void = ()) -> String {
				return NSLocalizedString("IllnessInfo8Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Die Netzhaut, oder auch Retina, ist eine ca. 200 µm dicke Gewebeschicht, die das Innere des Auges auskleidet. Sie ist der sensorische Bereich des Auges und dient der Wahrnehmung von Lichtreizen.
			static func illnessInfo8SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("IllnessInfo8SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Die Versionsnummer besteht in der Regel aus einer Kombination aus Versions- und Bau-Nummer. Bitte geben Sie bei Feedback immer beide Nummern an.
			static func versionInstruction(_: Void = ()) -> String {
				return NSLocalizedString("VersionInstruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Die Versionsnummer besteht in der Regel aus einer Kombination aus Versions- und Bau-Nummer. Bitte geben Sie bei Feedback immer beide Nummern an.
			static func versionSpeechText(_: Void = ()) -> String {
				return NSLocalizedString("VersionSpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Die altersabhängige Makuladegeneration, A M D, ist eine Erkrankung der Makula, dem zentralen Punkt des schärfsten Sehens der Netzhaut im hinteren Auge. Sie tritt bei Menschen ab etwa 55 Jahren auf und ist bedingt durch ein Zusammenspiel von Alter, erblicher Vorbelastung, bestimmten Umwelteinflüssen und weiteren Risikofaktoren. Frühe und mittlere Stadien sind meist nur mit geringen Symptomen verbunden, während es bei Spätstadien oft zu einem erheblichen Verlust an Sehschärfe und zentralem Gesichtsfeld kommt.
			static func illnessInfo0SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("IllnessInfo0SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Die altersabhängige Makuladegeneration, AMD, ist eine Erkrankung der Makula, dem zentralen Punkt des schärfsten Sehens der Netzhaut im hinteren Auge. Sie tritt bei Menschen ab etwa 55 Jahren auf und ist bedingt durch ein Zusammenspiel von Alter, erblicher Vorbelastung, bestimmten Umwelteinflüssen und weiteren Risikofaktoren. Frühe und mittlere Stadien sind meist nur mit geringen Symptomen verbunden, während es bei Spätstadien oft zu einem erheblichen Verlust an Sehschärfe und zentralem Gesichtsfeld kommt. mehr: <a>https://www.amd-netz.de/makuladegeneration</a>
			static func illnessInfo0Instruction(_: Void = ()) -> String {
				return NSLocalizedString("IllnessInfo0Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Die gültige klinische Einteilung der A M D umfasst Drusen als normale Altersveränderungen. Personen mit Drusen mittlerer Ausprägung (≥63–<125 μm) aber ohne Pigmentveränderungen sollten als frühe A M D eingestuft werden. Große Drusen oder Pigmentveränderungen zusammen mit mindestens mittelgroßen Drusen werden als intermediäre A M D eingestuft. Läsionen (Schädigungen) im Zusammenhang mit sogenannter feuchter (neovaskulärer) A M D oder geographischer Atrophie kennzeichnen eine späte A M D.
			static func illnessInfo3SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("IllnessInfo3SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Die gültige klinische Einteilung der AMD umfasst Drusen als normale Altersveränderungen. Personen mit Drusen mittlerer Ausprägung (≥63–<125 μm) aber ohne Pigmentveränderungen sollten als frühe AMD eingestuft werden. Große Drusen oder Pigmentveränderungen zusammen mit mindestens mittelgroßen Drusen werden als intermediäre AMD eingestuft. Läsionen (Schädigungen) im Zusammenhang mit sogenannter feuchter (neovaskulärer) AMD oder geographischer Atrophie kennzeichnen eine späte AMD. mehr: <a>https://www.amd-netz.de/makuladegeneration/formen-und-verlauf</a>
			static func illnessInfo3Instruction(_: Void = ()) -> String {
				return NSLocalizedString("IllnessInfo3Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Die „feuchte“ (neovaskuläre) A M D entsteht durch eine Neubildung von Gefäßen oder Gefäßnetzen, die von der Gefäßhaut (Choroidea) ausgeht. Die Erkrankung kann durch regelmäßige Injektionen von V E G F Hemmern über eine lange Zeit aufgehalten oder deutlich verlangsamt werden, wodurch die Sehfähigkeit erhalten bleibt.
			static func illnessInfo2SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("IllnessInfo2SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Die „feuchte“ (neovaskuläre) AMD entsteht durch eine Neubildung von Gefäßen oder Gefäßnetzen, die von der Gefäßhaut (Choroidea) ausgeht. Die Erkrankung kann durch regelmäßige Injektionen von VEGF-Hemmern über eine lange Zeit aufgehalten oder deutlich verlangsamt werden, wodurch die Sehfähigkeit erhalten bleibt. mehr: <a>https://www.amd-netz.de/makuladegeneration/formen-und-verlauf/feuchte-amd</a>
			static func illnessInfo2Instruction(_: Void = ()) -> String {
				return NSLocalizedString("IllnessInfo2Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Disclaimer und Hauptmenü. Wenn Sie die Makula App zum ersten Mal starten, werden Sie gebeten dem Disclaimer zuzustimmen. Tippen Sie dazu auf „Bestätigt“. Ohne diese Bestätigung können Sie die App nicht nutzen. Nachdem Sie Ihre Zustimmung bestätigt haben, erscheint die Startseite. Hier gibt es acht Menüpunkte. Bei den ersten 5 Menüpunkten sehen Sie eine hellblaue Schrift auf einem dunklen Hintergrund. Dieser Teil ist Ihr „Digitaler Assistent”. Bei den unteren drei Menüpunkten haben wir eine dunkelfarbige Schrift auf einem hellen Hintergrund; dies ist der Teil „Informiert sein“.Unter den einzelnen Menüpunkten verbergen sich folgende Funktionen: Digitaler Assistent ARZTBESUCH. Datum des Termins  (=Injektion), Nachsorge, O C T-Kontrolle, Sonstige) Diagnose: diese ändert sich in der Regel nicht und muss daher nur beim ersten Besuch angegeben werden Medikamente: in der Regel wird immer dasselbe Medikament bei einer Injektion verabreicht. Es kann medizinische Gründe geben, die den Wechsel auf ein anderes Präparat bedingen. Dann sollten Sie das hier dokumentieren. Sie können zusätzlich die Notizfunktion des Termins nutzen •  Visus-Eingabe: Sie erhalten den Visus von Ihrem Augenarzt. Bitte geben Sie diesen getrennt für jedes Auge ein. •  NH-Dicke-Eingabe: NH steht für Netzhautdicke und ist ein Indikator für Ihre Erkrankung. Dieser Wert wird in einer O C T-Untersuchung ermittelt und Sie erfahren ihn von Ihrem Augenarzt. O C T und Visus rechts und links: Hier sehen Sie im zeitlichen Verlauf Ihre Werte im Diagramm für das rechte und das linke Auge.TERMINE Hier können Sie Ihre nächsten Termine beim Augenarzt verwalten. Zur Übersicht werden die Termine nach Art farblich unterschieden. Sie haben die Möglichkeit, zusätzliche Notizen zum Termin hinzuzufügen. Die Termine finden sich im internen App Kalender KALENDER Hier sehen Sie alle Termine der Zukunft und Vergangenheit in der Übersicht. Über das „+“-Symbol können Sie ebenfalls neue Termine hinzufügen analog zum Menüpunkt Termine des Hauptmenüs. Zudem enthalten die Termine alle Ergebnisse des Arztbesuches noch einmal hinterlegt sowie die Ergebnisse der Selbsttests an den Tagen der Durchführung. So können Sie nachvollziehen, wie die Entwicklung Ihrer Sehfähigkeit der letzten zwei Jahre war. Auch kann bei einem Wechsel des Augenarztes die vergangene Behandlung sehr gut dokumentiert vorgelegt werden. KONTAKTE Hier haben Sie die Möglichkeit, Ihre Ansprechpartner zu hinterlegen und direkt zu kontaktieren. Dazu zählen neben Ihren Augenarzt auch Kliniken für Injektionen, Beratungsstellen, Hausarzt und weitere. SELBSTTESTS Unter Selbsttests finden Sie zum einen das Amslergitter sowie einen Lesetest. Diese helfen Ihnen, Ihre Sehfähigkeit selbstständig regelmäßig zu kontrollieren. Die Ergebnisse werden lokal im App-Kalender hinterlegt. Informiert sein WISSEN / INFORMATION. Im Bereich „Wissen / Information“ können Sie sich über alle Aspekte Ihrer Erkrankung informieren. Zusätzlich gibt es einen Überblick über Hilfsmittel und Sehhilfen sowie praktische Tipps. Für weiterführende Informationen wird in den einzelnen Themen direkt auf die Website des AMD-Netz verlinkt. Die Wissensbereiche sind dann wiederum in die einzelnen Themen untergliedert und mit kurzen Informationen angereichert. Für weitere Informationen gibt es unter den einzelnen Themen Links zur Website des AMD-Netz. ADRESVERZEICHNIS Im Adressverzeichnis finden Sie Adressen von verschiedenen Ansprechpartnern in Ihrer Nähe. Diese Funktion ist nur im Online-modus nutzbar, da aktuelle Informationen direkt abgerufen werden. WEITERE HINWEISE Sie können die Schrift innerhalb der App vergrößern, indem Sie das Smartphone um 90° von der vertikalen in die horizontale Ansicht drehen. Außerdem können Sie sich den Text vorlesen lassen, wenn Sie auf das Lautsprecher Symbol oben rechts tippen. Die Menüpunkte werden nacheinander aufleuchten und vorgelesen.
			static func manualSpeechText(_: Void = ()) -> String {
				return NSLocalizedString("ManualSpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Drusen
			static func illnessInfo1Title(_: Void = ()) -> String {
				return NSLocalizedString("IllnessInfo1Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Drusen sind kleine, gelbliche Ablagerungen unter der Netzhaut. Bei vielen Menschen finden sich Drusen als normale Altersveränderung. Erst bei vermehrtem Auftreten oder einer deutlichen Zunahme der Größe der Drusen wird dies einer frühen A M D zugeordnet.
			static func illnessInfo1SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("IllnessInfo1SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Drusen sind kleine, gelbliche Ablagerungen unter der Netzhaut. Bei vielen Menschen finden sich Drusen als normale Altersveränderung. Erst bei vermehrtem Auftreten oder einer deutlichen Zunahme der Größe der Drusen wird dies einer frühen AMD zugeordnet. mehr: <a>https://www.amd-netz.de/makuladegeneration/formen-und-verlauf/drusen-und-fruehstadium</a>
			static func illnessInfo1Instruction(_: Void = ()) -> String {
				return NSLocalizedString("IllnessInfo1Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Durch eine gezielte Ernährung lässt sich die A M D beeinflussen und die Sehkraft sowie die Beschaffenheit der Makula verbessern.
			static func activitiesInfo2SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("ActivitiesInfo2SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Durch eine gezielte Ernährung lässt sich die AMD beeinflussen und die Sehkraft sowie die Beschaffenheit der Makula verbessern. mehr: <a>https://www.amd-netz.de/makuladegeneration/faktoren-vorbeugung-frueherkennung/risikofaktoren-und-vorbeugung#ernaehrung</a>
			static func activitiesInfo2Instruction(_: Void = ()) -> String {
				return NSLocalizedString("ActivitiesInfo2Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Eine intravitreale operative Medikamenteneingabe (kurz I V O M) bezeichnet eine Injektion in den Glaskörper des Auges. Bei der A M D sind dies V E G F-Hemmer, die den Wachstumsfaktor im Auge blockieren und nach strengen Hygienevorschriften direkt in das Auge gespritzt werden. Dadurch lässt sich das Fortschreiten der Erkrankung verzögern und das Sehvermögen in einigen Fällen sogar verbessern. Die Injektionen erfolgen mehrfach und regelmäßig. eine Therapiekontrolle ist dabei im Hinblick auf Dauer und Wiederaufnahme der Behandlung sehr wichtig.
			static func therapyInfo1SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("TherapyInfo1SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Eine intravitreale operative Medikamenteneingabe (kurz IVOM) bezeichnet eine Injektion in den Glaskörper des Auges. Bei der AMD sind dies VEGF-Hemmer, die den Wachstumsfaktor im Auge blockieren und nach strengen Hygienevorschriften direkt in das Auge gespritzt werden. Dadurch lässt sich das Fortschreiten der Erkrankung verzögern und das Sehvermögen in einigen Fällen sogar verbessern. Die Injektionen erfolgen mehrfach und regelmäßig. eine Therapiekontrolle ist dabei im Hinblick auf Dauer und Wiederaufnahme der Behandlung sehr wichtig. mehr: <a>https://www.amd-netz.de/makuladegeneration/behandlung-und-therapie/ivom</a>
			static func therapyInfo1Instruction(_: Void = ()) -> String {
				return NSLocalizedString("TherapyInfo1Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Ernährung
			static func activitiesInfo2Title(_: Void = ()) -> String {
				return NSLocalizedString("ActivitiesInfo2Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Es gibt vielfältige Möglichkeiten Hilfsmittel einzusetzen. Auswahl und Erfolg der Nutzung sind sehr individuell. Suchen Sie nach Sehhilfen und Hilfsmitteln zum Beispiel auf <a>www.amd-netz.de</a>. Nutzen Sie die Suche nach Ansprechpartnern in Ihrer Region unter <a>www.amd-netz.de/Adressverzeichnis</a> und probieren Sie aus, was für Sie sinnvoll ist. mehr: <a>https://www.amd-netz.de/leben-mit-amd/sehhilfen-und-hilfsmittel/suche</a>
			static func aidInfo7Instruction(_: Void = ()) -> String {
				return NSLocalizedString("AidInfo7Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Es gibt vielfältige Möglichkeiten Hilfsmittel einzusetzen. Auswahl und Erfolg der Nutzung sind sehr individuell. Suchen Sie nach Sehhilfen und Hilfsmitteln zum Beispiel auf www.amd-netz.de. Nutzen Sie die Suche nach Ansprechpartnern in Ihrer Region unter www.amd-netz.de/Adressverzeichnis und probieren Sie aus, was für Sie sinnvoll ist.
			static func aidInfo7SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("AidInfo7SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Export gescheitert
			static func backupErrorTitle(_: Void = ()) -> String {
				return NSLocalizedString("BackupErrorTitle", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Exportieren
			static func backupButtonTitle(_: Void = ()) -> String {
				return NSLocalizedString("BackupButtonTitle", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Feuchte AMD
			static func illnessInfo2Title(_: Void = ()) -> String {
				return NSLocalizedString("IllnessInfo2Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Fluoreszenzangiographie
			static func examinationInfo1Title(_: Void = ()) -> String {
				return NSLocalizedString("ExaminationInfo1Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Fluoreszenzangiographie ist ein bildgebendes Verfahren zur Diagnostik von Erkrankungen des Augenhintergrundes. Dabei wird ein Farbstoff als Kontrastmittel in eine Armvene injiziert, um Blutgefäße der Augen sichtbar zu machen.
			static func examinationInfo1Instruction(_: Void = ()) -> String {
				return NSLocalizedString("ExaminationInfo1Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Fluoreszenzangiographie ist ein bildgebendes Verfahren zur Diagnostik von Erkrankungen des Augenhintergrundes. Dabei wird ein Farbstoff als Kontrastmittel in eine Armvene injiziert, um Blutgefäße der Augen sichtbar zu machen.
			static func examinationInfo1SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("ExaminationInfo1SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Formen AMD
			static func illnessInfo3Title(_: Void = ()) -> String {
				return NSLocalizedString("IllnessInfo3Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Fundusfotografie
			static func examinationInfo2Title(_: Void = ()) -> String {
				return NSLocalizedString("ExaminationInfo2Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Für den Bezug von Blindengeld muss das Augenlicht vollständig erloschen oder die Sehschärfe auf beiden Augen auf 1/50 (2 %) herabgesetzt sein oder eine entsprechend gravierende Gesichtsfeldeinschränkung vorliegen. Das Sehvermögen ist durch eine augenfachärztliche Bescheinigung nachzuweisen, es sei denn, im Schwerbehindertenausweis ist bereits das Merkzeichen Bl (blind) eingetragen. Die Höhe dieser Leistung ist in jedem Bundesland gesetzlich geregelt.
			static func supportInfo0SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("SupportInfo0SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Für den Bezug von Blindengeld muss das Augenlicht vollständig erloschen oder die Sehschärfe auf beiden Augen auf 1/50 (2 %) herabgesetzt sein oder eine entsprechend gravierende Gesichtsfeldeinschränkung vorliegen. Das Sehvermögen ist durch eine augenfachärztliche Bescheinigung nachzuweisen, es sei denn, im Schwerbehindertenausweis ist bereits das Merkzeichen Bl (blind) eingetragen. Die Höhe dieser Leistung ist in jedem Bundesland gesetzlich geregelt. mehr: <a>https://www.amd-netz.de/leben-mit-amd/staatliche-hilfen-und-finanzierung/blinden-und-sehbehindertengeld</a>
			static func supportInfo0Instruction(_: Void = ()) -> String {
				return NSLocalizedString("SupportInfo0Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Hotline-AMD
			static func supportInfo1Title(_: Void = ()) -> String {
				return NSLocalizedString("SupportInfo1Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Hörbucherei
			static func aidInfo1Title(_: Void = ()) -> String {
				return NSLocalizedString("AidInfo1Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Hörbüchereien bieten für seheingeschränkte und blinde Menschen Bücher und Zeitschriften in ungekürzter Fassung als Hörversion kostenlos zur Ausleihe an. Es sind keine Kenntnisse der Blindenschrift erforderlich.
			static func aidInfo1SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("AidInfo1SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Hörbüchereien bieten für seheingeschränkte und blinde Menschen Bücher und Zeitschriften in ungekürzter Fassung als Hörversion kostenlos zur Ausleihe an. Es sind keine Kenntnisse der Blindenschrift erforderlich. mehr: <a>https://www.amd-netz.de/leben-mit-amd/sehhilfen-und-hilfsmittel/hoerbuecher</a>
			static func aidInfo1Instruction(_: Void = ()) -> String {
				return NSLocalizedString("AidInfo1Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: IVOM-Therapie
			static func therapyInfo1Title(_: Void = ()) -> String {
				return NSLocalizedString("TherapyInfo1Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Ihre Daten in der App werden über Apples iCloud Backup-Funktionalität mitgesichert, d.h. wenn Sie Ihr iPhone oder iPad aus einem iCloud Backup wieder herstellen, dann werden auch die in der App gespeicherten Daten wieder hergestellt.  Außerdem können Sie ein manuelles Backup erstellen, indem Sie die Datenbank exportieren und diese sich selbst dann zumailen. Um diese dann wieder zu importieren öffnen Sie die Mail mit dem Backup, drücken und halten Sie lange auf die Datei und wählen dann die Makula App aus der Liste der Apps.
			static func backupInstruction(_: Void = ()) -> String {
				return NSLocalizedString("BackupInstruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Ihre Daten in der App werden über Apples iCloud Backup-Funktionalität mitgesichert, d.h. wenn Sie Ihr iPhone oder iPad aus einem iCloud Backup wieder herstellen, dann werden auch die in der App gespeicherten Daten wieder hergestellt. Außerdem können Sie ein manuelles Backup erstellen, indem Sie die Datenbank exportieren und diese sich selbst dann zumailen. Um diese dann wieder zu importieren öffnen Sie die Mail mit dem Backup, drücken und halten Sie lange auf die Datei und wählen dann die Makula App aus der Liste der Apps.
			static func backupSpeechText(_: Void = ()) -> String {
				return NSLocalizedString("BackupSpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Impressum
			static func inprintTitle(_: Void = ()) -> String {
				return NSLocalizedString("InprintTitle", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Kantenfiltergläser
			static func aidInfo2Title(_: Void = ()) -> String {
				return NSLocalizedString("AidInfo2Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Kantenfiltergläser sind eine spezielle Form der Lichtschutzfilter. Sie filtern das kurzwellige Licht aus dem sichtbaren Spektrum, das letztendlich für die Blendung verantwortlich ist, vollständig heraus. Viele Nutzer empfinden zudem eine Verstärkung der Kontraste.
			static func aidInfo2SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("AidInfo2SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Kantenfiltergläser sind eine spezielle Form der Lichtschutzfilter. Sie filtern das kurzwellige Licht aus dem sichtbaren Spektrum, das letztendlich für die Blendung verantwortlich ist, vollständig heraus. Viele Nutzer empfinden zudem eine Verstärkung der Kontraste. mehr: <a>https://www.amd-netz.de/leben-mit-amd/sehhilfen-und-hilfsmittel/kantenfilterglaeser</a>
			static func aidInfo2Instruction(_: Void = ()) -> String {
				return NSLocalizedString("AidInfo2Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Krankenkasse
			static func supportInfo2Title(_: Void = ()) -> String {
				return NSLocalizedString("SupportInfo2Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Leistungen: Die medizinische Therapie bei der feuchten A M D (I V O M) wird in der Regel von den privaten und gesetzlichen Krankenkassen (meist in sogenannten Selektivverträgen) erstattet, wenn eine behandlungsbedürftige A M D besteht. Dies gilt meist auch für die Nachsorge und Diagnostik (u. a. O C T). Die regional spezifische Situation kann der behandelnde Arzt klären. Die Finanzierung eines Hilfsmittels für den privaten Gebrauch kann als medizinische Leistung zur Rehabilitation erfolgen. Kostenträger ist vorrangig die gesetzliche Krankenkasse. Bei Hilfsmitteln für den privaten Gebrauch ist es notwendig, dass der behandelnde Arzt ein Rezept für das beantragte Hilfsmittel ausstellt.
			static func supportInfo2SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("SupportInfo2SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Leistungen: Die medizinische Therapie bei der feuchten AMD (IVOM) wird in der Regel von den privaten und gesetzlichen Krankenkassen (meist in sogenannten Selektivverträgen) erstattet, wenn eine behandlungsbedürftige AMD besteht. Dies gilt meist auch für die Nachsorge und Diagnostik (u. a. OCT). Die regional spezifische Situation kann der behandelnde Arzt klären. Die Finanzierung eines Hilfsmittels für den privaten Gebrauch kann als medizinische Leistung zur Rehabilitation erfolgen. Kostenträger ist vorrangig die gesetzliche Krankenkasse. Bei Hilfsmitteln für den privaten Gebrauch ist es notwendig, dass der behandelnde Arzt ein Rezept für das beantragte Hilfsmittel ausstellt. mehr: <a>https://www.amd-netz.de/leben-mit-amd/staatliche-hilfen-und-finanzierung/finanzierung-von-hilfsmitteln</a>
			static func supportInfo2Instruction(_: Void = ()) -> String {
				return NSLocalizedString("SupportInfo2Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Lesebrillen mit höheren Stärken werden als Lupenbrillen bezeichnet. Für Lupenbrillen werden spezielle, besonders starke Brillengläser in eine Brillenfassung eingebaut. Sie erreichen bis zu 15-fache Vergrößerungen.
			static func aidInfo4SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("AidInfo4SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Lesebrillen mit höheren Stärken werden als Lupenbrillen bezeichnet. Für Lupenbrillen werden spezielle, besonders starke Brillengläser in eine Brillenfassung eingebaut. Sie erreichen bis zu 15-fache Vergrößerungen. mehr: <a>https://www.amd-netz.de/leben-mit-amd/sehhilfen-und-hilfsmittel/lupenbrillen</a>
			static func aidInfo4Instruction(_: Void = ()) -> String {
				return NSLocalizedString("AidInfo4Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Lesetest. Dieser Lesetest dient der Selbstkontrolle. Er ist individuell und auf Ihrem Smartphone aussagekräftig. Halten Sie bitte Ihr Endgerät bei jeder Nutzung in der gleichen Position und in einem vergleichbaren Leseabstand von 30-40 cm. Sie können hier verfolgen, ob sich bei Ihnen Änderungen ergeben haben. Halten Sie jeweils ein Auge zu und testen Sie beide Seiten einzeln. Sie können das Ergebnis für beide Augen getrennt markieren. Wenn sich Änderungen ergeben haben, teilen Sie dies Ihrem Arzt mit. Empfehlung: Führen Sie den Lese-Test regelmäßig im Abstand von 2 Wochen, bei Verschlechterung unmittelbar durch.
			static func readingtestSpeechText(_: Void = ()) -> String {
				return NSLocalizedString("ReadingtestSpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Lupe
			static func aidInfo3Title(_: Void = ()) -> String {
				return NSLocalizedString("AidInfo3Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Lupen sind einfache und bekannte vergrößernde Sehhilfen und werden häufig als erstes Hilfsmittel verwendet, um Beschriftungen und kurze Texte zu lesen. Die Lupe sollte von einem erfahrenen Augenoptiker auf den individuellen Bedarf angepasst werden.
			static func aidInfo3SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("AidInfo3SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Lupen sind einfache und bekannte vergrößernde Sehhilfen und werden häufig als erstes Hilfsmittel verwendet, um Beschriftungen und kurze Texte zu lesen. Die Lupe sollte von einem erfahrenen Augenoptiker auf den individuellen Bedarf angepasst werden. mehr: <a>https://www.amd-netz.de/leben-mit-amd/sehhilfen-und-hilfsmittel/Lupen</a>
			static func aidInfo3Instruction(_: Void = ()) -> String {
				return NSLocalizedString("AidInfo3Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Lupenbrille
			static func aidInfo4Title(_: Void = ()) -> String {
				return NSLocalizedString("AidInfo4Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Makula
			static func illnessInfo5Title(_: Void = ()) -> String {
				return NSLocalizedString("IllnessInfo5Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Makulaödem
			static func illnessInfo6Title(_: Void = ()) -> String {
				return NSLocalizedString("IllnessInfo6Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Makulaödem beschreibt eine Ansammlung von Flüssigkeit im Auge. Das Ödem befindet sich dabei im Bereich des Gelben Flecks in der Netzhautmitte. In der Folge kommt es zu Sehstörungen und zu unscharfem Sehen.
			static func illnessInfo6Instruction(_: Void = ()) -> String {
				return NSLocalizedString("IllnessInfo6Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Makulaödem beschreibt eine Ansammlung von Flüssigkeit im Auge. Das Ödem befindet sich dabei im Bereich des Gelben Flecks in der Netzhautmitte. In der Folge kommt es zu Sehstörungen und zu unscharfem Sehen.
			static func illnessInfo6SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("IllnessInfo6SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Metamorphopsie
			static func illnessInfo7Title(_: Void = ()) -> String {
				return NSLocalizedString("IllnessInfo7Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Myope choroidale Neovaskularisation. In Europa ist die durch Myopie (Kurzsichtigkeit) entstehende choroidale Neovaskularisation (CNV) die siebthäufigste Erblindungsursache. Es sind vor allem junge, noch berufstätige Patienten betroffen. In der jüngeren Erwachsenenbevölkerung ist die Myopie die häufigste Ursache einer CNV. Eine sehr hohe (pathologische) Myopie kann sich zu einer myopiebedingten choriodalen Neovaskularisation (myopische CNV) entwickeln. Aus neuen, krankhaften Blutgefäßen in der Choroidea kann Flüssigkeit austreten und ein lokales Ödem verursachen. Dies führt in der Makula zu verschwommener Sicht, Metamorphopsien und blinden oder grauen Flecken im Zentrum des Sichtfeldes bis hin zum Sehverlust. Als Behandlungen können eingesetzt werden - die intravitreale-VEGF-Hemmer-Therapie, - eher selten eine Hochenergielaserkoagulation - oder eine Kombination aus einem Medikament, das krankhafte Gefäße der Aderhaut lichtempfindlich macht (Photosensibilisierung), und einem niedrig-energetischen Laserlicht (photodynamische Therapie).
			static func mcnvSpeechText(_: Void = ()) -> String {
				return NSLocalizedString("McnvSpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: N H D. Viele Augenerkrankungen wirken sich durch eine Veränderung der Netzhautdicke aus. Deswegen ist für die Diagnose sehr wichtig, Wert und Veränderungen der Netzhautdicke durch die optische Cohärenz-Tomographie (O C T) zu messen. Bitte erfragen Sie den Wert in Ihrer Praxis.
			static func nhdSpeechText(_: Void = ()) -> String {
				return NSLocalizedString("NhdSpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: NH-Dicke
			static func nhdInfoTitle(_: Void = ()) -> String {
				return NSLocalizedString("NhdInfoTitle", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Nahrungsergänzung
			static func activitiesInfo3Title(_: Void = ()) -> String {
				return NSLocalizedString("ActivitiesInfo3Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Nahrungsergänzungsmittel sind konzentrierte Quellen von Nährstoffen oder anderen Stoffen mit ernährungsspezifischer oder physiologischer Wirkung. Sie können die normale Ernährung ergänzen. Verschiedene Studien belegen, dass A M D-Patienten von bestimmtem Vitaminen und Mineralstoffen auch in Form von Nahrungsergänzungsmitteln profitieren können.
			static func activitiesInfo3SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("ActivitiesInfo3SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Nahrungsergänzungsmittel sind konzentrierte Quellen von Nährstoffen oder anderen Stoffen mit ernährungsspezifischer oder physiologischer Wirkung. Sie können die normale Ernährung ergänzen. Verschiedene Studien belegen, dass AMD-Patienten von bestimmtem Vitaminen und Mineralstoffen auch in Form von Nahrungsergänzungsmitteln profitieren können. mehr: <a>https://www.amd-netz.de/makuladegeneration/faktoren-vorbeugung-frueherkennung/risikofaktoren-und-vorbeugung#vitaminpraeparate</a>
			static func activitiesInfo3Instruction(_: Void = ()) -> String {
				return NSLocalizedString("ActivitiesInfo3Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Netzhaut
			static func illnessInfo8Title(_: Void = ()) -> String {
				return NSLocalizedString("IllnessInfo8Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Netzhautdicke
			static func examinationInfo3Title(_: Void = ()) -> String {
				return NSLocalizedString("ExaminationInfo3Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: OCT-A
			static func examinationInfo5Title(_: Void = ()) -> String {
				return NSLocalizedString("ExaminationInfo5Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: OCT-Untersuchung
			static func examinationInfo4Title(_: Void = ()) -> String {
				return NSLocalizedString("ExaminationInfo4Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Optische Cohärenz Tomografie, Angiographie (O C T-A). Mit dieser ergänzenden diagnostischen Methode kann der Blutfluss in den Netzhautgefäßen ohne Verwendung eines Farbstoffs / Kontrastmittels dargestellt werden.
			static func examinationInfo5SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("ExaminationInfo5SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Optische Cohärenz Tomografie, Angiographie (OCT-A). Mit dieser ergänzenden diagnostischen Methode kann der Blutfluss in den Netzhautgefäßen ohne Verwendung eines Farbstoffs / Kontrastmittels dargestellt werden.
			static func examinationInfo5Instruction(_: Void = ()) -> String {
				return NSLocalizedString("ExaminationInfo5Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: PRN-Schema
			static func therapyInfo2Title(_: Void = ()) -> String {
				return NSLocalizedString("TherapyInfo2Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: RVV
			static func rvvInfoTitle(_: Void = ()) -> String {
				return NSLocalizedString("RvvInfoTitle", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Rauchen
			static func activitiesInfo4Title(_: Void = ()) -> String {
				return NSLocalizedString("ActivitiesInfo4Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Rauchen stellt einen entscheidenden Risikofaktor für die Entwicklung einer AMD dar. Studien zufolge sind Raucher einem zwei- bis dreifachen höheren Risiko für eine A M D ausgesetzt als Nichtraucher. Das individuelle Risiko steigt dabei mit der Intensität/Häufigkeit des Rauchens.
			static func activitiesInfo4SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("ActivitiesInfo4SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Rauchen stellt einen entscheidenden Risikofaktor für die Entwicklung einer AMD dar. Studien zufolge sind Raucher einem zwei- bis dreifachen höheren Risiko für eine AMD ausgesetzt als Nichtraucher. Das individuelle Risiko steigt dabei mit der Intensität/Häufigkeit des Rauchens. mehr: <a>https://www.amd-netz.de/makuladegeneration/faktoren-vorbeugung-frueherkennung/risikofaktoren-und-vorbeugung#rauchen</a>
			static func activitiesInfo4Instruction(_: Void = ()) -> String {
				return NSLocalizedString("ActivitiesInfo4Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Reha-Maßnahmen
			static func activitiesInfo5Title(_: Void = ()) -> String {
				return NSLocalizedString("ActivitiesInfo5Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Retinaler Venenverschluss. Bei einem Retinalen Venenverschluss (RVV) kann das Blut aufgrund einer Netzhautvenenerkrankung nicht mehr ungehindert abfließen. Retinale Venenverschlüsse (RVV) entstehen durch verschiedene Risikofaktoren: Ein Blutgerinnsel, das sich in einer Stelle der Vene festsetzt oder durch Bluthochdruck mit und ohne Arteriosklerose veränderte Arterien, die benachbarte Venen komprimieren. Dadurch steigt der Druck in den Augenvenen. Es können Netzhautblutungen, Ödeme, Gefäßwucherungen oder sogar Netzhautablösungen entstehen. Retinale Venenverschlüsse führen zu Einbußen der Sehschärfe. Patienten sehen verschwommen oder auch einen „grauen Vorhang“. Je schneller die Therapie erfolgt, desto höher liegen die Behandlungschancen. Injektionen mit einem VEGF-Hemmer in den Glaskörper sind wirksam. Daneben werden Injektionen von Kortisonimplantaten oder Laserbehandlungen eingesetzt sowie durch kontrollierte Blutverdünnung (Hämodilution) die Fließfähigkeiten des Blutes gefördert.
			static func rvvSpeechText(_: Void = ()) -> String {
				return NSLocalizedString("RvvSpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Schema für eine intravitreale operative Medikamenteneingabe (I V O M): Nach der initialen 3-er Behandlung einer I V O M-Therapie erfolgen monatliche Kontrollen und eventuelle weitere Behandlungen, meist auch in einer 3-er Behandlungsserie in monatlichen Abständen bei erneuter Läsionsaktivität (häufig erneute Flüssigkeitsansammlung in und unter der Netzhaut, in der O C T sichtbar).
			static func therapyInfo2SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("TherapyInfo2SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Schema für eine intravitreale operative Medikamenteneingabe (IVOM): Nach der initialen 3-er Behandlung einer IVOM-Therapie erfolgen monatliche Kontrollen und eventuelle weitere Behandlungen, meist auch in einer 3-er Behandlungsserie in monatlichen Abständen bei erneuter Läsionsaktivität (häufig erneute Flüssigkeitsansammlung in und unter der Netzhaut, in der OCT sichtbar).
			static func therapyInfo2Instruction(_: Void = ()) -> String {
				return NSLocalizedString("TherapyInfo2Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Schwerbehindertenausweis
			static func supportInfo3Title(_: Void = ()) -> String {
				return NSLocalizedString("SupportInfo3Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Sehbehindertengeld
			static func supportInfo4Title(_: Void = ()) -> String {
				return NSLocalizedString("SupportInfo4Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Sehbehindertengeld wird hochgradig seheingeschränkten Menschen nach Länderrecht gewährt. Nicht alle Bundesländer haben hierzu Regelungen getroffen. Die Leistungen sind in den gewährenden Ländern unterschiedlich hoch.
			static func supportInfo4SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("SupportInfo4SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Sehbehindertengeld wird hochgradig seheingeschränkten Menschen nach Länderrecht gewährt. Nicht alle Bundesländer haben hierzu Regelungen getroffen. Die Leistungen sind in den gewährenden Ländern unterschiedlich hoch. mehr: <a>https://www.amd-netz.de/leben-mit-amd/staatliche-hilfen-und-finanzierung/blinden-und-sehbehindertengeld</a>
			static func supportInfo4Instruction(_: Void = ()) -> String {
				return NSLocalizedString("SupportInfo4Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Smartphone
			static func aidInfo5Title(_: Void = ()) -> String {
				return NSLocalizedString("AidInfo5Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Smartphones sind Alltagshelfer im mobilen Einsatz – auch für sehbehinderte und ältere Menschen. Voraussetzung: Es müssen individuelle Einstellungen vorgenommen, entsprechende Apps installiert und die Handhabung geübt werden.
			static func aidInfo5SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("AidInfo5SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Smartphones sind Alltagshelfer im mobilen Einsatz – auch für sehbehinderte und ältere Menschen. Voraussetzung: Es müssen individuelle Einstellungen vorgenommen, entsprechende Apps installiert und die Handhabung geübt werden. mehr: <a>https://www.amd-netz.de/leben-mit-amd/sehhilfen-und-hilfsmittel/smartphone-tablet</a>
			static func aidInfo5Instruction(_: Void = ()) -> String {
				return NSLocalizedString("AidInfo5Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Tablets können unterwegs verwendet werden. Mit entsprechender Software dienen sie beispielsweise als Lupe, Taschenlampe oder Navigationsgerät, helfen im Supermarkt beim Etikettenlesen oder an der Haltestelle beim Entziffern eines Fahrplans.
			static func aidInfo6SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("AidInfo6SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Tablets können unterwegs verwendet werden. Mit entsprechender Software dienen sie beispielsweise als Lupe, Taschenlampe oder Navigationsgerät, helfen im Supermarkt beim Etikettenlesen oder an der Haltestelle beim Entziffern eines Fahrplans. mehr: <a>https://www.amd-netz.de/leben-mit-amd/sehhilfen-und-hilfsmittel/smartphone-tablet</a>
			static func aidInfo6Instruction(_: Void = ()) -> String {
				return NSLocalizedString("AidInfo6Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Tablett-PC
			static func aidInfo6Title(_: Void = ()) -> String {
				return NSLocalizedString("AidInfo6Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Treat & Extend
			static func therapyInfo4Title(_: Void = ()) -> String {
				return NSLocalizedString("TherapyInfo4Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Treat & Extend-Schema. Schema für eine intravitreale operative Medikamenteneingabe (I V O M): Bei dieser vor allem in den U S A angewendeten Behandlungsstrategie erfolgt bei jeder Kontrolle/Behandlung eine I V O M-Therapie. Hierbei wird mit monatlichen Injektionen begonnen, aber bei stabilisierter Netzhautsituation das Behandlungsintervall um z. B. 2 Wochen verlängert. Zeigt sich bei einem Behandlungstermin nach verlängertem Intervall allerdings eine erneute Läsionsaktivität (häufig erneute Flüssigkeitsansammlung in und unter der Netzhaut, in der O C T sichtbar), so wird das Behandlungsintervall wieder verkürzt.
			static func therapyInfo4SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("TherapyInfo4SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Treat & Extend-Schema. Schema für eine intravitreale operative Medikamenteneingabe (IVOM): Bei dieser vor allem in den USA angewendeten Behandlungsstrategie erfolgt bei jeder Kontrolle/Behandlung eine IVOM-Therapie. Hierbei wird mit monatlichen Injektionen begonnen, aber bei stabilisierter Netzhautsituation das Behandlungsintervall um z. B. 2 Wochen verlängert. Zeigt sich bei einem Behandlungstermin nach verlängertem Intervall allerdings eine erneute Läsionsaktivität (häufig erneute Flüssigkeitsansammlung in und unter der Netzhaut, in der OCT sichtbar), so wird das Behandlungsintervall wieder verkürzt.
			static func therapyInfo4Instruction(_: Void = ()) -> String {
				return NSLocalizedString("TherapyInfo4Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Trockene AMD
			static func illnessInfo9Title(_: Void = ()) -> String {
				return NSLocalizedString("IllnessInfo9Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Trockenen AMD
			static func therapyInfo3Title(_: Void = ()) -> String {
				return NSLocalizedString("TherapyInfo3Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Unter der Sehschärfe bzw. dem Visus versteht man das Potenzial des Auges, diverse Umweltstrukturen wahrzunehmen und zu erkennen. Die Sehschärfe ist eine messbare Größe, die in der Diagnostik von Augenerkrankungen eine wichtige Rolle spielt.
			static func examinationInfo6Instruction(_: Void = ()) -> String {
				return NSLocalizedString("ExaminationInfo6Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Unter der Sehschärfe bzw. dem Visus versteht man das Potenzial des Auges, diverse Umweltstrukturen wahrzunehmen und zu erkennen. Die Sehschärfe ist eine messbare Größe, die in der Diagnostik von Augenerkrankungen eine wichtige Rolle spielt.
			static func examinationInfo6SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("ExaminationInfo6SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: VEGF-Hemmer
			static func therapyInfo5Title(_: Void = ()) -> String {
				return NSLocalizedString("TherapyInfo5Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Version
			static func versionTitle(_: Void = ()) -> String {
				return NSLocalizedString("VersionTitle", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Viele Augenerkrankungen wirken sich durch eine Veränderung der Netzhautdicke aus. Deswegen ist für die Diagnose sehr wichtig, Wert und Veränderungen in ihrer Struktur mittels der O C T-Untersuchung zu messen.
			static func examinationInfo3SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("ExaminationInfo3SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Viele Augenerkrankungen wirken sich durch eine Veränderung der Netzhautdicke aus. Deswegen ist für die Diagnose sehr wichtig, Wert und Veränderungen in ihrer Struktur mittels der OCT-Untersuchung zu messen.
			static func examinationInfo3Instruction(_: Void = ()) -> String {
				return NSLocalizedString("ExaminationInfo3Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Visus
			static func examinationInfo6Title(_: Void = ()) -> String {
				return NSLocalizedString("ExaminationInfo6Title", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Visus
			static func visusInfoTitle(_: Void = ()) -> String {
				return NSLocalizedString("VisusInfoTitle", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Visus. Unter der Sehschärfe bzw. dem Visus versteht man das Potenzial des Auges diverse Umweltstrukturen wahrzunehmen und zu erkennen. Die Sehschärfe ist eine messbare Größe, die in der Diagnostik eine Rolle spielt. Zur Bestimmung des Visus werden beim Augenarzt oder Optiker Sehzeichen projiziert oder Schrifttafeln gezeigt mit Zahlen, Buchstaben oder abstrakten Zeichen (z.B. E-Haken oder Landolt-Ringe). Bitte erfragen Sie den Wert in Ihrer Praxis.
			static func visusSpeechText(_: Void = ()) -> String {
				return NSLocalizedString("VisusSpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Wenn Sie die Diagnose A M D erhalten haben ist es wichtig, regelmäßige Arzttermine wahrzunehmen. Es gibt bislang keine spezifische Therapie der frühen und mittleren A M D, die ein Voranschreiten verlangsamt, aufhält oder zu einer Heilung der Erkrankung führt. Die feuchte Form ist behandelbar; verschiedene Wirkstoffe können helfen, die Sehkraft zumindest vorübergehend zu verbessern oder länger zu erhalten. Informationen zu Hilfsmitteln und Unterstützung tragen zusätzlich dazu bei, die Lebensqualität zu erhalten.
			static func illnessInfo4SpeechText(_: Void = ()) -> String {
				return NSLocalizedString("IllnessInfo4SpeechText", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Wenn Sie die Diagnose AMD erhalten haben ist es wichtig, regelmäßige Arzttermine wahrzunehmen. Es gibt bislang keine spezifische Therapie der frühen und mittleren AMD, die ein Voranschreiten verlangsamt, aufhält oder zu einer Heilung der Erkrankung führt. Die feuchte Form ist behandelbar; verschiedene Wirkstoffe können helfen, die Sehkraft zumindest vorübergehend zu verbessern oder länger zu erhalten. Informationen zu Hilfsmitteln und Unterstützung tragen zusätzlich dazu bei, die Lebensqualität zu erhalten. mehr: <a>https://www.amd-netz.de/makuladegeneration/behandlung-und-therapie</a>
			static func illnessInfo4Instruction(_: Void = ()) -> String {
				return NSLocalizedString("IllnessInfo4Instruction", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			/// Value: backup_%@.makula
			static func backupFileName(_ value1: String) -> String {
				return String(format: NSLocalizedString("BackupFileName", tableName: "Info", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
			}

			/// Value: mCNV
			static func mcnvInfoTitle(_: Void = ()) -> String {
				return NSLocalizedString("McnvInfoTitle", tableName: "Info", bundle: R.hostingBundle, comment: "")
			}

			fileprivate init() {}
		}

		/// This `R.string.medicament` struct is generated, and contains static references to 4 localization keys.
		struct medicament {
			/// Value: Löschen
			static let deleteButtonTitle = Rswift.StringResource(key: "DeleteButtonTitle", tableName: "Medicament", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Medikamente
			static let title = Rswift.StringResource(key: "Title", tableName: "Medicament", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Weitere
			static let cellMore = Rswift.StringResource(key: "CellMore", tableName: "Medicament", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Weitere
			static let cellMoreSpeech = Rswift.StringResource(key: "CellMoreSpeech", tableName: "Medicament", bundle: R.hostingBundle, locales: [], comment: nil)

			/// Value: Löschen
			static func deleteButtonTitle(_: Void = ()) -> String {
				return NSLocalizedString("DeleteButtonTitle", tableName: "Medicament", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Medikamente
			static func title(_: Void = ()) -> String {
				return NSLocalizedString("Title", tableName: "Medicament", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Weitere
			static func cellMore(_: Void = ()) -> String {
				return NSLocalizedString("CellMore", tableName: "Medicament", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Weitere
			static func cellMoreSpeech(_: Void = ()) -> String {
				return NSLocalizedString("CellMoreSpeech", tableName: "Medicament", bundle: R.hostingBundle, comment: "")
			}

			fileprivate init() {}
		}

		/// This `R.string.menu` struct is generated, and contains static references to 155 localization keys.
		struct menu {
			/// Value:
			static let doctorVisitCell0Speech = Rswift.StringResource(key: "DoctorVisitCell0Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: A M D
			static let illnessCell0Speech = Rswift.StringResource(key: "IllnessCell0Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: AMD
			static let illnessCell0 = Rswift.StringResource(key: "IllnessCell0", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Adressverzeichnis
			static let homeCell6 = Rswift.StringResource(key: "HomeCell6", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Adressverzeichnis
			static let homeCell6Speech = Rswift.StringResource(key: "HomeCell6Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Aktuelles
			static let homeCell7 = Rswift.StringResource(key: "HomeCell7", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Aktuelles
			static let homeCell7Speech = Rswift.StringResource(key: "HomeCell7Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Alltagshilfen
			static let aidCell7 = Rswift.StringResource(key: "AidCell7", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Alltagshilfen
			static let aidCell7Speech = Rswift.StringResource(key: "AidCell7Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Alternative Therapien
			static let therapyCell0 = Rswift.StringResource(key: "TherapyCell0", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Alternative Therapien
			static let therapyCell0Speech = Rswift.StringResource(key: "TherapyCell0Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Amsler-Test
			static let activitiesCell0 = Rswift.StringResource(key: "ActivitiesCell0", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Amsler-Test
			static let activitiesCell0Speech = Rswift.StringResource(key: "ActivitiesCell0Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Amslertest
			static let selfTestCell0 = Rswift.StringResource(key: "SelfTestCell0", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Amslertest
			static let selfTestCell0Speech = Rswift.StringResource(key: "SelfTestCell0Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Arztbesuch
			static let doctorVisitTitle = Rswift.StringResource(key: "DoctorVisitTitle", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Arztbesuch
			static let homeCell0 = Rswift.StringResource(key: "HomeCell0", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Arztbesuch
			static let homeCell0Speech = Rswift.StringResource(key: "HomeCell0Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Augenspiegelung
			static let examinationCell0 = Rswift.StringResource(key: "ExaminationCell0", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Augenspiegelung
			static let examinationCell0Speech = Rswift.StringResource(key: "ExaminationCell0Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Backup
			static let settingsCell1 = Rswift.StringResource(key: "SettingsCell1", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Backup
			static let settingsCell1Speech = Rswift.StringResource(key: "SettingsCell1Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Bedienung
			static let homeCell12 = Rswift.StringResource(key: "HomeCell12", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Bedienung
			static let homeCell12Speech = Rswift.StringResource(key: "HomeCell12Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Behandlung
			static let doctorVisitCell0 = Rswift.StringResource(key: "DoctorVisitCell0", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Behandlung
			static let illnessCell4 = Rswift.StringResource(key: "IllnessCell4", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Behandlung
			static let illnessCell4Speech = Rswift.StringResource(key: "IllnessCell4Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Bewegung
			static let activitiesCell1 = Rswift.StringResource(key: "ActivitiesCell1", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Bewegung
			static let activitiesCell1Speech = Rswift.StringResource(key: "ActivitiesCell1Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Bildschirmlesegerät
			static let aidCell0 = Rswift.StringResource(key: "AidCell0", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Bildschirmlesegerät
			static let aidCell0Speech = Rswift.StringResource(key: "AidCell0Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Blindengeld
			static let supportCell0 = Rswift.StringResource(key: "SupportCell0", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Blindengeld
			static let supportCell0Speech = Rswift.StringResource(key: "SupportCell0Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Diagnose
			static let doctorVisitCell1 = Rswift.StringResource(key: "DoctorVisitCell1", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Diagnose
			static let doctorVisitCell1Speech = Rswift.StringResource(key: "DoctorVisitCell1Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Diagnose
			static let knowledgeCell7 = Rswift.StringResource(key: "KnowledgeCell7", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Diagnose
			static let knowledgeCell7Speech = Rswift.StringResource(key: "KnowledgeCell7Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Drusen
			static let illnessCell1 = Rswift.StringResource(key: "IllnessCell1", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Drusen
			static let illnessCell1Speech = Rswift.StringResource(key: "IllnessCell1Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Einstellungen
			static let homeCell9 = Rswift.StringResource(key: "HomeCell9", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Einstellungen
			static let homeCell9Speech = Rswift.StringResource(key: "HomeCell9Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Einstellungen
			static let settingsTitle = Rswift.StringResource(key: "SettingsTitle", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Erinnerung
			static let settingsCell0 = Rswift.StringResource(key: "SettingsCell0", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Erinnerung
			static let settingsCell0Speech = Rswift.StringResource(key: "SettingsCell0Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Erkrankung
			static let illnessTitle = Rswift.StringResource(key: "IllnessTitle", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Erkrankung
			static let knowledgeCell1 = Rswift.StringResource(key: "KnowledgeCell1", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Erkrankung
			static let knowledgeCell1Speech = Rswift.StringResource(key: "KnowledgeCell1Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Ernährung
			static let activitiesCell2 = Rswift.StringResource(key: "ActivitiesCell2", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Ernährung
			static let activitiesCell2Speech = Rswift.StringResource(key: "ActivitiesCell2Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Feuchte A M D
			static let illnessCell2Speech = Rswift.StringResource(key: "IllnessCell2Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Feuchte AMD
			static let illnessCell2 = Rswift.StringResource(key: "IllnessCell2", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Fluoreszenzangiographie
			static let examinationCell1 = Rswift.StringResource(key: "ExaminationCell1", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Fluoreszenzangiographie
			static let examinationCell1Speech = Rswift.StringResource(key: "ExaminationCell1Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Formen A M D
			static let illnessCell3Speech = Rswift.StringResource(key: "IllnessCell3Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Formen AMD
			static let illnessCell3 = Rswift.StringResource(key: "IllnessCell3", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Fundusfotografie
			static let examinationCell2 = Rswift.StringResource(key: "ExaminationCell2", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Fundusfotografie
			static let examinationCell2Speech = Rswift.StringResource(key: "ExaminationCell2Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Grafik N H Dicke Visus
			static let doctorVisitCell5Speech = Rswift.StringResource(key: "DoctorVisitCell5Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Grafik NH-Dicke/Visus
			static let doctorVisitCell5 = Rswift.StringResource(key: "DoctorVisitCell5", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Hilfsmittel
			static let aidTitle = Rswift.StringResource(key: "AidTitle", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Hilfsmittel
			static let knowledgeCell5 = Rswift.StringResource(key: "KnowledgeCell5", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Hilfsmittel
			static let knowledgeCell5Speech = Rswift.StringResource(key: "KnowledgeCell5Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Hotline A M D
			static let supportCell1Speech = Rswift.StringResource(key: "SupportCell1Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Hotline-AMD
			static let supportCell1 = Rswift.StringResource(key: "SupportCell1", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Hörbucherei
			static let aidCell1 = Rswift.StringResource(key: "AidCell1", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Hörbucherei
			static let aidCell1Speech = Rswift.StringResource(key: "AidCell1Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: I V O M Therapie
			static let therapyCell1Speech = Rswift.StringResource(key: "TherapyCell1Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: IVOM-Therapie
			static let therapyCell1 = Rswift.StringResource(key: "TherapyCell1", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Impressum
			static let homeCell10 = Rswift.StringResource(key: "HomeCell10", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Impressum
			static let homeCell10Speech = Rswift.StringResource(key: "HomeCell10Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Kalender
			static let homeCell2 = Rswift.StringResource(key: "HomeCell2", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Kalender
			static let homeCell2Speech = Rswift.StringResource(key: "HomeCell2Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Kantenfiltergläser
			static let aidCell2 = Rswift.StringResource(key: "AidCell2", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Kantenfiltergläser
			static let aidCell2Speech = Rswift.StringResource(key: "AidCell2Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Kontakte
			static let homeCell3 = Rswift.StringResource(key: "HomeCell3", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Kontakte
			static let homeCell3Speech = Rswift.StringResource(key: "HomeCell3Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Krankenkasse
			static let supportCell2 = Rswift.StringResource(key: "SupportCell2", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Krankenkasse
			static let supportCell2Speech = Rswift.StringResource(key: "SupportCell2Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Lesetest
			static let selfTestCell1 = Rswift.StringResource(key: "SelfTestCell1", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Lesetest
			static let selfTestCell1Speech = Rswift.StringResource(key: "SelfTestCell1Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Lupe
			static let aidCell3 = Rswift.StringResource(key: "AidCell3", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Lupe
			static let aidCell3Speech = Rswift.StringResource(key: "AidCell3Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Lupenbrille
			static let aidCell4 = Rswift.StringResource(key: "AidCell4", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Lupenbrille
			static let aidCell4Speech = Rswift.StringResource(key: "AidCell4Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Makula
			static let illnessCell5 = Rswift.StringResource(key: "IllnessCell5", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Makula
			static let illnessCell5Speech = Rswift.StringResource(key: "IllnessCell5Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Makula-App
			static let homeTitle = Rswift.StringResource(key: "HomeTitle", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Makulaödem
			static let illnessCell6 = Rswift.StringResource(key: "IllnessCell6", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Makulaödem
			static let illnessCell6Speech = Rswift.StringResource(key: "IllnessCell6Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Maßnahmen
			static let activitiesTitle = Rswift.StringResource(key: "ActivitiesTitle", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Maßnahmen
			static let knowledgeCell4 = Rswift.StringResource(key: "KnowledgeCell4", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Maßnahmen
			static let knowledgeCell4Speech = Rswift.StringResource(key: "KnowledgeCell4Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Medikamente
			static let doctorVisitCell2 = Rswift.StringResource(key: "DoctorVisitCell2", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Medikamente
			static let doctorVisitCell2Speech = Rswift.StringResource(key: "DoctorVisitCell2Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Metamorphopsie
			static let illnessCell7 = Rswift.StringResource(key: "IllnessCell7", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Metamorphopsie
			static let illnessCell7Speech = Rswift.StringResource(key: "IllnessCell7Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: N H Dicke Eingabe
			static let doctorVisitCell4Speech = Rswift.StringResource(key: "DoctorVisitCell4Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: NH-Dicke-Eingabe
			static let doctorVisitCell4 = Rswift.StringResource(key: "DoctorVisitCell4", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Nahrungsergänzung
			static let activitiesCell3 = Rswift.StringResource(key: "ActivitiesCell3", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Nahrungsergänzung
			static let activitiesCell3Speech = Rswift.StringResource(key: "ActivitiesCell3Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Netzhaut
			static let illnessCell8 = Rswift.StringResource(key: "IllnessCell8", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Netzhaut
			static let illnessCell8Speech = Rswift.StringResource(key: "IllnessCell8Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Netzhautdicke
			static let examinationCell3 = Rswift.StringResource(key: "ExaminationCell3", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Netzhautdicke
			static let examinationCell3Speech = Rswift.StringResource(key: "ExaminationCell3Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: O C T A
			static let examinationCell5Speech = Rswift.StringResource(key: "ExaminationCell5Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: O C T Untersuchung
			static let examinationCell4Speech = Rswift.StringResource(key: "ExaminationCell4Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: OCT-A
			static let examinationCell5 = Rswift.StringResource(key: "ExaminationCell5", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: OCT-Untersuchung
			static let examinationCell4 = Rswift.StringResource(key: "ExaminationCell4", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: P R N Schema
			static let therapyCell2Speech = Rswift.StringResource(key: "TherapyCell2Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: PRN-Schema
			static let therapyCell2 = Rswift.StringResource(key: "TherapyCell2", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Rauchen
			static let activitiesCell4 = Rswift.StringResource(key: "ActivitiesCell4", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Rauchen
			static let activitiesCell4Speech = Rswift.StringResource(key: "ActivitiesCell4Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Reha-Maßnahmen
			static let activitiesCell5 = Rswift.StringResource(key: "ActivitiesCell5", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Reha-Maßnahmen
			static let activitiesCell5Speech = Rswift.StringResource(key: "ActivitiesCell5Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Schwerbehindertenausweis
			static let supportCell3 = Rswift.StringResource(key: "SupportCell3", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Schwerbehindertenausweis
			static let supportCell3Speech = Rswift.StringResource(key: "SupportCell3Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Sehbehindertengeld
			static let supportCell4 = Rswift.StringResource(key: "SupportCell4", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Sehbehindertengeld
			static let supportCell4Speech = Rswift.StringResource(key: "SupportCell4Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Selbsttests
			static let homeCell4 = Rswift.StringResource(key: "HomeCell4", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Selbsttests
			static let homeCell4Speech = Rswift.StringResource(key: "HomeCell4Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Selbsttests
			static let selfTestTitle = Rswift.StringResource(key: "SelfTestTitle", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Smartphone
			static let aidCell5 = Rswift.StringResource(key: "AidCell5", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Smartphone
			static let aidCell5Speech = Rswift.StringResource(key: "AidCell5Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Suchfunktion
			static let homeCell8 = Rswift.StringResource(key: "HomeCell8", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Suchfunktion
			static let homeCell8Speech = Rswift.StringResource(key: "HomeCell8Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Tablett P C
			static let aidCell6Speech = Rswift.StringResource(key: "AidCell6Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Tablett-PC
			static let aidCell6 = Rswift.StringResource(key: "AidCell6", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Termine
			static let homeCell1 = Rswift.StringResource(key: "HomeCell1", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Termine
			static let homeCell1Speech = Rswift.StringResource(key: "HomeCell1Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Therapie
			static let knowledgeCell3 = Rswift.StringResource(key: "KnowledgeCell3", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Therapie
			static let knowledgeCell3Speech = Rswift.StringResource(key: "KnowledgeCell3Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Therapie
			static let therapyTitle = Rswift.StringResource(key: "TherapyTitle", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Treat & Extend
			static let therapyCell4 = Rswift.StringResource(key: "TherapyCell4", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Treat & Extend
			static let therapyCell4Speech = Rswift.StringResource(key: "TherapyCell4Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Trockene A M D
			static let illnessCell9Speech = Rswift.StringResource(key: "IllnessCell9Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Trockene AMD
			static let illnessCell9 = Rswift.StringResource(key: "IllnessCell9", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Trockenen A M D
			static let therapyCell3Speech = Rswift.StringResource(key: "TherapyCell3Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Trockenen AMD
			static let therapyCell3 = Rswift.StringResource(key: "TherapyCell3", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Unterstützung
			static let knowledgeCell6 = Rswift.StringResource(key: "KnowledgeCell6", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Unterstützung
			static let knowledgeCell6Speech = Rswift.StringResource(key: "KnowledgeCell6Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Unterstützung
			static let supportTitle = Rswift.StringResource(key: "SupportTitle", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Untersuchung
			static let examinationTitle = Rswift.StringResource(key: "ExaminationTitle", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Untersuchung
			static let knowledgeCell2 = Rswift.StringResource(key: "KnowledgeCell2", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Untersuchung
			static let knowledgeCell2Speech = Rswift.StringResource(key: "KnowledgeCell2Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: V E G F Hemmer
			static let therapyCell5Speech = Rswift.StringResource(key: "TherapyCell5Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: VEGF-Hemmer
			static let therapyCell5 = Rswift.StringResource(key: "TherapyCell5", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Version %@ (%@)
			static let homeCell11 = Rswift.StringResource(key: "HomeCell11", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Version %@ (%@)
			static let homeCell11Speech = Rswift.StringResource(key: "HomeCell11Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Visus
			static let examinationCell6 = Rswift.StringResource(key: "ExaminationCell6", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Visus
			static let examinationCell6Speech = Rswift.StringResource(key: "ExaminationCell6Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Visus Eingabe
			static let doctorVisitCell3Speech = Rswift.StringResource(key: "DoctorVisitCell3Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Visus-Eingabe
			static let doctorVisitCell3 = Rswift.StringResource(key: "DoctorVisitCell3", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Wissen
			static let homeCell5 = Rswift.StringResource(key: "HomeCell5", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Wissen
			static let homeCell5Speech = Rswift.StringResource(key: "HomeCell5Speech", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Wissen
			static let knowledgeTitle = Rswift.StringResource(key: "KnowledgeTitle", tableName: "Menu", bundle: R.hostingBundle, locales: [], comment: nil)

			/// Value:
			static func doctorVisitCell0Speech(_: Void = ()) -> String {
				return NSLocalizedString("DoctorVisitCell0Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: A M D
			static func illnessCell0Speech(_: Void = ()) -> String {
				return NSLocalizedString("IllnessCell0Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: AMD
			static func illnessCell0(_: Void = ()) -> String {
				return NSLocalizedString("IllnessCell0", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Adressverzeichnis
			static func homeCell6(_: Void = ()) -> String {
				return NSLocalizedString("HomeCell6", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Adressverzeichnis
			static func homeCell6Speech(_: Void = ()) -> String {
				return NSLocalizedString("HomeCell6Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Aktuelles
			static func homeCell7(_: Void = ()) -> String {
				return NSLocalizedString("HomeCell7", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Aktuelles
			static func homeCell7Speech(_: Void = ()) -> String {
				return NSLocalizedString("HomeCell7Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Alltagshilfen
			static func aidCell7(_: Void = ()) -> String {
				return NSLocalizedString("AidCell7", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Alltagshilfen
			static func aidCell7Speech(_: Void = ()) -> String {
				return NSLocalizedString("AidCell7Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Alternative Therapien
			static func therapyCell0(_: Void = ()) -> String {
				return NSLocalizedString("TherapyCell0", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Alternative Therapien
			static func therapyCell0Speech(_: Void = ()) -> String {
				return NSLocalizedString("TherapyCell0Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Amsler-Test
			static func activitiesCell0(_: Void = ()) -> String {
				return NSLocalizedString("ActivitiesCell0", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Amsler-Test
			static func activitiesCell0Speech(_: Void = ()) -> String {
				return NSLocalizedString("ActivitiesCell0Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Amslertest
			static func selfTestCell0(_: Void = ()) -> String {
				return NSLocalizedString("SelfTestCell0", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Amslertest
			static func selfTestCell0Speech(_: Void = ()) -> String {
				return NSLocalizedString("SelfTestCell0Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Arztbesuch
			static func doctorVisitTitle(_: Void = ()) -> String {
				return NSLocalizedString("DoctorVisitTitle", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Arztbesuch
			static func homeCell0(_: Void = ()) -> String {
				return NSLocalizedString("HomeCell0", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Arztbesuch
			static func homeCell0Speech(_: Void = ()) -> String {
				return NSLocalizedString("HomeCell0Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Augenspiegelung
			static func examinationCell0(_: Void = ()) -> String {
				return NSLocalizedString("ExaminationCell0", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Augenspiegelung
			static func examinationCell0Speech(_: Void = ()) -> String {
				return NSLocalizedString("ExaminationCell0Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Backup
			static func settingsCell1(_: Void = ()) -> String {
				return NSLocalizedString("SettingsCell1", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Backup
			static func settingsCell1Speech(_: Void = ()) -> String {
				return NSLocalizedString("SettingsCell1Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Bedienung
			static func homeCell12(_: Void = ()) -> String {
				return NSLocalizedString("HomeCell12", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Bedienung
			static func homeCell12Speech(_: Void = ()) -> String {
				return NSLocalizedString("HomeCell12Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Behandlung
			static func doctorVisitCell0(_: Void = ()) -> String {
				return NSLocalizedString("DoctorVisitCell0", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Behandlung
			static func illnessCell4(_: Void = ()) -> String {
				return NSLocalizedString("IllnessCell4", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Behandlung
			static func illnessCell4Speech(_: Void = ()) -> String {
				return NSLocalizedString("IllnessCell4Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Bewegung
			static func activitiesCell1(_: Void = ()) -> String {
				return NSLocalizedString("ActivitiesCell1", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Bewegung
			static func activitiesCell1Speech(_: Void = ()) -> String {
				return NSLocalizedString("ActivitiesCell1Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Bildschirmlesegerät
			static func aidCell0(_: Void = ()) -> String {
				return NSLocalizedString("AidCell0", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Bildschirmlesegerät
			static func aidCell0Speech(_: Void = ()) -> String {
				return NSLocalizedString("AidCell0Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Blindengeld
			static func supportCell0(_: Void = ()) -> String {
				return NSLocalizedString("SupportCell0", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Blindengeld
			static func supportCell0Speech(_: Void = ()) -> String {
				return NSLocalizedString("SupportCell0Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Diagnose
			static func doctorVisitCell1(_: Void = ()) -> String {
				return NSLocalizedString("DoctorVisitCell1", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Diagnose
			static func doctorVisitCell1Speech(_: Void = ()) -> String {
				return NSLocalizedString("DoctorVisitCell1Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Diagnose
			static func knowledgeCell7(_: Void = ()) -> String {
				return NSLocalizedString("KnowledgeCell7", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Diagnose
			static func knowledgeCell7Speech(_: Void = ()) -> String {
				return NSLocalizedString("KnowledgeCell7Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Drusen
			static func illnessCell1(_: Void = ()) -> String {
				return NSLocalizedString("IllnessCell1", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Drusen
			static func illnessCell1Speech(_: Void = ()) -> String {
				return NSLocalizedString("IllnessCell1Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Einstellungen
			static func homeCell9(_: Void = ()) -> String {
				return NSLocalizedString("HomeCell9", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Einstellungen
			static func homeCell9Speech(_: Void = ()) -> String {
				return NSLocalizedString("HomeCell9Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Einstellungen
			static func settingsTitle(_: Void = ()) -> String {
				return NSLocalizedString("SettingsTitle", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Erinnerung
			static func settingsCell0(_: Void = ()) -> String {
				return NSLocalizedString("SettingsCell0", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Erinnerung
			static func settingsCell0Speech(_: Void = ()) -> String {
				return NSLocalizedString("SettingsCell0Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Erkrankung
			static func illnessTitle(_: Void = ()) -> String {
				return NSLocalizedString("IllnessTitle", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Erkrankung
			static func knowledgeCell1(_: Void = ()) -> String {
				return NSLocalizedString("KnowledgeCell1", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Erkrankung
			static func knowledgeCell1Speech(_: Void = ()) -> String {
				return NSLocalizedString("KnowledgeCell1Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Ernährung
			static func activitiesCell2(_: Void = ()) -> String {
				return NSLocalizedString("ActivitiesCell2", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Ernährung
			static func activitiesCell2Speech(_: Void = ()) -> String {
				return NSLocalizedString("ActivitiesCell2Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Feuchte A M D
			static func illnessCell2Speech(_: Void = ()) -> String {
				return NSLocalizedString("IllnessCell2Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Feuchte AMD
			static func illnessCell2(_: Void = ()) -> String {
				return NSLocalizedString("IllnessCell2", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Fluoreszenzangiographie
			static func examinationCell1(_: Void = ()) -> String {
				return NSLocalizedString("ExaminationCell1", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Fluoreszenzangiographie
			static func examinationCell1Speech(_: Void = ()) -> String {
				return NSLocalizedString("ExaminationCell1Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Formen A M D
			static func illnessCell3Speech(_: Void = ()) -> String {
				return NSLocalizedString("IllnessCell3Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Formen AMD
			static func illnessCell3(_: Void = ()) -> String {
				return NSLocalizedString("IllnessCell3", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Fundusfotografie
			static func examinationCell2(_: Void = ()) -> String {
				return NSLocalizedString("ExaminationCell2", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Fundusfotografie
			static func examinationCell2Speech(_: Void = ()) -> String {
				return NSLocalizedString("ExaminationCell2Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Grafik N H Dicke Visus
			static func doctorVisitCell5Speech(_: Void = ()) -> String {
				return NSLocalizedString("DoctorVisitCell5Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Grafik NH-Dicke/Visus
			static func doctorVisitCell5(_: Void = ()) -> String {
				return NSLocalizedString("DoctorVisitCell5", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Hilfsmittel
			static func aidTitle(_: Void = ()) -> String {
				return NSLocalizedString("AidTitle", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Hilfsmittel
			static func knowledgeCell5(_: Void = ()) -> String {
				return NSLocalizedString("KnowledgeCell5", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Hilfsmittel
			static func knowledgeCell5Speech(_: Void = ()) -> String {
				return NSLocalizedString("KnowledgeCell5Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Hotline A M D
			static func supportCell1Speech(_: Void = ()) -> String {
				return NSLocalizedString("SupportCell1Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Hotline-AMD
			static func supportCell1(_: Void = ()) -> String {
				return NSLocalizedString("SupportCell1", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Hörbucherei
			static func aidCell1(_: Void = ()) -> String {
				return NSLocalizedString("AidCell1", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Hörbucherei
			static func aidCell1Speech(_: Void = ()) -> String {
				return NSLocalizedString("AidCell1Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: I V O M Therapie
			static func therapyCell1Speech(_: Void = ()) -> String {
				return NSLocalizedString("TherapyCell1Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: IVOM-Therapie
			static func therapyCell1(_: Void = ()) -> String {
				return NSLocalizedString("TherapyCell1", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Impressum
			static func homeCell10(_: Void = ()) -> String {
				return NSLocalizedString("HomeCell10", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Impressum
			static func homeCell10Speech(_: Void = ()) -> String {
				return NSLocalizedString("HomeCell10Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Kalender
			static func homeCell2(_: Void = ()) -> String {
				return NSLocalizedString("HomeCell2", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Kalender
			static func homeCell2Speech(_: Void = ()) -> String {
				return NSLocalizedString("HomeCell2Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Kantenfiltergläser
			static func aidCell2(_: Void = ()) -> String {
				return NSLocalizedString("AidCell2", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Kantenfiltergläser
			static func aidCell2Speech(_: Void = ()) -> String {
				return NSLocalizedString("AidCell2Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Kontakte
			static func homeCell3(_: Void = ()) -> String {
				return NSLocalizedString("HomeCell3", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Kontakte
			static func homeCell3Speech(_: Void = ()) -> String {
				return NSLocalizedString("HomeCell3Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Krankenkasse
			static func supportCell2(_: Void = ()) -> String {
				return NSLocalizedString("SupportCell2", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Krankenkasse
			static func supportCell2Speech(_: Void = ()) -> String {
				return NSLocalizedString("SupportCell2Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Lesetest
			static func selfTestCell1(_: Void = ()) -> String {
				return NSLocalizedString("SelfTestCell1", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Lesetest
			static func selfTestCell1Speech(_: Void = ()) -> String {
				return NSLocalizedString("SelfTestCell1Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Lupe
			static func aidCell3(_: Void = ()) -> String {
				return NSLocalizedString("AidCell3", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Lupe
			static func aidCell3Speech(_: Void = ()) -> String {
				return NSLocalizedString("AidCell3Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Lupenbrille
			static func aidCell4(_: Void = ()) -> String {
				return NSLocalizedString("AidCell4", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Lupenbrille
			static func aidCell4Speech(_: Void = ()) -> String {
				return NSLocalizedString("AidCell4Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Makula
			static func illnessCell5(_: Void = ()) -> String {
				return NSLocalizedString("IllnessCell5", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Makula
			static func illnessCell5Speech(_: Void = ()) -> String {
				return NSLocalizedString("IllnessCell5Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Makula-App
			static func homeTitle(_: Void = ()) -> String {
				return NSLocalizedString("HomeTitle", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Makulaödem
			static func illnessCell6(_: Void = ()) -> String {
				return NSLocalizedString("IllnessCell6", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Makulaödem
			static func illnessCell6Speech(_: Void = ()) -> String {
				return NSLocalizedString("IllnessCell6Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Maßnahmen
			static func activitiesTitle(_: Void = ()) -> String {
				return NSLocalizedString("ActivitiesTitle", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Maßnahmen
			static func knowledgeCell4(_: Void = ()) -> String {
				return NSLocalizedString("KnowledgeCell4", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Maßnahmen
			static func knowledgeCell4Speech(_: Void = ()) -> String {
				return NSLocalizedString("KnowledgeCell4Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Medikamente
			static func doctorVisitCell2(_: Void = ()) -> String {
				return NSLocalizedString("DoctorVisitCell2", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Medikamente
			static func doctorVisitCell2Speech(_: Void = ()) -> String {
				return NSLocalizedString("DoctorVisitCell2Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Metamorphopsie
			static func illnessCell7(_: Void = ()) -> String {
				return NSLocalizedString("IllnessCell7", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Metamorphopsie
			static func illnessCell7Speech(_: Void = ()) -> String {
				return NSLocalizedString("IllnessCell7Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: N H Dicke Eingabe
			static func doctorVisitCell4Speech(_: Void = ()) -> String {
				return NSLocalizedString("DoctorVisitCell4Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: NH-Dicke-Eingabe
			static func doctorVisitCell4(_: Void = ()) -> String {
				return NSLocalizedString("DoctorVisitCell4", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Nahrungsergänzung
			static func activitiesCell3(_: Void = ()) -> String {
				return NSLocalizedString("ActivitiesCell3", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Nahrungsergänzung
			static func activitiesCell3Speech(_: Void = ()) -> String {
				return NSLocalizedString("ActivitiesCell3Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Netzhaut
			static func illnessCell8(_: Void = ()) -> String {
				return NSLocalizedString("IllnessCell8", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Netzhaut
			static func illnessCell8Speech(_: Void = ()) -> String {
				return NSLocalizedString("IllnessCell8Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Netzhautdicke
			static func examinationCell3(_: Void = ()) -> String {
				return NSLocalizedString("ExaminationCell3", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Netzhautdicke
			static func examinationCell3Speech(_: Void = ()) -> String {
				return NSLocalizedString("ExaminationCell3Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: O C T A
			static func examinationCell5Speech(_: Void = ()) -> String {
				return NSLocalizedString("ExaminationCell5Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: O C T Untersuchung
			static func examinationCell4Speech(_: Void = ()) -> String {
				return NSLocalizedString("ExaminationCell4Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: OCT-A
			static func examinationCell5(_: Void = ()) -> String {
				return NSLocalizedString("ExaminationCell5", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: OCT-Untersuchung
			static func examinationCell4(_: Void = ()) -> String {
				return NSLocalizedString("ExaminationCell4", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: P R N Schema
			static func therapyCell2Speech(_: Void = ()) -> String {
				return NSLocalizedString("TherapyCell2Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: PRN-Schema
			static func therapyCell2(_: Void = ()) -> String {
				return NSLocalizedString("TherapyCell2", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Rauchen
			static func activitiesCell4(_: Void = ()) -> String {
				return NSLocalizedString("ActivitiesCell4", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Rauchen
			static func activitiesCell4Speech(_: Void = ()) -> String {
				return NSLocalizedString("ActivitiesCell4Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Reha-Maßnahmen
			static func activitiesCell5(_: Void = ()) -> String {
				return NSLocalizedString("ActivitiesCell5", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Reha-Maßnahmen
			static func activitiesCell5Speech(_: Void = ()) -> String {
				return NSLocalizedString("ActivitiesCell5Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Schwerbehindertenausweis
			static func supportCell3(_: Void = ()) -> String {
				return NSLocalizedString("SupportCell3", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Schwerbehindertenausweis
			static func supportCell3Speech(_: Void = ()) -> String {
				return NSLocalizedString("SupportCell3Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Sehbehindertengeld
			static func supportCell4(_: Void = ()) -> String {
				return NSLocalizedString("SupportCell4", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Sehbehindertengeld
			static func supportCell4Speech(_: Void = ()) -> String {
				return NSLocalizedString("SupportCell4Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Selbsttests
			static func homeCell4(_: Void = ()) -> String {
				return NSLocalizedString("HomeCell4", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Selbsttests
			static func homeCell4Speech(_: Void = ()) -> String {
				return NSLocalizedString("HomeCell4Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Selbsttests
			static func selfTestTitle(_: Void = ()) -> String {
				return NSLocalizedString("SelfTestTitle", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Smartphone
			static func aidCell5(_: Void = ()) -> String {
				return NSLocalizedString("AidCell5", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Smartphone
			static func aidCell5Speech(_: Void = ()) -> String {
				return NSLocalizedString("AidCell5Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Suchfunktion
			static func homeCell8(_: Void = ()) -> String {
				return NSLocalizedString("HomeCell8", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Suchfunktion
			static func homeCell8Speech(_: Void = ()) -> String {
				return NSLocalizedString("HomeCell8Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Tablett P C
			static func aidCell6Speech(_: Void = ()) -> String {
				return NSLocalizedString("AidCell6Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Tablett-PC
			static func aidCell6(_: Void = ()) -> String {
				return NSLocalizedString("AidCell6", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Termine
			static func homeCell1(_: Void = ()) -> String {
				return NSLocalizedString("HomeCell1", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Termine
			static func homeCell1Speech(_: Void = ()) -> String {
				return NSLocalizedString("HomeCell1Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Therapie
			static func knowledgeCell3(_: Void = ()) -> String {
				return NSLocalizedString("KnowledgeCell3", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Therapie
			static func knowledgeCell3Speech(_: Void = ()) -> String {
				return NSLocalizedString("KnowledgeCell3Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Therapie
			static func therapyTitle(_: Void = ()) -> String {
				return NSLocalizedString("TherapyTitle", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Treat & Extend
			static func therapyCell4(_: Void = ()) -> String {
				return NSLocalizedString("TherapyCell4", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Treat & Extend
			static func therapyCell4Speech(_: Void = ()) -> String {
				return NSLocalizedString("TherapyCell4Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Trockene A M D
			static func illnessCell9Speech(_: Void = ()) -> String {
				return NSLocalizedString("IllnessCell9Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Trockene AMD
			static func illnessCell9(_: Void = ()) -> String {
				return NSLocalizedString("IllnessCell9", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Trockenen A M D
			static func therapyCell3Speech(_: Void = ()) -> String {
				return NSLocalizedString("TherapyCell3Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Trockenen AMD
			static func therapyCell3(_: Void = ()) -> String {
				return NSLocalizedString("TherapyCell3", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Unterstützung
			static func knowledgeCell6(_: Void = ()) -> String {
				return NSLocalizedString("KnowledgeCell6", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Unterstützung
			static func knowledgeCell6Speech(_: Void = ()) -> String {
				return NSLocalizedString("KnowledgeCell6Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Unterstützung
			static func supportTitle(_: Void = ()) -> String {
				return NSLocalizedString("SupportTitle", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Untersuchung
			static func examinationTitle(_: Void = ()) -> String {
				return NSLocalizedString("ExaminationTitle", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Untersuchung
			static func knowledgeCell2(_: Void = ()) -> String {
				return NSLocalizedString("KnowledgeCell2", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Untersuchung
			static func knowledgeCell2Speech(_: Void = ()) -> String {
				return NSLocalizedString("KnowledgeCell2Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: V E G F Hemmer
			static func therapyCell5Speech(_: Void = ()) -> String {
				return NSLocalizedString("TherapyCell5Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: VEGF-Hemmer
			static func therapyCell5(_: Void = ()) -> String {
				return NSLocalizedString("TherapyCell5", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Version %@ (%@)
			static func homeCell11(_ value1: String, _ value2: String) -> String {
				return String(format: NSLocalizedString("HomeCell11", tableName: "Menu", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
			}

			/// Value: Version %@ (%@)
			static func homeCell11Speech(_ value1: String, _ value2: String) -> String {
				return String(format: NSLocalizedString("HomeCell11Speech", tableName: "Menu", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
			}

			/// Value: Visus
			static func examinationCell6(_: Void = ()) -> String {
				return NSLocalizedString("ExaminationCell6", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Visus
			static func examinationCell6Speech(_: Void = ()) -> String {
				return NSLocalizedString("ExaminationCell6Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Visus Eingabe
			static func doctorVisitCell3Speech(_: Void = ()) -> String {
				return NSLocalizedString("DoctorVisitCell3Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Visus-Eingabe
			static func doctorVisitCell3(_: Void = ()) -> String {
				return NSLocalizedString("DoctorVisitCell3", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Wissen
			static func homeCell5(_: Void = ()) -> String {
				return NSLocalizedString("HomeCell5", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Wissen
			static func homeCell5Speech(_: Void = ()) -> String {
				return NSLocalizedString("HomeCell5Speech", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Wissen
			static func knowledgeTitle(_: Void = ()) -> String {
				return NSLocalizedString("KnowledgeTitle", tableName: "Menu", bundle: R.hostingBundle, comment: "")
			}

			fileprivate init() {}
		}

		/// This `R.string.newAppointment` struct is generated, and contains static references to 1 localization keys.
		struct newAppointment {
			/// Value: Neue Termine
			static let title = Rswift.StringResource(key: "Title", tableName: "NewAppointment", bundle: R.hostingBundle, locales: [], comment: nil)

			/// Value: Neue Termine
			static func title(_: Void = ()) -> String {
				return NSLocalizedString("Title", tableName: "NewAppointment", bundle: R.hostingBundle, comment: "")
			}

			fileprivate init() {}
		}

		/// This `R.string.note` struct is generated, and contains static references to 2 localization keys.
		struct note {
			/// Value: Geben Sie hier Ihren Text ein.
			static let placeholderText = Rswift.StringResource(key: "PlaceholderText", tableName: "Note", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Notizen
			static let title = Rswift.StringResource(key: "Title", tableName: "Note", bundle: R.hostingBundle, locales: [], comment: nil)

			/// Value: Geben Sie hier Ihren Text ein.
			static func placeholderText(_: Void = ()) -> String {
				return NSLocalizedString("PlaceholderText", tableName: "Note", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Notizen
			static func title(_: Void = ()) -> String {
				return NSLocalizedString("Title", tableName: "Note", bundle: R.hostingBundle, comment: "")
			}

			fileprivate init() {}
		}

		/// This `R.string.readingTest` struct is generated, and contains static references to 9 localization keys.
		struct readingTest {
			/// Value: 1. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.
			static let textCellContentTiny = Rswift.StringResource(key: "TextCellContentTiny", tableName: "ReadingTest", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: 2. Menge. Von Zeit zu Zeit erhascht ich ein einen, besah ihn und lieb ihn fliegen, denn von der gewöhnlichen Sorte hatt ich läng st alle Kasten voll. Aber jetzt, in der Ferne,
			static let textCellContentLittle = Rswift.StringResource(key: "TextCellContentLittle", tableName: "ReadingTest", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: 3. vom Feld in die Wiesen dämelt ich glücklich dahin. Schmetterlinge flogen in
			static let textCellContentSmall = Rswift.StringResource(key: "TextCellContentSmall", tableName: "ReadingTest", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: 4. den Frack voll er Pflaumen. Hell schien
			static let textCellContentMedium = Rswift.StringResource(key: "TextCellContentMedium", tableName: "ReadingTest", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: 5. macht ich mich hübsch und
			static let textCellContentLarge = Rswift.StringResource(key: "TextCellContentLarge", tableName: "ReadingTest", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: 6. Sonntags anderen zu
			static let textCellContentBig = Rswift.StringResource(key: "TextCellContentBig", tableName: "ReadingTest", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Lesetest
			static let title = Rswift.StringResource(key: "Title", tableName: "ReadingTest", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: links
			static let splitCellTitleLeft = Rswift.StringResource(key: "SplitCellTitleLeft", tableName: "ReadingTest", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: rechts
			static let splitCellTitleRight = Rswift.StringResource(key: "SplitCellTitleRight", tableName: "ReadingTest", bundle: R.hostingBundle, locales: [], comment: nil)

			/// Value: 1. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.
			static func textCellContentTiny(_: Void = ()) -> String {
				return NSLocalizedString("TextCellContentTiny", tableName: "ReadingTest", bundle: R.hostingBundle, comment: "")
			}

			/// Value: 2. Menge. Von Zeit zu Zeit erhascht ich ein einen, besah ihn und lieb ihn fliegen, denn von der gewöhnlichen Sorte hatt ich läng st alle Kasten voll. Aber jetzt, in der Ferne,
			static func textCellContentLittle(_: Void = ()) -> String {
				return NSLocalizedString("TextCellContentLittle", tableName: "ReadingTest", bundle: R.hostingBundle, comment: "")
			}

			/// Value: 3. vom Feld in die Wiesen dämelt ich glücklich dahin. Schmetterlinge flogen in
			static func textCellContentSmall(_: Void = ()) -> String {
				return NSLocalizedString("TextCellContentSmall", tableName: "ReadingTest", bundle: R.hostingBundle, comment: "")
			}

			/// Value: 4. den Frack voll er Pflaumen. Hell schien
			static func textCellContentMedium(_: Void = ()) -> String {
				return NSLocalizedString("TextCellContentMedium", tableName: "ReadingTest", bundle: R.hostingBundle, comment: "")
			}

			/// Value: 5. macht ich mich hübsch und
			static func textCellContentLarge(_: Void = ()) -> String {
				return NSLocalizedString("TextCellContentLarge", tableName: "ReadingTest", bundle: R.hostingBundle, comment: "")
			}

			/// Value: 6. Sonntags anderen zu
			static func textCellContentBig(_: Void = ()) -> String {
				return NSLocalizedString("TextCellContentBig", tableName: "ReadingTest", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Lesetest
			static func title(_: Void = ()) -> String {
				return NSLocalizedString("Title", tableName: "ReadingTest", bundle: R.hostingBundle, comment: "")
			}

			/// Value: links
			static func splitCellTitleLeft(_: Void = ()) -> String {
				return NSLocalizedString("SplitCellTitleLeft", tableName: "ReadingTest", bundle: R.hostingBundle, comment: "")
			}

			/// Value: rechts
			static func splitCellTitleRight(_: Void = ()) -> String {
				return NSLocalizedString("SplitCellTitleRight", tableName: "ReadingTest", bundle: R.hostingBundle, comment: "")
			}

			fileprivate init() {}
		}

		/// This `R.string.reminder` struct is generated, and contains static references to 4 localization keys.
		struct reminder {
			/// Value: %2d min
			static let pickerMinuteValue = Rswift.StringResource(key: "PickerMinuteValue", tableName: "Reminder", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: %d h
			static let pickerHourValue = Rswift.StringResource(key: "PickerHourValue", tableName: "Reminder", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Erinnerung
			static let title = Rswift.StringResource(key: "Title", tableName: "Reminder", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Vor Terminen erinnern
			static let checkboxTitle = Rswift.StringResource(key: "CheckboxTitle", tableName: "Reminder", bundle: R.hostingBundle, locales: [], comment: nil)

			/// Value: %2d min
			static func pickerMinuteValue(_ value1: Int) -> String {
				return String(format: NSLocalizedString("PickerMinuteValue", tableName: "Reminder", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
			}

			/// Value: %d h
			static func pickerHourValue(_ value1: Int) -> String {
				return String(format: NSLocalizedString("PickerHourValue", tableName: "Reminder", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
			}

			/// Value: Erinnerung
			static func title(_: Void = ()) -> String {
				return NSLocalizedString("Title", tableName: "Reminder", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Vor Terminen erinnern
			static func checkboxTitle(_: Void = ()) -> String {
				return NSLocalizedString("CheckboxTitle", tableName: "Reminder", bundle: R.hostingBundle, comment: "")
			}

			fileprivate init() {}
		}

		/// This `R.string.search` struct is generated, and contains static references to 2 localization keys.
		struct search {
			/// Value: Suchfunktion
			static let title = Rswift.StringResource(key: "Title", tableName: "Search", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Suchwort
			static let searchInputCellTextFieldPlaceholder = Rswift.StringResource(key: "SearchInputCellTextFieldPlaceholder", tableName: "Search", bundle: R.hostingBundle, locales: [], comment: nil)

			/// Value: Suchfunktion
			static func title(_: Void = ()) -> String {
				return NSLocalizedString("Title", tableName: "Search", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Suchwort
			static func searchInputCellTextFieldPlaceholder(_: Void = ()) -> String {
				return NSLocalizedString("SearchInputCellTextFieldPlaceholder", tableName: "Search", bundle: R.hostingBundle, comment: "")
			}

			fileprivate init() {}
		}

		/// This `R.string.splash` struct is generated, and contains static references to 3 localization keys.
		struct splash {
			/// Value: Datenbank Fehler
			static let databaseTouchErrorTitle = Rswift.StringResource(key: "DatabaseTouchErrorTitle", tableName: "Splash", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Die Datenbank konnte nicht geöffnet werden. Bitte beenden Sie die App und versuchen Sie es erneut. Sollte es weiterhin nicht möglich sein auf die Datenbank zuzugreifen, dann wenden Sie sich bitte an den Support.
			static let databaseTouchErrorMessage = Rswift.StringResource(key: "DatabaseTouchErrorMessage", tableName: "Splash", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Ok
			static let databaseTouchErrorConfirmButton = Rswift.StringResource(key: "DatabaseTouchErrorConfirmButton", tableName: "Splash", bundle: R.hostingBundle, locales: [], comment: nil)

			/// Value: Datenbank Fehler
			static func databaseTouchErrorTitle(_: Void = ()) -> String {
				return NSLocalizedString("DatabaseTouchErrorTitle", tableName: "Splash", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Die Datenbank konnte nicht geöffnet werden. Bitte beenden Sie die App und versuchen Sie es erneut. Sollte es weiterhin nicht möglich sein auf die Datenbank zuzugreifen, dann wenden Sie sich bitte an den Support.
			static func databaseTouchErrorMessage(_: Void = ()) -> String {
				return NSLocalizedString("DatabaseTouchErrorMessage", tableName: "Splash", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Ok
			static func databaseTouchErrorConfirmButton(_: Void = ()) -> String {
				return NSLocalizedString("DatabaseTouchErrorConfirmButton", tableName: "Splash", bundle: R.hostingBundle, comment: "")
			}

			fileprivate init() {}
		}

		/// This `R.string.visusNhdInput` struct is generated, and contains static references to 5 localization keys.
		struct visusNhdInput {
			/// Value: NHD-Eingabe
			static let nhdTitle = Rswift.StringResource(key: "NHDTitle", tableName: "VisusNhdInput", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Speichern
			static let confirmButtonTitle = Rswift.StringResource(key: "ConfirmButtonTitle", tableName: "VisusNhdInput", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: Visus-Eingabe
			static let visusTitle = Rswift.StringResource(key: "VisusTitle", tableName: "VisusNhdInput", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: links
			static let cellTitleLeft = Rswift.StringResource(key: "CellTitleLeft", tableName: "VisusNhdInput", bundle: R.hostingBundle, locales: [], comment: nil)
			/// Value: rechts
			static let cellTitleRight = Rswift.StringResource(key: "CellTitleRight", tableName: "VisusNhdInput", bundle: R.hostingBundle, locales: [], comment: nil)

			/// Value: NHD-Eingabe
			static func nhdTitle(_: Void = ()) -> String {
				return NSLocalizedString("NHDTitle", tableName: "VisusNhdInput", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Speichern
			static func confirmButtonTitle(_: Void = ()) -> String {
				return NSLocalizedString("ConfirmButtonTitle", tableName: "VisusNhdInput", bundle: R.hostingBundle, comment: "")
			}

			/// Value: Visus-Eingabe
			static func visusTitle(_: Void = ()) -> String {
				return NSLocalizedString("VisusTitle", tableName: "VisusNhdInput", bundle: R.hostingBundle, comment: "")
			}

			/// Value: links
			static func cellTitleLeft(_: Void = ()) -> String {
				return NSLocalizedString("CellTitleLeft", tableName: "VisusNhdInput", bundle: R.hostingBundle, comment: "")
			}

			/// Value: rechts
			static func cellTitleRight(_: Void = ()) -> String {
				return NSLocalizedString("CellTitleRight", tableName: "VisusNhdInput", bundle: R.hostingBundle, comment: "")
			}

			fileprivate init() {}
		}

		fileprivate init() {}
	}

	fileprivate struct intern: Rswift.Validatable {
		fileprivate static func validate() throws {
			// There are no resources to validate
		}

		fileprivate init() {}
	}

	fileprivate class Class {}

	fileprivate init() {}
}

struct _R {
	struct nib {
		struct _CalendarWeekCellView: Rswift.NibResourceType {
			let bundle = R.hostingBundle
			let name = "CalendarWeekCellView"

			func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject: AnyObject]? = nil) -> UIKit.UIView? {
				return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
			}

			fileprivate init() {}
		}

		struct _SplitCellView: Rswift.NibResourceType {
			let bundle = R.hostingBundle
			let name = "SplitCellView"

			func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject: AnyObject]? = nil) -> UIKit.UIView? {
				return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
			}

			fileprivate init() {}
		}

		struct _VisusNhdInputPickerCellView: Rswift.NibResourceType {
			let bundle = R.hostingBundle
			let name = "VisusNhdInputPickerCellView"

			func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject: AnyObject]? = nil) -> UIKit.UIView? {
				return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
			}

			fileprivate init() {}
		}

		fileprivate init() {}
	}

	struct storyboard {
		struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
			typealias InitialController = UIKit.UIViewController

			let bundle = R.hostingBundle
			let name = "LaunchScreen"

			fileprivate init() {}
		}

		fileprivate init() {}
	}

	fileprivate init() {}
}
